Contributor,Date,Message,Files
Simen Svale Skogsrud,2009-01-25,version 0.1,"['COPYING.txt,Makefile,config.h,gcode.c,gcode.h,main.c,motion_control.c,motion_control.h,nuts_bolts.h,readme.txt,serial_protocol.c,serial_protocol.h,spindle_control.c,spindle_control.h,todo.txt,wiring_private.h,wiring_serial.c,wiring_serial.h']"
Simen Svale Skogsrud,2009-01-25,Added status in readme,['readme.txt']
Simen Svale Skogsrud,2009-01-26,minor edit,['readme.txt']
Simen Svale Skogsrud,2009-01-26,renamed file,['COPYING']
Simen Svale Skogsrud,2009-01-27,added testbed for the arc interpolator i will be using,['arc.rb']
Simen Svale Skogsrud,2009-01-27,minor edit,['readme.txt']
Simen Svale Skogsrud,2009-01-27,minor edit,['readme.txt']
Simen Svale Skogsrud,2009-01-28,added buffered stepping support and the rudiments of the arc-interpolator,"['Makefile,arc.rb,config.h,main.c,motion_control.c,motion_control.h,stepper.c,stepper.h,todo.txt']"
Simen Svale Skogsrud,2009-01-29,tweaks and bugfixes,"['Makefile,gcode.c,motion_control.c,readme.txt,serial_protocol.c,stepper.c,stepper.h,todo.txt,wiring_serial.c']"
Simen Svale Skogsrud,2009-01-29,minor edit,['motion_control.c']
Simen Svale Skogsrud,2009-01-29,motion control level support for arcs. No gcode yet,"['motion_control.c,motion_control.h,todo.txt']"
Simen Svale Skogsrud,2009-01-30,optimized arc code for size and speed,"['motion_control.c,motion_control.h']"
Simen Svale Skogsrud,2009-01-30,minor optimizatin for size,['motion_control.c']
Simen Svale Skogsrud,2009-01-30,enabled interrupts and mad buffer flushing atomic,['stepper.c']
Simen Svale Skogsrud,2009-01-30,minor edits,"['gcode.c,motion_control.c']"
Simen Svale Skogsrud,2009-01-30,updated todo,['todo.txt']
Simen Svale Skogsrud,2009-01-30,gcode support for offset arcs,"['Makefile,theta.rb,gcode.c,geometry.c,geometry.h,todo.txt']"
Simen Svale Skogsrud,2009-02-01,arc code complete with support for both R and IJK style blocks,"['arc.rb,config.h,gcode.c,geometry.c,geometry.h,motion_control.c']"
Simen Svale Skogsrud,2009-02-03,lots and lots of bugfixes after running on reals hardware for the first time,"['Makefile,arc.rb,theta.rb,config.h,gcode.c,gcode.h,geometry.c,geometry.h,unrolled_arc.c,main.c,motion_control.c,motion_control.h,nuts_bolts.h,serial_protocol.c,serial_protocol.h,stepper.c,stepper.h,echotest.rb,gcodetest.png']"
Simen Svale Skogsrud,2009-02-03,deleted a stray png,['gcodetest.png']
Simen Svale Skogsrud,2009-02-03,stepper signals looks good on scope,"['motion_control.c,nuts_bolts.h,stepper.c,echotest.rb,gcodetest.png']"
Simen Svale Skogsrud,2009-02-04,presumably fixed the feed rate computation,"['config.h,motion_control.c,serial_protocol.c,serial_protocol.h,stepper.c,todo.txt']"
Simen Svale Skogsrud,2009-02-08,"pace calculation correct, arc algorithm correct, support for negative R","['config.h,gcode.c,motion_control.c,console,proxy,serial_protocol.c,echotest.rb,gcodetest.png,todo.txt']"
Simen Svale Skogsrud,2009-02-08,updated readme,['readme.txt']
Simen Svale Skogsrud,2009-02-08,fixed buffering of pace changes and general cleaning,"['gcode.c,main.c,motion_control.c,stepper.c,todo.txt']"
Simen Svale Skogsrud,2009-02-08,"optimized for size, shaved 2k","['gcode.c,motion_control.c,motion_control.h,stepper.c,stepper.h']"
Simen Svale Skogsrud,2009-02-08,shaved ~100 bytes of code space,['gcode.c']
Simen Svale Skogsrud,2009-02-08,optimized for size and did some housekeeping,"['gcode.c,motion_control.c,motion_control.h,stepper.c,todo.txt']"
Simen Svale Skogsrud,2009-02-09,added code to estimate steps in arc in order to support helical motion,"['geometry.c,geometry.h,motion_control.c,stepper.c,stepper.h']"
Simen Svale Skogsrud,2009-02-09,edit,['motion_control.c']
Simen Svale Skogsrud,2009-02-11,support for helical motion,"['gcode.c,gcode.h,motion_control.c,motion_control.h,stepper.c,stepper.h']"
Simen Svale Skogsrud,2009-02-11,tiny edit that saved a lot of bytes,['gcode.c']
Simen Svale Skogsrud,2009-02-11,minor edits,['motion_control.c']
Simen Svale Skogsrud,2009-02-11,updated todo,['todo.txt']
Simen Svale Skogsrud,2009-02-15,configurations and adjustments to protocol,"['config.h,gcode.c,motion_control.c,readme.txt,console,proxy,serial_protocol.c']"
Simen Svale Skogsrud,2010-01-04,minor revision,"['.gitignore,config.h,todo.txt']"
Simen Svale Skogsrud,2010-01-05,removed support for echoing of steps via serial,"['gcode.c,serial_protocol.c,stepper.c']"
Simen Svale Skogsrud,2010-01-05,fixed en operator precedence bug with step mask calculations,"['config.h,stepper.c']"
Simen Svale Skogsrud,2010-01-06,fixed feed rate calculation,"['config.h,motion_control.c']"
Simen Svale Skogsrud,2010-01-06,fixed feed rate calculation,['motion_control.c']
Simen Svale Skogsrud,2010-01-06,updated readme,['readme.txt']
Simen Svale Skogsrud,2010-01-06,added a simple ruby-script to stream gcode and made serial protocol more reprap-like,"['stream,stream.rb,test.gcode,serial_protocol.c']"
Simen Svale Skogsrud,2010-01-07,added some gcode to test with,"['braid.gcode,zoetrope.gcode,motion_control.c,stream.rb']"
Simen Svale Skogsrud,2010-02-27,"Fixed a number of bugs caused by using abs() on floats and long ints. Added support for selectively inverting bits of the stepping port. Debugged, optimized and cleaned up timing code for the step-pulses.","['Makefile,config.h,gcode.c,braid_two_decimals.gcode,miller.gcode,geometry.c,main.c,motion_control.c,console,stream.rb,serial_protocol.c,stepper.c,stepper.h,wiring_serial.c']"
Simen Svale Skogsrud,2010-02-27,fixed a problem with the direction-pins,"['config.h,stepper.c']"
Simen Svale Skogsrud,2010-03-02,"improved the serial protocol, added some debug pins for a while","['main.c,motion_control.c,serial_protocol.c,stepper.c']"
Simen Svale Skogsrud,2010-03-02,first stab at replacing step-buffering with line-buffering,"['config.h,braid_cut2d.gcode,motion_control.c,stepper.c,stepper.h']"
Simen Svale Skogsrud,2010-03-03,"successfully maintained 30khz, lots of optimization of code and buffering allocation","['gcode.c,motion_control.c,stream.rb,stepper.c,wiring_serial.c']"
Simen Svale Skogsrud,2010-03-03,added segmented arc support with configurable segmentation,"['config.h,gcode.c,motion_control.c,stepper.c,stepper.h']"
Simen Svale Skogsrud,2010-03-03,general clean up after refactoring,"['config.h,main.c,motion_control.c,serial_protocol.c,serial_protocol.h,stepper.c,stepper.h,todo.txt']"
Simen Svale Skogsrud,2010-03-03,deleted more code following line-buffer refactoring,"['gcode.c,geometry.c,geometry.h']"
Simen Svale Skogsrud,2010-03-03,further refactoring debris extraction,"['Makefile,gcode.c,gcode.h,geometry.c,geometry.h,motion_control.c,motion_control.h,nuts_bolts.h,stepper.c,stepper.h']"
Simen Svale Skogsrud,2010-03-03,removed void credits,['motion_control.c']
Simen Svale Skogsrud,2010-03-03,removed more orphaned code,"['arc.rb,theta.rb']"
Simen Svale Skogsrud,2010-03-03,minor edit,['gcode.c']
Simen Svale Skogsrud,2010-03-03,added back a line that was not really refactoring debris come to think of it,['stepper.c']
Simen Svale Skogsrud,2010-03-03,cleaned up stepper signal in junctions between short line segments,['stepper.c']
Simen Svale Skogsrud,2010-03-03,added protection against retriggering stepper irq,['stepper.c']
Simen Svale Skogsrud,2010-03-03,adjustments to retriggering protection,['stepper.c']
Simen Svale Skogsrud,2010-03-04,minor edits after verifying refactored grbl on real hardware,"['Makefile,config.h,braid_cut2d.gcode,main.c,motion_control.c,stream,stepper.c']"
Simen Svale Skogsrud,2010-03-04,Switched to linebuffer buffering in main branch. Updated readme,['readme.txt']
Simen Svale Skogsrud,2010-03-05,removed a warning,['stepper.c']
Simen Svale Skogsrud,2010-03-07,Added runtime configurable global settings with eeprom persitence,"['Makefile,config.c,config.h,eeprom.c,eeprom.h,gcode.c,main.c,motion_control.c,readme.txt,stepper.c,todo.txt,wiring_serial.c,wiring_serial.h']"
Simen Svale Skogsrud,2010-03-07,updated readme,['readme.txt']
Simen Svale Skogsrud,2010-03-07,"purged legacy code, updated todo","['unrolled_arc.c,todo.txt']"
Simen Svale Skogsrud,2010-03-07,moved all strings to pgm-memory,"['config.c,config.h,console,stream.rb,serial_protocol.c,stepper.c,wiring_serial.c,wiring_serial.h']"
Simen Svale Skogsrud,2010-03-14,Grbl can now take advantage of the extra memory in the 328,"['Makefile,stream.rb,serial_protocol.c,stepper.c,wiring_serial.c']"
Simen Svale Skogsrud,2010-04-22,fixed a string wrongly stored in SRAM,['config.c']
Simen Svale Skogsrud,2010-06-18,updated readme,['readme.txt']
Simen Svale Skogsrud,2010-06-18,the stream script will no longer reset the arduino before it completes the last couple of operation in a g-code-file,['stream.rb']
Simen Svale Skogsrud,2010-06-28,rough accelleration stuff,"['acceleration.c,acceleration.h,config.c,config.h,motion_control.c,console,stream.rb,stepper.c']"
Simen Svale Skogsrud,2010-07-02,added twitter link,['readme.txt']
Simen Svale Skogsrud,2010-07-02,support both CR and LF and CRLF line termination,['serial_protocol.c']
Simen Svale Skogsrud,2010-07-03,completed support for separate feed-rate for G0-operations,['gcode.c']
Simen Svale Skogsrud,2010-07-03,fixed the inches->mm conversion bug and some general cleanup,"['config.h,gcode.c,serial_protocol.h']"
Simen Svale Skogsrud,2010-07-08,minor edits,"['config.h,gcode.c,console,stream,stream.rb,todo.txt']"
Simen Svale Skogsrud,2010-07-08,Merge branch 'bugfixes',['']
Simen Svale Skogsrud,2010-12-20,"added code with merge conflict as note to self, accelleration will just have to wait","['.gitignore,Makefile,accelleration.h,config.c,config.h,nuts_bolts.h,stepper.c']"
Simen Svale Skogsrud,2011-01-03,"stepper.c now has 90% of acelleration support built in except for the planner, still som known conflicts to mark rough spots that need attention later","['acceleration.c,motion_control.c,stepper.c']"
Simen Svale Skogsrud,2011-01-14,added basic accelleration management with trapezoid accelleration profiles but no look ahead optimization (coming next patch),"['Makefile,accelleration.h,config.c,config.h,gcode.c,motion_control.c,motion_control.h,acceleration.c,acceleration.h,nuts_bolts.h,console,stream.rb,stepper.c,stepper.h']"
Simen Svale Skogsrud,2011-01-14,refactored block buffer into separate module motion_plan pending the addition of the actual look ahead planner,"['Makefile,accelleration.h,config.c,config.h,gcode.c,gcode.h,main.c,motion_control.c,motion_control.h,motion_plan.c,motion_plan.h,acceleration.c,nuts_bolts.h,console,serial_protocol.c,serial_protocol.h,spindle_control.c,spindle_control.h,stepper.c,stepper.h,todo.txt']"
Simen Svale Skogsrud,2011-01-14,eliminated an annoying constant that broke my cleanly layered abstractions,"['config.h,motion_plan.c,motion_plan.h,stepper.c,stepper.h']"
Simen Svale Skogsrud,2011-01-14,interface to enable or disable acceleration management,"['main.c,motion_plan.c,motion_plan.h']"
Simen Svale Skogsrud,2011-01-14,determined the SRAM requirements as part of the build process (requires ruby),['Makefile']
Simen Svale Skogsrud,2011-01-15,"pcomplete, fully untested, support for accelleration management with look ahead optimization, finally","['Makefile,config.c,config.h,main.c,readme.txt,stepper.c,stepper_plan.c,stepper_plan.h']"
Simen Svale Skogsrud,2011-01-15,purged some unneeded files,"['braid.gcode,braid_cut2d.gcode,braid_two_decimals.gcode,miller.gcode,zoetrope.gcode,acceleration.c,acceleration.h']"
Simen Svale Skogsrud,2011-01-15,removed one more extraneous file,['todo.txt']
Simen Svale Skogsrud,2011-01-17,added DS_Store to gitignore,['.gitignore']
Simen Svale Skogsrud,2011-01-17,added note about fuses in Makefile,['Makefile']
Simen Svale Skogsrud,2011-01-22,"still not running, but a lot further along","['config.c,config.h,main.c,console,serial_protocol.c,stepper.c,stepper_plan.c,stepper_plan.h']"
Simen Svale Skogsrud,2011-01-23,the trapezoid generator seems to be working,"['stepper.c,stepper_plan.c']"
Simen Svale Skogsrud,2011-01-24,"look ahead planner complete and enabled save the acceleration limiting forward scan. Not tested on real hardware, just logic analyzer","['console,stepper.c,stepper_plan.c']"
Simen Svale Skogsrud,2011-01-24,"acceleration management implementation complete, now ready for testing on actual real machine",['stepper_plan.c']
Simen Svale Skogsrud,2011-01-24,added useful comments about the algorithms used in the acceleration planner,"['stepper_plan.c,stepper_plan.h']"
Simen Svale Skogsrud,2011-01-24,reallocated debug pin to time replanning,"['stepper.c,stepper_plan.c']"
Simen Svale Skogsrud,2011-01-24,updated settings version number. Old settings must be reset now that we have changed the format of the settings,"['config.c,config.h']"
Simen Svale Skogsrud,2011-01-25,reorganized functions somewhat,['stepper_plan.c']
Simen Svale Skogsrud,2011-01-25,eliminated step down-counter in stepper.c,"['stepper.c,stepper_plan.c']"
Simen Svale Skogsrud,2011-01-25,cleanup,['stepper_plan.c']
Simen Svale Skogsrud,2011-01-25,cleanup,['stepper_plan.h']
Simen Svale Skogsrud,2011-01-25,updated readme,"['readme.textile,readme.txt']"
Simen Svale Skogsrud,2011-01-25,cleaned up stepper.c,['stepper.c']
Simen Svale Skogsrud,2011-01-25,updated readme,['readme.textile']
Simen Svale Skogsrud,2011-01-25,added high-level api-call for enabling or disabling the acceleration manager,"['motion_control.c,motion_control.h,stepper_plan.c']"
Simen Svale Skogsrud,2011-01-25,updated struct types to use typedefs and conform to Micael Barrs Embedded C Coding Standard,"['config.c,config.h,gcode.c,stepper.c,stepper_plan.c,stepper_plan.h']"
Simen Svale Skogsrud,2011-01-25,purged an unused typedef,['wiring_private.h']
Simen Svale Skogsrud,2011-01-25,"bye bye support for atmega 168, your flash space has overflowed","['stepper.c,stepper_plan.h,wiring_serial.c']"
Simen Svale Skogsrud,2011-01-25,made local variables static,"['gcode.c,serial_protocol.c,stepper.c,stepper_plan.c']"
Simen Svale Skogsrud,2011-01-25,minor edits,['stepper.c']
Simen Svale Skogsrud,2011-01-26,configured avr-gcc for dead code removal,['Makefile']
Simen Svale Skogsrud,2011-01-31,probably fixed a bug that would crash grbl after ~20 commands,['stepper_plan.c']
Simen Svale Skogsrud,2011-01-31,merged master,['']
Simen Svale Skogsrud,2011-01-31,cleaned up formatting gcode.c,['gcode.c']
Simen Svale Skogsrud,2011-01-31,added support for silently upgrading from old settings record w/o accelleration parameters,"['config.c,config.h']"
Simen Svale Skogsrud,2011-01-31,formatting,"['eeprom.c,console,stepper.c']"
Simen Svale Skogsrud,2011-01-31,formatting,"['gcode.c,main.c,motion_control.c,motion_control.h,nuts_bolts.h,stepper_plan.c']"
Simen Svale Skogsrud,2011-02-03,"added the new, more optimal pin configuration",['config.h']
Simen Svale Skogsrud,2011-02-03,small fixes after testing on real hardware. Still no chaining of motions and something odd with arcs,"['config.h,motion_control.c,console,stepper_plan.c']"
Simen Svale Skogsrud,2011-02-03,ousted numerous small bugs in acceleration-planner,['stepper_plan.c']
Simen Svale Skogsrud,2011-02-03,acceleration management is disabled during arc-motions until the two can be made to play nice together,['motion_control.c']
Simen Svale Skogsrud,2011-02-03,small error in trapezoid-calculation,['stepper_plan.c']
Simen Svale Skogsrud,2011-02-04,eliminated an old header file,['wiring_serial.c']
Simen Svale Skogsrud,2011-02-04,"removed a grave little bug in the planner and added a baseline safe speed so that motion sequences do not attempt to go to speed 0, but to a safe, higher speed based on the max_jerk setting","['stepper.c,stepper_plan.c,stepper_plan.h']"
Simen Svale Skogsrud,2011-02-04,small fry,"['console,wiring_private.h']"
Simen Svale Skogsrud,2011-02-04,fixed a bug where F-commands never would modify feed-rate of G0-operations,['gcode.c']
Simen Svale Skogsrud,2011-02-05,added error messages and dropped echoing of command input,"['gcode.h,serial_protocol.c']"
Simen Svale Skogsrud,2011-02-05,renamed config.* to settings.*,"['Makefile,gcode.c,main.c,motion_control.c,serial_protocol.c,settings.c,settings.h,spindle_control.c,stepper.c,stepper_plan.c']"
Simen Svale Skogsrud,2011-02-05,refactored compile time settings back into a new file called config.h,"['config.h,motion_control.c,serial_protocol.c,settings.c,settings.h,spindle_control.c,stepper.c,stepper_plan.c']"
Simen Svale Skogsrud,2011-02-05,renamed public methods of settings module to include module name,"['gcode.c,settings.c,settings.h']"
Simen Svale Skogsrud,2011-02-06,cleaned up methods for enabling/disabling acceleration manger,"['motion_control.c,motion_control.h,stepper_plan.c,stepper_plan.h']"
Simen Svale Skogsrud,2011-02-06,Refactored line buffering to eliminate state from motion control and centralize tracking of position. UNTESTED: NEEDS TESTING,"['main.c,motion_control.c,motion_control.h,stepper.c,stepper.h,stepper_plan.c,stepper_plan.h']"
Simen Svale Skogsrud,2011-02-06,replaced use of magical numbers for axis reference with constants,"['settings.c,stepper_plan.c']"
Simen Svale Skogsrud,2011-02-06,purged an unused method,"['stepper.c,stepper.h']"
Simen Svale Skogsrud,2011-02-06,refactoring that improved compartmentalization between stepper and stepper_plan modules,"['stepper.c,stepper_plan.c,stepper_plan.h']"
Simen Svale Skogsrud,2011-02-07,missing edit,['stepper_plan.h']
Simen Svale Skogsrud,2011-02-07,peh. Missing edit II,['stepper_plan.c']
Simen Svale Skogsrud,2011-02-07,purged debug code,"['stepper.c,stepper_plan.c']"
Simen Svale Skogsrud,2011-02-10,config command prevents gcode parsing,['gcode.c']
Simen Svale Skogsrud,2011-02-10,"corrections in planner, including speed estimation",['stepper_plan.c']
Simen Svale Skogsrud,2011-02-10,minor tweak eliminates 'ok' message after errors,"['console,serial_protocol.c']"
Simen Svale Skogsrud,2011-02-10,eliminated som debug code,['stepper.c']
Simen Svale Skogsrud,2011-02-10,eliminated some more debug code,['main.c']
Simen Svale Skogsrud,2011-02-10,corrected speed calculation in planner (untested on hardware),"['stepper.c,stepper_plan.c']"
Simen Svale Skogsrud,2011-02-11,refactored stepper_plan -> planner (untested),"['Makefile,main.c,motion_control.c,planner.c,planner.h,stepper.c,stepper.h']"
Simen Svale Skogsrud,2011-02-11,smoothed a wrinkle,['motion_control.c']
Simen Svale Skogsrud,2011-02-11,formatting + moved current position getter to planner,"['motion_control.c,planner.c,planner.h,stepper.c,stepper.h']"
Simen Svale Skogsrud,2011-02-11,eliminated the mc_line-method and replaced it with a macro forwarding calls directly to the planner (untested),"['motion_control.c,motion_control.h']"
Simen Svale Skogsrud,2011-02-11,formatting,['motion_control.h']
Simen Svale Skogsrud,2011-02-11,"added a line to disable baud doubling, but commented out for the time being until I can test it on real hardware",['wiring_serial.c']
Simen Svale Skogsrud,2011-02-11,makes sure steppers cruise at exactly nominal rate to eliminate rounding errors. Possibly fixes the problem where some moves have a long tail of slow steps. (Untested),"['planner.c,stepper.c']"
Simen Svale Skogsrud,2011-02-11,added one line to disable baud doubling on Uno,['wiring_serial.c']
Simen Svale Skogsrud,2011-02-11,eliminated an abstraction violation where motion_control needed position information from the planner (untested),"['gcode.c,motion_control.c,motion_control.h,planner.c,planner.h']"
Simen Svale Skogsrud,2011-02-11,corrected the handling of status codes so that 'ok' will not be default response in the event of an undefined error code (untested),['serial_protocol.c']
Simen Svale Skogsrud,2011-02-11,syntax tweak,['gcode.c']
Simen Svale Skogsrud,2011-02-11,slimmed down nuts_bolts,"['nuts_bolts.h,planner.c,stepper.c']"
Simen Svale Skogsrud,2011-02-11,added som documentation for other contributors,"['resources.txt,structure.txt']"
Simen Svale Skogsrud,2011-02-12,"cleanup, protected some more module variables as static","['main.c,motion_control.c,motion_control.h,planner.c,planner.h,stepper.c']"
Simen Svale Skogsrud,2011-02-16,"possible improvement on the long, slow tail problem",['planner.c']
Simen Svale Skogsrud,2011-02-16,a new (slightly inelegant) stab at eliminating the slow tail problem,"['planner.c,planner.h,trapezoid_simulator.rb,stepper.c']"
Simen Svale Skogsrud,2011-02-17,increased default acceleration ticks per second,['config.h']
Simen Svale Skogsrud,2011-02-17,gcode streaming works,"['stream.rb,serial_protocol.c']"
Simen Svale Skogsrud,2011-02-17,added informative error message for people building 0.6 for atmega168 (impossible),['main.c']
Simen Svale Skogsrud,2011-02-17,updated readme with info for users of 168's,['readme.textile']
Simen Svale Skogsrud,2011-02-17,added another note for existing users,['readme.textile']
Simen Svale Skogsrud,2011-02-17,cleaned up settings.h,"['settings.c,settings.h']"
Simen Svale Skogsrud,2011-02-17,improved some defaults,['settings.c']
Simen Svale Skogsrud,2011-02-17,clamped safe speed to 100% of nominal speed. Fixes a problem that might have spelled trouble at very low feed rates,['planner.c']
Simen Svale Skogsrud,2011-02-17,removed inline-keywords because gcc ignores them anyway,"['gcode.c,planner.c,planner.h,stepper.c']"
Simen Svale Skogsrud,2011-02-18,circle buffers now power of two size and indicies are unsigned to help gcc make a few nice optimizations,"['planner.c,wiring_serial.c']"
Simen Svale Skogsrud,2011-02-18,renamed serial_protocol -> protocol,"['Makefile,gcode.c,main.c,protocol.c,protocol.h']"
Simen Svale Skogsrud,2011-02-18,renamed protocol methods to reflect the new module name,"['structure.txt,main.c,protocol.c,protocol.h']"
Simen Svale Skogsrud,2011-02-18,refactored handling of settings '$' command out of gcode module and into settings module,"['Makefile,gcode.c,gcode.h,nuts_bolts.c,nuts_bolts.h,protocol.c,protocol.h,settings.c,settings.h']"
Simen Svale Skogsrud,2011-02-18,lowercased boolean constants,"['gcode.c,motion_control.c,nuts_bolts.h,planner.c,settings.c,stepper.c']"
Simen Svale Skogsrud,2011-02-18,cleaned up handling of number parsing in settings_execute_command,"['nuts_bolts.c,nuts_bolts.h,settings.c']"
Simen Svale Skogsrud,2011-02-19,formatting,"['planner-maths.txt,structure.txt,motion_control.h,planner.c,planner.h']"
Simen Svale Skogsrud,2011-02-19,spindle operations are now synchronized,['spindle_control.c']
Simen Svale Skogsrud,2011-02-19,made most internal function static to allow gcc to inline them,"['gcode.c,planner.c,protocol.c,stepper.c']"
Simen Svale Skogsrud,2011-02-20,added support for limit switches and homing action,"['Makefile,config.h,gcode.c,limits.c,limits.h,main.c,nuts_bolts.h,planner.c,planner.h,stepper.c,stepper.h']"
Simen Svale Skogsrud,2011-02-20,acceleration-Grbl now works with atmega 168 by disabling arc motion,"['gcode.c,main.c,motion_control.c,motion_control.h,planner.c,wiring_serial.c']"
Simen Svale Skogsrud,2011-02-20,acceleration-Grbl now works with atmega 168 by disabling arc motion,"['gcode.c,main.c,motion_control.c,motion_control.h,planner.c,wiring_serial.c']"
Simen Svale Skogsrud,2011-02-21,stepper enable pin now toggles to reflect the active/passive state of the stepper subsystem,['stepper.c']
Simen Svale Skogsrud,2011-02-21,added support for G92,['gcode.c']
Simen Svale Skogsrud,2011-02-21,result of G92 also affects planner,"['gcode.c,motion_control.h,planner.c']"
Simen Svale Skogsrud,2011-02-23,fixed a double rounding error compensation bug in mc_arc thanks to Etienne Chové,['motion_control.c']
Simen Svale Skogsrud,2011-02-24,added missing line from G92 patch,['gcode.c']
Simen Svale Skogsrud,2011-02-24,"fixed linebreaks, was LFCR, is CRLF",['protocol.c']
Simen Svale Skogsrud,2011-02-25,fixed synchronization problem with spindle_control,['spindle_control.c']
Simen Svale Skogsrud,2011-02-25,foolproofed steps/mm setting (must be > 0),['settings.c']
Simen Svale Skogsrud,2011-02-25,spindle could not be stopped. Thanks again to Etienne for reporting,['spindle_control.c']
Simen Svale Skogsrud,2011-02-25,simplification in gcode.c also thanks to etienne,['gcode.c']
Simen Svale Skogsrud,2011-05-31,converted the STEPPER_ENABLE_PIN to a STEPPER_DISABLE_PIN as per the request of Alden Hart of Grbl Shield fame.,"['config.h,main.c,stepper.c']"
Simen Svale Skogsrud,2011-05-31,made inverted stepper driving the default as per the request of the Grbl Shield team and frankly myself. Who doesn't need their stepper signals inverted anyway?,['settings.c']
Simen Svale Skogsrud,2011-05-31,added a fix for division by zero errors that would occur on very low feed rates (thanks to Arthur Wolf for hardcore investigation),['planner.c']
Simen Svale Skogsrud,2011-05-31,added asynchronous write as provided by Arthur Wolf,['wiring_serial.c']
Simen Svale Skogsrud,2011-05-31,renamed wiring_serial to serial to reflect its complete remake,"['Makefile,structure.txt,main.c,motion_control.c,planner.c,protocol.c,protocol.h,serial.c,serial.h,settings.c,stepper.c']"
Simen Svale Skogsrud,2011-06-01,"changed serialAvailable to serialAnyAvailable which does not calculate the number of bytes, only if there are any at all","['serial.c,serial.h']"
Simen Svale Skogsrud,2011-06-01,"cleaned up data types in serial module, all data now uint8_t","['serial.c,serial.h']"
Simen Svale Skogsrud,2011-06-03,cleaned up serial completing support for non blocking tx and refactoring formatting functions into a new module 'print',"['Makefile,resources.txt,structure.txt,main.c,motion_control.c,planner.c,print.c,print.h,protocol.c,serial.c,serial.h,settings.c,stepper.c']"
Simen Svale Skogsrud,2011-06-03,changed file headers to reflect the totally refactored state of the serial and print modules,"['print.c,print.h,serial.c,serial.h']"
Simen Svale Skogsrud,2011-06-03,pruned some undefined declarations from the print module,['print.h']
Simen Svale Skogsrud,2011-06-03,pruned extraneous comment,['serial.c']
Simen Svale Skogsrud,2011-06-03,cleaned up function definitions for serial and print modules and added a comment about the deeply flawed printFloat method,"['print.c,print.h,serial.h']"
Simen Svale Skogsrud,2011-06-03,flossed the serial module,['serial.c']
Simen Svale Skogsrud,2011-06-03,refactored a complex comment,['serial.c']
Simen Svale Skogsrud,2011-06-03,refactored printIntegerInBase to work without a buffer + minor cleanup,"['print.c,protocol.c,serial.c,serial.h']"
Simen Svale Skogsrud,2011-06-03,a new printFloat that probably works,['print.c']
Simen Svale Skogsrud,2011-06-03,NOW printFloat probably works,['print.c']
Simen Svale Skogsrud,2011-06-04,undid changes to printIntegerInBase that resulted in the integers being printed in reverse...,['print.c']
Simen Svale Skogsrud,2011-06-05,Fixed serial.c after tests on real hardware,"['main.c,serial.c']"
Simen Svale Skogsrud,2011-06-05,changed default fp decimal places to 3,['print.c']
Simen Svale Skogsrud,2011-06-05,updated readme to reflect real state of 168-compatibility,['readme.textile']
Simen Svale Skogsrud,2011-06-05,fixed a bug where the default step mask would not actually reflect the real pin out,['settings.c']
Simen Svale Skogsrud,2011-06-06,avoid line buffer overflow,['protocol.c']
Simen Svale Skogsrud,2011-06-06,need to bump the version number because of the serial refactoring,['settings.h']
jvangrin,2011-07-04,fixed null pointer dereference in planner_forward_pass_kernel,['planner.c']
jvangrin,2011-07-04,fix sign of fractional part in printFloat,['wiring_serial.c']
jvangrin,2011-07-05,Reset the overflow flag to stop a queued overflow interrupt from resetting the step pulse right after sei() is called,['stepper.c']
jvangrin,2011-07-05,Make sure we don't accelerate above the nominal_rate,['stepper.c']
Simen Svale Skogsrud,2011-07-09,corrected an outdated comment,['planner.c']
Simen Svale Skogsrud,2011-07-10,"Merge pull request #32 from jv4779/master

minor grbl code issues",['']
Simen Svale Skogsrud,2011-07-10,fixed a nil dereferencing bug in planner_forward_pass_kernel thanks to jv4779,['planner.c']
Brian Boucheron,2011-07-17,added error message for step pulses < 3 microseconds,['settings.c']
Simen Svale Skogsrud,2011-07-19,"Merge pull request #34 from beardicus/pulse_error_msg

Step Pulse Error Message thanks to beardicus.",['']
Simen Svale Skogsrud,2011-08-02,reordered a couple of functions for consistency,['planner.c']
chamnit,2011-08-15,"Moved comment and block delete handling to be done in protocol.c rather than gcode.c. Prevents these from being held in memory. Also, fixes bug when comments and block delete character are mixed with g-code.",['protocol.c']
chamnit,2011-08-15,Removed comment and block delete handling from gcode.c. Parser expects clean gcode.,['gcode.c']
Sonny J,2011-08-15,Revert fdc90f1821f1f5edb7756fcddce75b4b4fbf6bbf^..HEAD,['gcode.c']
Sonny J,2011-08-15,"Revert ""Moved comment and block delete handling to be done in protocol.c rather than gcode.c. Prevents these from being held in memory. Also, fixes bug when comments and block delete character are mixed with g-code.""

This reverts commit ea5b8942db2616e93fc0478922010c3bab7c0481.",['protocol.c']
Sonny J,2011-08-15,Revert 517a0f659a06182c89cafe27ee371edccad777a4^..HEAD,['planner.c']
Sonny J,2011-08-15,"Moved comment and block delete handling into protocol.c from gcode.c. Fixes bug when comment and block delete are not isolated. Blank lines ignored.

Comments, block delete characters, and blank lines are no longer passed
to the gcode parser and should free up some memory by ignoring these
characters. Gcode parser now expects clean gcode only. There was a bug
if there were block deletes or comments not in the first character (i.e.
spindle on/off for proofing geode without turning it on, or a NXX
followed by a comment). This should fix it by bypassing the problem.
Left a commented line for easily turning on and off block deletes for a
later feature, if desired.","['gcode.c,protocol.c']"
Sonny J,2011-08-15,Revert ea5b8942db2616e93fc0478922010c3bab7c0481^..HEAD,"['gcode.c,planner.c,protocol.c']"
Sonny J,2011-08-15,"Moved comment and block delete handling into protocol.c from gcode.c. Fixes bug when comment and block delete are not isolated. Blank lines ignored.

Comments, block delete characters, and blank lines are no longer passed
to the gcode parser and should free up some memory by ignoring these
characters. Gcode parser now expects clean gcode only. There was a bug
if there were block deletes or comments not in the first character (i.e.
spindle on/off for proofing geode without turning it on, or a NXX
followed by a comment). This should fix it by bypassing the problem.
Left a commented line for easily turning on and off block deletes for a
later feature, if desired.","['gcode.c,protocol.c']"
Sonny J,2011-09-03,"Significantly improved junction control and fixed computation bugs in planner

- Junction jerk now re-defined as junction_deviation. The distance from
the junction to the edge of a circle tangent to both previous and
current path lines. The circle radii is used to compute the maximum
junction velocity by centripetal acceleration. More robust and
simplified way to compute jerk.   - Fixed bugs related to entry and exit
factors. They were computed based on the current nominal speeds but not
when computing exit factors for neighboring blocks. Removed factors and
replaced with entry speeds only. Factors now only computed for stepper
trapezoid rate conversions.  - Misc: Added min(), next_block_index,
prev_block_index functions for clarity.","['nuts_bolts.h,planner.c,planner.h,settings.c,settings.h']"
Sonny J,2011-09-03,"Add G02/03 arc conversion/pre-processor script and example streaming script

Beta pre-processor script used to clean and streamline g-code for
streaming and converts G02/03 arcs into linear segments. Allows for full
acceleration support if the pre-processed g-code is then streamed to
grill, sans G02/03 arcs. Added a simple example streaming script for
Python users.","['grbl_preprocess.py,simple_stream.py']"
Sonny J,2011-09-03,Minor bug fixes in planner.,['planner.c']
Sonny J,2011-09-04,"More minor bug fixes in planner.

Reverse planner was over-writing the initial/buffer tail entry speed,
which reset the forward planner and caused it to lose track of its
speed. Should now accelerate into short linear segments much nicer now.",['planner.c']
Sonny J,2011-09-04,"Minor update for memory savings in ring buffer and fleshed out commenting.

No changes in functionality. Path vectors moved from ring buffer to
local planner static variables to save 3*(BUFFER_SIZE - 1) doubles in
memory. Detailed comments. Really need to stop micro-updating. Should be
the last until a planner optimization (ala Jens Geisler) has been
completed.","['nuts_bolts.h,planner.c,planner.h']"
Sonny J,2011-09-06,"Optimized planner re-write. Significantly faster. Full arc support enabled by rotation matrix approach.

- Significant improvements in the planner. Removed or reordered
repetitive and expensive calculations by order of importance:
recalculating unchanged blocks, trig functions [sin(), cos(), tan()],
sqrt(), divides, and multiplications. Blocks long enough for nominal
speed to be guaranteed to be reached ignored by planner. Done by
introducing two uint8_t flags per block. Reduced computational overhead
by an order of magnitude.   - Arc motion generation completely
re-written and optimized. Now runs with acceleration planner. Removed
all but one trig function (atan2) from initialization. Streamlined
computations. Segment target locations generated by vector
transformation and small angle approximation. Arc path correction
implemented for accumulated error of approximation and single precision
calculation of Arduino. Bug fix in message passing.","['gcode.c,motion_control.c,motion_control.h,nuts_bolts.h,planner.c,planner.h,protocol.c,grbl_preprocess.py,settings.c,settings.h']"
Sonny J,2011-09-13,"Further planner improvements and misc minor bug fixes. Memory savings and increased buffer size.

- Update grbl version and settings version to automatically reset
eeprom. FYI, this will reset your grbl settings. - Saved
3*BLOCK_BUFFER_SIZE doubles in static memory by removing obsolete
variables: speed_x, speed_y, and speed_z. - Increased buffer size
conservatively to 18 from 16. (Probably can do 20). - Removed expensive!
modulo operator from block indexing function. Reduces significant
computational overhead. - Re-organized some sqrt() calls to be more
efficient during time critical planning cases, rather than non-time
critical. - Minor bug fix in planner max junction velocity logic. -
Simplified arc logic and removed need to multiply for CW or CCW
direction.","['gcode.c,motion_control.c,motion_control.h,nuts_bolts.h,planner.c,planner.h,protocol.c,grbl_preprocess.py,settings.c,settings.h']"
Sonny J,2011-09-15,"More '%' modulo opertor removals and some housecleaning.

- Serial functions contained quite a few modulo operations that would
be executed with high frequency when streaming. AVR processors are very
slow when operating these. In one test on the Arduino forums, it showed
about a 15x slow down compared to a simple if-then statement. -
Clarified some variable names and types and comments.","['gcode.c,motion_control.c,motion_control.h,serial.c,settings.c']"
Sonny J,2011-09-18,"Fixed minor bugs in planner. Increased max dwell time. Long slope bug stop-gap solution note.

- Fixed the planner TODO regarding minimum nominal speeds. Re-arranged
calculations to be both more efficient and guaranteed to be greater
than zero. - Missed a parenthesis location on the rate_delta
calculation. Should fix a nearly in-perceptible issue with incorrect
acceleration ramping in diagonal directions. - Increased maximum dwell
time from 6.5sec to an 18hour max. A crazy amount more, but that's how
the math works out. - Converted the internal feedrate values to mm/min
only, as it was switching between mm/min to mm/sec and back to mm/min.
Also added a feedrate > 0 check in gcode.c. - Identified the long slope
at the end of rapid de/ac-celerations noted by stephanix. Problem with
the numerical integration truncation error between the exact solution
of estimate_acceleration_distance and how grbl actually performs the
acceleration ramps discretely. Increasing the
ACCELERATION_TICKS_PER_SECOND in config.h helps fix this problem.
Investigating further.","['config.h,gcode.c,motion_control.c,motion_control.h,planner.c']"
Sonny Jeon,2011-09-24,"Fixed long slope at deceleration issue. Moved things into config.h. New MINIMUM_PLANNER_SPEED parameter.

- The long standing issue of a long slope at deceleration is likely
fixed. The stepper program was not tracking and timing the end of
acceleration and start of deceleration exactly and now is fixed to
start and stop on time. Also, to ensure a better acceleration curve fit
used by the planner, the stepper program delays the start of the
accelerations by a half trapezoid tick to employ the midpoint rule. -
Settings version 3 migration (not fully tested, but should work) -
Added a MINIMUM_PLANNER_SPEED user-defined parameter to planner to let
a user change this if problems arise for some reason. - Moved all
user-definable #define parameters into config.h with clear comments on
what they do and recommendations of how to change them. - Minor
housekeeping.","['config.h,gcode.c,motion_control.c,planner.c,settings.c,stepper.c']"
Sonny Jeon,2011-09-25,"Updated some comments and fixed a bug in the new stepper logic.

- The stepper logic was not initiating the decelerations for certain
cases. Just re-arranged the logic to fix it.",['stepper.c']
Sonny Jeon,2011-09-29,"Added complete stop delay at the end of all motion. Moved grbl preprocessor script into a new repository.

Added a very short (25 ms) user-definable delay before the steppers are
disabled at the motors are disabled and grbl goes idle. This ensures
any residual inertia at the end of the last motion does not cause the
axes to drift and grbl to lose its position when manually entering
g-code or when performing a tool change and starting the next
operation.","['config.h,grbl_preprocess.py,stepper.c']"
Sonny Jeon,2011-10-06,"Minor update to further eliminate the ole long slope deceleration issue. New update note!

- Added another way to further ensure the long slope deceleration issue
is eliminated. If the stepper rate change is too great near zero, the
stepper rate is adjusted at half increments to the end of travel,
creating a smooth transition. - If the new STEPPER_IDLE_LOCK_TIME is
set as zero, this delay is not compiled at compile-time. - NOTE: The
next update is likely going to be major, involving a full re-write of
the stepper.c program to integrate a simple way to apply pauses,
jogging, e-stop, and feedrate overrides. The interface should be
flexible enough to be easily modified for use with either hardware
switches or software commands. Coming soon.","['config.h,stepper.c']"
Sonny Jeon,2011-10-07,Forgot something! Comments on what the last change does.,['stepper.c']
Sonny Jeon,2011-10-11,"Third time's a charm! No more deceleration issues! Updated grbl version and settings. General cleanup.

- Fleshed out the original idea to completely remove the long slope at
the end of deceleration issue. This third time should absolutely
eliminate it.
- Changed the acceleration setting to kept as mm/min^2 internally,
since this was creating unneccessary additional computation in the
planner. Human readable value kept at mm/sec^2.
- Updated grbl version 0.7d and settings version to 4. NOTE: Please
check settings after update. These may have changed, but shouldn't.
- Before updating the new features (pause, e-stop, federate override,
etc), the edge branch will soon be merged with the master, barring any
immediate issues that people may have, and the edge branch will be the
testing ground for the new grbl version 0.8.","['config.h,gcode.c,motion_control.c,motion_control_new.c,planner.c,planner.h,settings.c,settings.h,stepper.c,stepper.h']"
Sonny Jeon,2011-10-11,Delete a new work file shouldn't have been synced.,['motion_control_new.c']
Sonny Jeon,2011-11-11,Corrected clearing of target and position variable for the go home routine. Thanks Jens!,['gcode.c']
Sonny Jeon,2011-11-19,Re-ordered stepper idle function to first disable interrupt.,['stepper.c']
Sonny Jeon,2011-11-19,Updated README and reordered branch versions.,"['readme.textile,stepper.c']"
Sonny Jeon,2011-12-08,"Initial v0.8 ALPHA commit. Features multi-tasking run-time command execution (feed hold, cycle start, reset, status query). Extensive re-structuring of code for future features.

- ALPHA status. - Multitasking ability with run-time command executions
for real-time control and feedback. - Decelerating feed hold and resume
during operation. - System abort/reset, which immediately kills all
movement and re-initializes grbl. - Re-structured grbl to easily allow
for new features: Status reporting, jogging, backlash compensation. (To
be completed in the following releases.) - Resized TX/RX serial buffers
(32/128 bytes) - Increased planner buffer size to 20 blocks. - Updated
documentation.","['config.h,commands.txt,planner-maths.txt,structure.txt,gcode.c,limits.c,main.c,motion_control.c,motion_control.h,nuts_bolts.c,nuts_bolts.h,planner.c,planner.h,protocol.c,protocol.h,readme.textile,serial.c,serial.h,settings.c,settings.h,spindle_control.c,stepper.c,stepper.h']"
Sonny Jeon,2011-12-10,"Various minor updates and variable definition corrections. Removed deprecated acceleration manager.

- Removed deprecated acceleration manager (non-functional since v0.7b)
- Updated variable types and function headers. - Updated stepper
interrupt to ISR() from SIGNAL()+sei(). - General code cleanup.","['main.c,motion_control.c,nuts_bolts.c,nuts_bolts.h,planner.c,planner.h,protocol.c,protocol.h,serial.c,stepper.c']"
Sonny Jeon,2012-01-06,"Position reporting, refactored system variables, serial print fixes, updated streaming scripts.

- Added machine position reporting to status queries. This will be
further developed with part positioning/offsets and maintaining
location upon reset.

- System variables refactored into a global struct for better
readability.

- Removed old obsolete Ruby streaming scripts. These were no longer
compatible. Updated Python streaming scripts.

- Fixed printFloat() and other printing functions.

- Decreased planner buffer back to 18 blocks and increased TX serial
buffer to 64 bytes. Need the memory space for future developments.

- Begun adding run-time modes to grbl, where block delete toggle, mm/in
reporting modes, jog modes, etc can be set during runtime. Will be
fleshed out and placed into EEPROM when everything is added.","['config.h,gcode.c,main.c,motion_control.c,nuts_bolts.h,planner.c,planner.h,print.c,print.h,protocol.c,console,proxy,stream,stream.rb,trapezoid_simulator.rb,simple_stream.py,stream.py,serial.c,settings.c,settings.h,stepper.c']"
Sonny Jeon,2012-01-09,Updated line in streaming script.,['stream.py']
Sonny Jeon,2012-01-09,Corrected a minor streaming script character counting bug.,['stream.py']
Sonny Jeon,2012-01-10,"Extended position reporting with both home and work coordinates. Home position now retained after reset. Other minor changes/fixes.

- Grbl now tracks both home and work (G92) coordinate systems and does
live updates when G92 is called.
- Rudimentary home and work position status reporting. Works but still
under major construction.
- Updated the main streaming script. Has a disabled periodic timer for
querying status reports, disabled only because the Python timer doesn't
consistently restart after the script exits. Add here only for user
testing.
- Fixed a bug to prevent an endless serial_write loop during status
reports.
- Refactored the planner variables to make it more clear what they are
and make it easier for clear them.","['limits.c,main.c,motion_control.c,nuts_bolts.h,planner.c,protocol.c,stream.py,serial.c,stepper.c']"
Sonny Jeon,2012-01-15,"Fix bug with premature step end. Refactored _delay_ms() and square() for better portability.

- Fixed a premature step end bug dating back to Simen's 0.7b edge
version is fixed, from which this code is forked from. Caused by Timer2
constantly overflowing calling the Step Reset Interrupt every 128usec.
Now Timer2 is always disabled after a step end and should free up some
cycles for the main program. Could be more than one way to fix this
problem. I'm open to suggestions.

- _delay_ms() refactored to accept only constants to comply with
current compilers. square() removed since not available with some
compilers.","['config.h,main.c,motion_control.c,nuts_bolts.c,nuts_bolts.h,planner.c,stream.py,stepper.c']"
Sonny Jeon,2012-01-15,"Propagated premature step end bug fix from the edge branch. Updated printFloat() function.

- Will not be uploading a hex build of this, unless asked.","['print.c,stepper.c']"
Sonny Jeon,2012-01-17,"Merge pull request #39 from chamnit/edge

Merging chamnit/grbl edge v0.8a to grbl/grbl edge",['']
Sonny Jeon,2012-01-17,Update readme.textile,['readme.textile']
Sonny Jeon,2012-01-17,Merge chamnit/v0_7 with grbl/master,"['Makefile,config.h,planner-maths.txt,resources.txt,structure.txt,gcode.c,gcode.h,limits.c,limits.h,main.c,motion_control.c,motion_control.h,nuts_bolts.c,nuts_bolts.h,planner.c,planner.h,print.c,print.h,protocol.c,protocol.h,readme.textile,simple_stream.py,serial.c,serial.h,serial_protocol.c,settings.c,settings.h,spindle_control.c,stepper.c,stepper.h,wiring_serial.c,wiring_serial.h']"
Sonny Jeon,2012-01-17,"Merge pull request #47 from chamnit/v0_7

Merging chamnit/v0_7 to grbl/master",['']
Sonny Jeon,2012-01-17,Update readme.textile,['readme.textile']
Sonny Jeon,2012-01-27,"Updated streaming scripts. Compiler compatibility for _delay_ms().

- Moved obsolete streaming scripts to folder for reference.

- Added a more complex Python streaming script which uses the serial
buffer as an additional streaming buffer.

- Removed all references to a _delay_ms(variable) to allow for better
porting across different compilers.","['motion_control.c,nuts_bolts.c,nuts_bolts.h,console,proxy,stream,stream.rb,trapezoid_simulator.rb,simple_stream.py,stream.py']"
Sonny Jeon,2012-01-27,Streaming script argparse bugfix.,['stream.py']
Sonny Jeon,2012-01-28,"Program stop support (M0,M1*,M2,M30*), proper position retainment upon reset, misc minor updates.

- Program stop support (M0,M1*,M2,M30*). *Optional stop to be done.
*Pallet shuttle not supported.

- Work position is set equal to machine position upon reset, as
according to NIST RS274-NGC guidelines. G92 is disabled.

- Renamed mc_set_current_position() to mc_set_coordinate_offset().

- Fixed bug in plan_synchronize(). Would exit right before last step is
finished and caused issues with program stops. Now fixed.

- Spindle now stops upon a run-time abort command.

- Updated readme and misc upkeeping.","['config.h,gcode.c,gcode.h,main.c,motion_control.c,motion_control.h,nuts_bolts.c,nuts_bolts.h,planner.c,planner.h,print.c,print.h,protocol.c,protocol.h,readme.textile,serial.c,stepper.c']"
Sonny Jeon,2012-01-31,"printFloat rounding fix. Affected settings. Recommend using new build.

printFloat was printing incorrectly and adding a value of 5 to every
float instead of 0.0005 when rounding to 3 decimal places. The printed
settings values do not accurately portray the actual stored value.
Recommend using newly posted build.",['print.c']
Sonny Jeon,2012-02-11,"G54 work coordinate support (w/ G10,G92.1). Re-factored g-code parser with error checking. Minor compiler compatibility changes.

- G54 work coordinate system support. Up to 6 work coordinate systems
(G54-G59) available as a compile-time option.

- G10 command added to set work coordinate offsets from machine
position.

- G92/G92.1 position offsets and cancellation support. Properly follows
NIST standard rules with other systems.

- G53 absolute override now works correctly with new coordinate systems.

- Revamped g-code parser with robust error checking. Providing user
feedback with bad commands. Follows NIST standards.

- Planner module slightly changed to only expected position movements
in terms of machine coordinates only. This was to simplify coordinate
system handling, which is done solely by the g-code parser.

- Upon grbl system abort, machine position and work positions are
retained, while G92 offsets are reset per NIST standards.

- Compiler compatibility update for _delay_us().

- Updated README.","['config.h,gcode.c,gcode.h,limits.c,main.c,motion_control.h,nuts_bolts.c,nuts_bolts.h,planner.c,planner.h,protocol.c,protocol.h,readme.textile,serial.h,spindle_control.c']"
Sonny Jeon,2012-02-11,Minor compiler compatibility update for _delay_us().,"['limits.c,nuts_bolts.c,nuts_bolts.h']"
Sonny Jeon,2012-02-11,Fix to enable spindle DDR ports.,['spindle_control.c']
Sonny Jeon,2012-02-12,Spindle DDR pins init minor fix.,"['spindle_control.c,stepper.c,stepper.h']"
Sonny Jeon,2012-02-25,"Minor include related compile fix. Added experimental XON/XOFF flow control. Not officially supported!

- A latency issue related to USB-to-serial converters on the Arduino
does not allow for XON/XOFF flow control to work correctly on standard
terminal programs. It seems that only specialized UI's or avoiding the
USB port all together solves this problem. However, XON/XOFF flow
control is added for advanced users only as a compile-time option. This
feature is officially *NOT* supported by grbl, but let us know of any
successes with it!","['config.h,nuts_bolts.h,serial.c']"
Sonny Jeon,2012-03-05,"Minor updates.

- Updated makefile to be more universally compatible by not requiring
grep or ruby.

- Edited XON/XOFF flow control usage, noting that FTDI-based Arduinos
are known to work, but not Atmega8U2-based Arduino. Still officially
not supported, but added for advanced users.

- Minor edits.","['Makefile,config.h,gcode.c,limits.c,serial.c']"
Sonny Jeon,2012-03-10,"Minor fix related to spindle_stop() crashing abort in certain cases.

- Updated spindle_stop() to fix abort bug and to be more in line with
v0.8.","['config.h,gcode.c,main.c,serial.c,spindle_control.c']"
Sonny Jeon,2012-06-26,"Added step pulse delay after direction set (Compile-time option only). Updated read me.

Added a compile-time only experimental feature that creates a
user-specified time delay between a step pulse and a direction pin set
(in config.h). This is for users with hardware-specific issues
(opto-couplers) that need more than a few microseconds between events,
which can lead to slowly progressing step drift after many many
direction changes. We suggest to try the hack/fix posted in the Wiki
before using this, as this experimental feature may cause Grbl to take
a performance hit at high step rates and about complex curves.","['config.h,readme.textile,stepper.c']"
Sonny Jeon,2012-06-27,No changes. Github commit bug.,"['COPYING,Makefile,commands.txt,resources.txt,structure.txt,eeprom.h,gcode.c,gcode.h,limits.c,limits.h,main.c,motion_control.c,motion_control.h,nuts_bolts.c,nuts_bolts.h,planner.c,planner.h,print.c,print.h,protocol.c,protocol.h,stream.rb,trapezoid_simulator.rb,serial.c,serial.h,settings.c,settings.h,spindle_control.c,spindle_control.h,stepper.h']"
Sonny Jeon,2012-09-19,"M30 minor bug fix.

Order of operations was off. Now works as intended,",['gcode.c']
Elijah Insua,2012-09-21,"Add support for overriding DEVICE and PROGRAMMER

By setting environment variables.

example: PROGRAMMER=-c arduino -P /dev/tty.usbmodemfa131 make flash",['Makefile']
Sonny Jeon,2012-09-21,"Merge pull request #120 from tmpvar/configurable-makefile

Add support for overriding DEVICE and PROGRAMMER",['']
Sonny Jeon,2012-09-21,"Added coolant control (M7*, M8, M9). Mist control can be enabled via config.h.

- Added coolant control! Flood control (M8) functions on analog pin 0.
Mist control (M7) is compile-time optional and is on analog pin 1. (Use
only if you have multiple coolants on your system). Based on work by
@openpnp.

- Fixed some variable assignments in spindle control.","['Makefile,config.h,coolant_control.c,coolant_control.h,gcode.c,main.c,spindle_control.c,spindle_control.h']"
Sonny Jeon,2012-09-21,Minor prescalar optimization. Changed up some defines.,"['config.h,coolant_control.c,gcode.c,stepper.c']"
Sonny Jeon,2012-09-30,"Updated limit/homing routine. Works, but needs more TLC.

- Added acceleration to the homing routine.

- Homing now accounts for different step rates when moving multiple
axes without exceeding acceleration limits.

- Homing now updates all internal positioning variables to machine zero
after completion.

- ""Poor-man's"" debounce delay added.

- Updated the delay_us() function to perform faster and more accurate
microsecond delays. Previously, the single increments would add
noticeable time drift for larger delays.

- Fix a bug in the stepper.c prescalar calculations that was changed in
the last commit.

- Other minor fixes.","['config.h,gcode.c,gcode.h,limits.c,motion_control.c,nuts_bolts.c,planner.c,planner.h,serial.c,stepper.c']"
Sonny Jeon,2012-10-08,"Limit pin internal pull-resistors enabled. Re-wrote read_double() function. Correctly changed all 'double's to 'float's.

- Limit pin internal pull-resistors now enabled. Normal high operation.
This will be the standard going forward.

- Updated all of the 'double' variable types to 'float' to reflect what
happens when compiled for the Arduino. Also done for compatibility
reasons to @jgeisler0303 's Grbl simulator code.

- G-code parser will now ignore 'E' exponent values, since they are
reserved g-code characters for some machines. Thanks @csdexter!

- The read_double() function was re-written and optimized for use in
Grbl. The strtod() avr lib was removed.","['config.h,gcode.c,limits.c,main.c,motion_control.c,motion_control.h,nuts_bolts.c,nuts_bolts.h,planner.c,planner.h,print.c,print.h,protocol.c,settings.c,settings.h,stepper.c']"
Sonny Jeon,2012-10-08,Updated version number to v0.8b to reflect changes.,['settings.h']
Sonny Jeon,2012-10-08,Fixed an issue with leaving the limit switches during a homing cycle.,['limits.c']
Sonny Jeon,2012-10-09,"Improved homing cycle. New settings: homing enable/rates, debounce and step idle lock time.

- Homing cycle will now cycle twice (spec more/less in config) to
improve repeatability and accuracy by decreasing overshoot.

- New Grbl settings added: Enable/disable homing cycles, homing seek
and feed rates, switch debounce delay, and stepper idle lock time.

- Please note that these settings may change upon the next push, since
there will be more added soon. Grbl *should* not re-write your old
settings, just re-write the new ones. So, make sure you keep these
written down somewhere in case they get lost from a code bug.

- Refactored settings migration to be a little smaller and managable
going forward.","['config.h,gcode.c,limits.c,protocol.c,protocol.h,settings.c,settings.h,stepper.c']"
Sonny Jeon,2012-10-10,Homing direction pin bits fixed. Lite refactoring of settings.,"['limits.c,settings.c,settings.h']"
Sonny Jeon,2012-10-11,Homing stepper enable bit fix.,"['limits.c,print.c']"
Sonny Jeon,2012-10-11,"(2x) speed increase in printFloat() function. Decimal places setting added.

- printFloat() function execution doubled in speed. This is a precursor
to status reporting, since GUIs may query real-time position rapidly.

- Decimal places added to settings (for now). This may disappear in
future pushes, but here for testing purposes.","['print.c,settings.c,settings.h']"
Sonny Jeon,2012-10-12,Updated delay_us() function to accept long integers,"['config.h,nuts_bolts.c,nuts_bolts.h']"
Sonny Jeon,2012-10-13,"Minor updates, improvements, and bug fixes.

- Allowed status_message function to be called by others. This is to
centralize all feedback into protocol.c.

- Fixed a bug where line number words 'N' were causing the parser to
error out.

- Allowed homing routine feed rates to move slower than the
MINIMUM_STEP_RATE parameter in config.h.

- Homing performs idle lock at the end of the routine.

- Stepper idle lock time will now not disable the steppers when the
value is set at 255. This is accomodate users who prefer to keep their
axes enabled at all times.

- Moved some defines around to where they need to be.","['gcode.c,limits.c,limits.h,planner.c,protocol.c,protocol.h,settings.c,settings.h,stepper.c,stepper.h']"
Sonny Jeon,2012-10-16,"Hard limits, homing direction, pull-off limits after homing, status reports in mm or inches, system alarm, and more.

- Thank you statement added for Alden Hart of Synthetos.

- Hard limits option added, which also works with homing by pulling off
the switches to help prevent unintended triggering. Hard limits use a
interrupt to sense a falling edge pin change and immediately go into
alarm mode, which stops everything and forces the user to issue a reset
(Ctrl-x) or reboot.

- Auto cycle start now a configuration option.

- Alarm mode: A new method to kill all Grbl processes in the event of
something catastrophic or potentially catastropic. Just works with hard
limits for now, but will be expanded to include g-code errors (most
likely) and other events.

- Updated status reports to be configurable in inches or mm mode. Much
more to do here, but this is the first step.

- New settings: auto cycle start, hard limit enable, homing direction
mask (which works the same as the stepper mask), homing pulloff
distance (or distance traveled from homed machine zero to prevent
accidental limit trip).

- Minor memory liberation and calculation speed ups.","['config.h,gcode.c,limits.c,main.c,motion_control.c,nuts_bolts.h,protocol.c,serial.c,settings.c,settings.h,stepper.c']"
Sonny Jeon,2012-10-18,"Hard limits code minor updates.

- Fixed a bug that would not disable the steppers if a user issues a
system abort during a homing cycle.

- Updated the hard limit interrupt to be more correct and to issue a
shutdown for the right situations when the switch has been triggered.

- Added a status message to indicate to the user what happened and what
to do upon a hard limit trigger.","['config.h,limits.c,motion_control.c,nuts_bolts.h,protocol.c,protocol.h,serial.c']"
Sonny Jeon,2012-10-21,"Re-organized status messages to be more coherent and centralized.

- Reorganized all of the status message feedback from both the g-code
parser and settings modules to be centralized into two message modules:
status feedback from executing a line and warnings for misc feedback.

- Pulled out the printPgmString() messages in settings.c and placed it
into the new module. (settings_dump() not moved).

- Some other minor edits. Renaming defines, comment updates, etc.","['config.h,gcode.c,protocol.c,protocol.h,serial.c,settings.c,settings.h']"
Sonny Jeon,2012-10-21,"New alarm method. Re(re)organized status messages.

- Installed a new 'alarm' method to centralize motion kills across
alarm or reset events. Right now, this is controlled by system abort
and hard limits. But, in the future, a g-code parser error may call
this too as a safety feature.

- Re(re)organized status messages to just print all errors, regardless
from where it was called. This centralizes them into one place.

- Misc messages method installed for any user feedback that is not a
confirmation or error. Mainly so that there is a place to perform
warnings and such.

- New stuff installed and still made the flash size smaller by saving
flash space from clearing out repeated '\r\n' pgmstrings.

- Fixed a bug where hard limits message would print everytime a system
abort was sent.","['limits.c,motion_control.c,motion_control.h,protocol.c,protocol.h,serial.c,settings.c,settings.h,stepper.c']"
Sonny Jeon,2012-10-21,Added misc message to indicate how to exit ALARM mode.,"['protocol.c,protocol.h']"
Sonny Jeon,2012-11-01,"New report module. 6 persistent work coordinates. New G-codes and settings. README and minor bug updates

(NOTE: This push is likely buggy so proceed with caution. Just
uploading to let people know where we're going.)

- New report.c module. Moved all feedback functions into this module to
centralize these processes. Includes realtime status reports, status
messages, feedback messages.

- Official support 6 work coordinate systems (G54-G59), which are
persistently held in EEPROM memory.

- New g-code support: G28.1, G30.1 stores current machine position as a
home position into EEPROM. G10 L20 Px stores current machine position
into work coordinates without needing to explicitly send XYZ words.

- Homing performed with '$H' command. G28/G30 no longer start the
homing cycle. This is how it's supposed to be.

- New settings: Stepper enable invert and n_arc correction installed.

- Updated and changed up some limits and homing functionality. Pull-off
travel will now move after the homing cycle regardless of hard limits
enabled. Fixed direction of pull-off travel (went wrong way).

- Started on designing an internal Grbl command protocol based on the
'$' settings letter. Commands with non numeric characters after '$'
will perform switch commands, homing cycle, jogging, printing
paramters, etc. Much more to do here.

- Updated README to reflect all of the new features.","['Makefile,config.h,gcode.c,limits.c,main.c,motion_control.c,nuts_bolts.h,protocol.c,protocol.h,readme.textile,report.c,report.h,serial.c,settings.c,settings.h,stepper.c,stepper.h']"
Sonny Jeon,2012-11-01,"Added block delete, opt stop, single block mode. New parser state and parameter feedback. Overhauled '$' command.

NOTE: Another incremental update. Likely buggy, still a ways to go
before everything is installed, such as startup blocks.

- Changed the '$' command to print help. '$$' now prints Grbl settings.
The help now instructs the user of runtime commands, switch toggling,
homing, etc. Jogging will be added to these in v0.9.

- Added switches: block delete, opt stop, and single block mode.

- Now can print the g-code parser state and persistent parameters
(coord sys) to view what Grbl has internally.

- Made the gc struct in the g-code parser global to be able to print
the states. Also moved coordinate system tracking from sys to gc struct.

- Changed up the welcome flag and updated version to v0.8c.

- Removed spindle speed from gcode parser. Not used.","['config.h,gcode.c,gcode.h,nuts_bolts.h,protocol.c,report.c,report.h,settings.c,settings.h,spindle_control.c,spindle_control.h']"
Sonny Jeon,2012-11-03,"New startup script setting. New dry run, check gcode switches. New system state variable. Lots of reorganizing.

(All v0.8 features installed. Still likely buggy, but now thourough
testing will need to start to squash them all. As soon as we're done,
this will be pushed to master and v0.9 development will be started.
Please report ANY issues to us so we can get this rolled out ASAP.)

- User startup script! A user can now save one (up to 5 as compile-time
option) block of g-code in EEPROM memory. This will be run everytime
Grbl resets. Mainly to be used as a way to set your preferences, like
G21, G54, etc.

- New dry run and check g-code switches. Dry run moves ALL motions at
rapids rate ignoring spindle, coolant, and dwell commands. For rapid
physical proofing of your code. The check g-code switch ignores all
motion and provides the user a way to check if there are any errors in
their program that Grbl may not like.

- Program restart! (sort of). Program restart is typically an advanced
feature that allows users to restart a program mid-stream. The check
g-code switch can perform this feature by enabling the switch at the
start of the program, and disabling it at the desired point with some
minimal changes.

- New system state variable. This state variable tracks all of the
different state processes that Grbl performs, i.e. cycle start, feed
hold, homing, etc. This is mainly for making managing of these task
easier and more clear.

- Position lost state variable. Only when homing is enabled, Grbl will
refuse to move until homing is completed and position is known. This is
mainly for safety. Otherwise, it will let users fend for themselves.

- Moved the default settings defines into config.h. The plan is to
eventually create a set of config.h's for particular as-built machines
to help users from doing it themselves.

- Moved around misc defines into .h files. And lots of other little
things.","['config.h,gcode.c,gcode.h,limits.c,limits.h,main.c,motion_control.c,motion_control.h,nuts_bolts.c,nuts_bolts.h,planner.c,planner.h,print.c,protocol.c,protocol.h,readme.textile,report.c,report.h,serial.c,serial.h,settings.c,settings.h,spindle_control.c,stepper.c,stepper.h']"
Sonny Jeon,2012-11-04,"Tweaks and minor bug fixes. Added purge buffer command.

- Added a purge buffer (and lock) command. This is an advanced option
to clear any queued blocks in the buffer in the event of system
position being lost or homed. These queued blocks will likely not move
correctly if not purged. In typical use, the purging command releases
the homing axes lock in case a user need to move the axes off their
hard limit switches, but position is not guaranteed. Homing is advised
immediately after.

- Created a system-wide sync current position function. Cleans up some
of the repetitive tasks in various places in the code that do the same
thing.

- Removed the clear all switches command '$S'. Not really needed and
helped clean up a sync call.

- Other minor tweaks. Readme updated slightly..","['gcode.c,gcode.h,main.c,motion_control.c,nuts_bolts.c,nuts_bolts.h,planner.c,planner.h,protocol.c,readme.textile,report.c,report.h']"
Sonny Jeon,2012-11-04,"Runtime command pinned out! Re-organized coolant pins.

- Pinned out cycle start(A2), feed hold(A1), and reset(A0) runtime
commands. These pins are held high with the internal pull-up resistor
enabled. All you have to do is connect a normally-open switch to the
pin and ground. That's it.

- Moved the coolant control pins to A3 (and the optional mist control
to A4).

- Moved all of the MASK defines into the config.h file to centralize
them.","['config.h,limits.h,protocol.c,report.c,stepper.h']"
Sonny Jeon,2012-11-05,"Tweaked dry run and check g-code switches. Now resets when toggled off.

- To make managing the code easier and to help ensure a user starts
with a fresh reset, the functionality of check g-code and dry run has
been changed to automatically perform a soft reset when toggled off.
Position will not be lost, unless there is a cycle active. Feed hold
before toggling off it needed.

This is mainly a safety issue. If a user dry runs a program and kills
it mid-program, and then restarts it thinking to run it as normal, the
g-code modes that we're set may not be what they expect, and very bad
things can happen.

- NOTE: Grbl is at 83.5% of flash capacity. Not a lot of room left, but
I think we can squeeze in some more!","['gcode.c,gcode.h,protocol.c']"
Hans Insulander,2012-11-05,Generate header dependencies and use them in Makefile,['Makefile']
Hans Insulander,2012-11-05,Ignore dependency files,['.gitignore']
Sonny Jeon,2012-11-05,"Tweaks and bug fixes. Increase to 3 startup blocks. Remove purge/added unlock command

- Increased the number of startup blocks to 3 for no good reason other
than it doesn't increase the flash size.

- Removed the purge buffer command and replaced with an disable homing
lock command.

- Homing now blocks all g-code commands (not system commands) until the
homing cycle has been performed or the disable homing lock is sent.
Homing is required upon startup or if Grbl loses it position. This is
for safety reasons.

- Cleaned up some of the Grbl states and re-organized it to be little
more cohesive.

- Cleaned up the feedback and status messages to not use so much flash
space, as it's a premium now.

 - Check g-code and dry run switches how are mutually exclusive and
can't be enabled when the other is. And automatically resets Grbl when
disabled.

- Some bug fixes and other minor tweaks.","['config.h,gcode.c,main.c,motion_control.c,nuts_bolts.h,protocol.c,report.c,report.h,settings.c']"
Sonny Jeon,2012-11-06,"Merge pull request #132 from hin/header_dependencies

Header dependencies",['']
Sonny Jeon,2012-11-07,"More tweaks. Removed dry run. Trimmed all messages to save flash space.

- Removed the dry run switch. It was getting overly complicated for
what it needed to do. In practice, single block mode and feed rate
overrides (coming in next release) does a much better job with dry runs
than 'dry run'.

- Trimmed all of Grbl's messages from help, status, feedback to
settings. Saved 0.6KB+ of flash space that could be used for v0.9
features.

- Removed some settings inits when set. Will depend on user to power
cycle to get some of these to reload.

- Fixed a bug with settings version not re-writing old settings, when
it should. Thanks Alden!","['config.h,gcode.c,gcode.h,main.c,protocol.c,report.c,settings.c,settings.h']"
Sonny Jeon,2012-11-08,"Sanguino compile patch

@daapp : Sanguino compile serial USART path. Thanks!","['serial.c,settings.c']"
Sonny Jeon,2012-11-08,"Housekeeping.

- Added some more notes to config.h.

- Added the ability to override some of the #defines around Grbl in
config.h, like planner buffer size, line buffer size, serial
send/receive buffers. Mainly to centralize the configurations to be
able to port to different microcontrollers later.","['config.h,limits.c,limits.h,planner.h,protocol.h,serial.h,stepper.c,stepper.h']"
Sonny Jeon,2012-11-09,Fixed homing cycle hanging after locating switches.,['motion_control.c']
Sonny Jeon,2012-11-09,"Added note that D13 can't be used as input, pulled-high.","['config.h,motion_control.c']"
Sonny Jeon,2012-11-10,"Tweaks. Seek rate updates when set. CCW arc full circle fix.

- Fixed a minor issue where the seek rates would not immediately be
used and only would after a reset. Should update live now.

- A full circle IJ offset CCW arc would not do anything. Fixed bug via
a simple if-then statement.

- Radius mode tweaks to check for negative value in sqrt() rather than
isnan() it. Error report updated to indicate what actually happened.","['gcode.c,gcode.h,motion_control.c,report.c,report.h']"
Sonny Jeon,2012-11-14,"Re-factored system states and alarm management. Serial baud support greater than 57600.

- Refactored system states to be more clear and concise. Alarm locks
processes when position is unknown to indicate to user something has
gone wrong.

- Changed mc_alarm to mc_reset, which now manages the system reset
function. Centralizes it.

- Renamed '$X' kill homing lock to kill alarm lock.

- Created an alarm error reporting method to clear up what is an alarm:
message vs a status error: message. For GUIs mainly. Alarm codes are
negative. Status codes are positive.

- Serial baud support upto 115200. Previous baudrate calc was unstable
for 57600 and above.

- Alarm state locks out all g-code blocks, including startup scripts,
but allows user to access settings and internal commands. For example,
to disable hard limits, if they are problematic.

- Hard limits do not respond in an alarm state.

- Fixed a problem with the hard limit interrupt during the homing
cycle. The interrupt register is still active during the homing cycle
and still signal the interrupt to trigger when re-enabled. Instead,
just disabled the register.

- Homing rate adjusted. All axes move at homing seek rate, regardless
of how many axes move at the same time. This is unlike how the stepper
module does it as a point to point rate.

- New config.h settings to disable the homing rate adjustment and the
force homing upon powerup.

- Reduced the number of startup lines back down to 2 from 3. This
discourages users from placing motion block in there, which can be very
dangerous.

- Startup blocks now run only after an alarm-free reset or after a
homing cycle. Does not run when $X kill is called. For satefy reasons","['config.h,gcode.c,limits.c,main.c,motion_control.c,motion_control.h,nuts_bolts.c,nuts_bolts.h,protocol.c,report.c,report.h,serial.c,serial.h,settings.c']"
Sonny Jeon,2012-11-15,"Added Grbl state in status report. Removed switch support.

- Added Grbl state (Idle, Running, Queued, Hold, etc) to the real-time
status reporting feature as feedback to the user of what Grbl is doing.
Updated the help message to reflect this change.

- Removed switches (dry run, block delete, single block mode). To keep
Grbl simple and not muddled up from things that can easily be taken
care of by an external interface, these were removed.

- Check g-code mode was retained, but the command was moved to '$C'
from '$S0'.","['config.h,gcode.c,gcode.h,motion_control.c,nuts_bolts.h,protocol.c,report.c,report.h']"
Sonny Jeon,2012-11-18,"Homing search sequence now compile-time option. New defaults.h file. Tidying up.

- The homing sequence is now a compile-time option, where a user can
choose which axes(s) move in sequence during the search phase. Up to 3
sequences. Works with the locating phase and the pull-off maneuver.

- New defaults.h file to store user generated default settings for
different machines. Mainly to be used as a central repo, but each set
may be select to be compiled in as a config.h define.","['config.h,defaults.h,gcode.c,limits.c,motion_control.c,nuts_bolts.h']"
Sonny Jeon,2012-11-18,Updated readme,"['defaults.h,readme.textile']"
Sonny Jeon,2012-11-19,"Updated interface protocol. Fixed M2 bug.

- Updated interface protocol to play nicer with interface programs. All
Grbl responses beginning with '$' signifies a setting. Bracketed '[]'
responses are feedback messages containing either state, parameter, or
general messages. Chevron '<>' response are from the real-time status
messages, i.e. position.

- M2 Program end command was causing a system alarm. Fixed. Thanks
@blinkenlight !","['defaults.h,planner.c,report.c,stepper.c']"
Sonny Jeon,2012-11-20,Merge v0.8 edge to master,['']
Sonny Jeon,2012-11-20,Merge error fix.,['nuts_bolts.h']
Sonny Jeon,2012-11-25,"G28/G30 post move bug fix.

- Fixed a bug when after moving to a pre-defined position G28/G30, the
next move would go someplace unexpected. The g-code parser position
vector wasn't getting updated.",['gcode.c']
Sonny Jeon,2012-11-25,G28/G30 post move bug fix. Altered file permissions.,"['COPYING,Makefile,config.h,eeprom.c,eeprom.h,gcode.c,gcode.h,limits.c,limits.h,main.c,motion_control.c,motion_control.h,nuts_bolts.c,nuts_bolts.h,planner.c,planner.h,print.c,print.h,protocol.c,protocol.h,readme.textile,serial.c,serial.h,settings.h,spindle_control.c,spindle_control.h,stepper.c,stepper.h']"
Sonny Jeon,2012-12-08,"New stepper algorithm. Optimized planner.

- Brand-new stepper algorithm. Based on the Pramod Ranade inverse time
algorithm, but modified to ensure step events are exact. Currently
limited to about 15kHz step rates, much more to be done to enable 30kHz
again.

- Removed Timer1. Stepper algorithm now uses Timer0 and Timer2.

- Much improved step generation during accelerations. Smoother. Allows
much higher accelerations (and speeds) than before on the same machine.

- Cleaner algorithm that is more easily portable to other CPU types.

- Streamlined planner calculations. Removed accelerate_until and
final_rate variables from block buffer since the new stepper algorithm
is that much more accurate.

- Improved planner efficiency by about 15-20% during worst case
scenarios (arcs).

- New config.h options to tune new stepper algorithm.","['config.h,defaults.h,nuts_bolts.h,planner.c,planner.h,settings.h,stepper.c']"
Sonny Jeon,2012-12-10,"Planner execution time halved and bug fixes. Increased step rate limit to 30kHz.

- Planner execute speed has been more than halved from 4ms to 1.9ms
when computing a plan for a single line segment during arc generation.
This means that Grbl can now run through an arc (or complex curve)
twice as fast as before without starving the buffer. For 0.1mm arc
segments, this means about the theoretical feed rate limit is about
3000mm/min for arcs now.

- Increased the Ranade timer frequency to 30kHz, as there doesn't seem
to be any problems with increasing the frequency. This means that the
maximum step frequency is now back at 30kHz.

- Added Zen Toolworks 7x7 defaults.","['config.h,defaults.h,planner.c,report.c,stepper.c']"
Sonny Jeon,2012-12-10,"Planner bug fix.

- Oops! Misplace an if-then statement. Should work as advertised now.
(Hopefully)",['planner.c']
Sonny Jeon,2012-12-10,"(Another) Planner bug fix.

- Oops again. Thought the new planner changes made things much better,
but there was a bug. Improvements we on the order of 20% execution time
reduction, rather than half. The increase to 30kHz Ranade timer
frequency also increased the overall overhead, so the total planner
change? Zero. But, it's still better.",['planner.c']
Sonny Jeon,2012-12-11,"Planner optimizations.

- Improved planner execution speed by 5% or more. Re-factored most of
the calculations in terms of the square of velocity. This removed a lot
of sqrt() calculations for every planner_recalculate.","['planner.c,planner.h,stepper.c']"
Sonny Jeon,2012-12-11,"Added builds folder.

In light of the downloads section in Github being removed, added a
builds folder for all of the .hex files. Hopefully these won't be
removed either.","['.gitignore,grbl_0_51_atmega168_16mhz_9600.hex,grbl_0_51_atmega328p_16mhz_9600.hex,grbl_v0_6b_atmega168_16mhz_9600.hex,grbl_v0_6b_atmega328p_16mhz_9600.hex,grbl_v0_7d_atmega328p_16mhz_9600.hex,grbl_v0_8a_edge_328p_16mhz_9600_build20120310.hex,grbl_v0_8c_atmega328p_16mhz_9600.hex,grbl_v0_9a_edge_328p_16mhz_9600_build20121210.hex']"
Sonny Jeon,2012-12-11,"Added builds folder.

Because the Downloads section has been removed, added a builds folder
for users to download pre-compiled firmware without needing to compile
it themselves.","['.gitignore,grbl_0_51_atmega168_16mhz_9600.hex,grbl_0_51_atmega328p_16mhz_9600.hex,grbl_v0_6b_atmega168_16mhz_9600.hex,grbl_v0_6b_atmega328p_16mhz_9600.hex,grbl_v0_7d_atmega328p_16mhz_9600.hex,grbl_v0_8a_edge_328p_16mhz_9600_build20120310.hex,grbl_v0_8c_atmega328p_16mhz_9600.hex,grbl_v0_9a_edge_328p_16mhz_9600_build20121210.hex']"
Sonny Jeon,2012-12-12,Moved compiled builds to different repo.,"['grbl_0_51_atmega168_16mhz_9600.hex,grbl_0_51_atmega328p_16mhz_9600.hex,grbl_v0_6b_atmega168_16mhz_9600.hex,grbl_v0_6b_atmega328p_16mhz_9600.hex,grbl_v0_7d_atmega328p_16mhz_9600.hex,grbl_v0_8a_edge_328p_16mhz_9600_build20120310.hex,grbl_v0_8c_atmega328p_16mhz_9600.hex,grbl_v0_9a_edge_328p_16mhz_9600_build20121210.hex']"
Sonny Jeon,2012-12-12,Added download links to README.,"['grbl_0_51_atmega168_16mhz_9600.hex,grbl_0_51_atmega328p_16mhz_9600.hex,grbl_v0_6b_atmega168_16mhz_9600.hex,grbl_v0_6b_atmega328p_16mhz_9600.hex,grbl_v0_7d_atmega328p_16mhz_9600.hex,grbl_v0_8a_edge_328p_16mhz_9600_build20120310.hex,grbl_v0_8c_atmega328p_16mhz_9600.hex,grbl_v0_9a_edge_328p_16mhz_9600_build20121210.hex,readme.textile']"
Sonny Jeon,2012-12-12,Changed README to markdown,['README.md']
Sonny Jeon,2012-12-12,Update README.md,['README.md']
Sonny Jeon,2012-12-14,"Acceleration independence installed. Initial re-work of planner for feedrate overrides.

NOTE: This push is a work-in-progress and there are known bugs that
need to be fixed, like homing acceleration being incompatible. Released
for testing. Settings will definitely be overwritten, as new settings
were needed.

- Acceleration independence installed in planner. Each axis can now
have different accelerations and Grbl will maximize the accelerations
depending on the direction its moving. Very useful for users like on
the ShapeOko with vastly different Z-axis properties.

- More planner optimizations and re-factoring. Slightly improved some
of the older calculations, but new acceleration calculations offset
these improvements. Overall no change in processing speed.

- Removed planner nominal length checks. It was arguable whether or not
this improved planner efficiency, especially in the worst case scenario
of arcs.

- Updated readme and changed to markdown format.","['.gitignore,README.md,limits.c,planner.c,planner.h,readme.textile,report.c,settings.c,settings.h']"
Sonny Jeon,2012-12-16,"Max velocity axes independence installed. Fixed intermittent slow trailing steps. Timer0 disable fix.

- Maximum velocity for each axis is now configurable in settings. All
rapids/seek move at these maximums. All feed rates(including rapids)
may be limited and scaled down so that no axis does not exceed their
limits.

- Moved around auto-cycle start. May change later, but mainly to ensure
the planner buffer is completely full before cycle starting a streaming
program. Otherwise it should auto-start when there is a break in the
serial stream.

- Reverted old block->max_entry_speed_sqr calculations. Feedrate
overrides not close to ready at all.

- Fixed intermittent slow trailing steps for some triangle velocity
profile moves. The acceleration tick counter updating was corrected to
be exact for that particular transition. Should be ok for normal
trapezoidal profiles.

- Fixed the Timer0 disable after a step pulse falling edge. Thanks
@blinkenlight!","['config.h,gcode.c,gcode.h,main.c,motion_control.c,planner.c,report.c,settings.c,settings.h,stepper.c']"
Sonny Jeon,2012-12-16,"Slow trailing steps fix. Added more defaults.

- Fixed an issue (hopefully) with slow trailing steps after a
triangular velocity profile move. Sets the trapezoid tick cycle counter
to the correct value for an accurate reproduction of the deceleration
curve. Keeps it from arriving too early to the target position, which
causes the slow trailing steps.

- Added Zen Toolworks 7x7 to default settings.

- Updated readme with new edge build.","['.gitignore,README.md,defaults.h,stepper.c']"
Sonny Jeon,2012-12-19,"Arc mm_per_segment removed, now in terms of tolerance. Stepper ramp counter variable type corrected.

- Arc mm_per_segment parameter was removed and replaced with an
arc_tolerance parameter, which scales all arc segments automatically to
radius, such that the line segment error doesn't exceed the tolerance.
Significantly improves arc performance through larger radius arc,
because the segments are much longer and the planner buffer has more to
work with.

- Moved n_arc correction from the settings to config.h. Mathematically
this doesn't need to be a setting anymore, as the default config value
will work for all known CNC applications. The error does not accumulate
as much anymore, since the small angle approximation used by the arc
generation has been updated to a third-order approximation and how the
line segment length scale with radius and tolerance now. Left in
config.h for extraneous circumstances.

- Corrected the st.ramp_count variable (acceleration tick counter) to a
8-bit vs. 32-bit variable. Should make the stepper algorithm just a
touch faster overall.","['config.h,defaults.h,motion_control.c,planner.c,report.c,settings.c,settings.h,stepper.c']"
Sonny Jeon,2012-12-21,"Updated README. Max step rate back at 30kHz. Acceleration minor bug fix.

- Returned the max step rate to 30kHz. The new arc algorithm works uses
so much less CPU overhead, because the segments are longer, that the
planner has no problem computing through them.

- Fixed an issue with the acceleration independence scaling. Should now
work with accelerations above 400mm/sec^2 or so.

- Updated README","['README.md,config.h,motion_control.c,planner.c']"
Sonny Jeon,2012-12-21,Readme link to edge build 2012-12-21,['README.md']
Sonny Jeon,2013-01-06,"Minor changes.

- Changed some names up and removed a plan_reset() function that is
never used.","['config.h,planner.c,planner.h,stepper.c']"
Sonny Jeon,2013-01-06,Fixed bug with homing and polling at the same time. Updated readme.,"['README.md,limits.c,motion_control.c,report.c']"
Alexander Danilov,2013-01-10,Replace some constants with N_AXIS.,"['gcode.c,gcode.h,limits.c,planner.c,report.c,settings.c']"
Sonny Jeon,2013-01-09,"Merge pull request #160 from daapp/edge

Replace some constants with N_AXIS.",['']
Jens Geisler,2013-01-17,"relaunch ontop of latest grbl edge
code very messy but tested","['HelloWorld.nc,Makefile,interrupt.c,interrupt.h,io.h,pgmspace.c,pgmspace.h,sleep.h,config.h,eeprom.c,gnuplot.plt,main.c,planner_inject_accessors.c,rename_execute_runtime.h,runtime.c,serial.c,sim.bat,simulator.c,simulator.h,delay.c,delay.h,floatunsisf.c']"
Sonny Jeon,2013-01-17,"Merge pull request #112 from jgeisler0303/simulator

Grbl Simulator. Oh yeah.",['']
Silas Baronda,2013-01-17,Removing executable bit on the files,"['COPYING,Makefile,README.md,config.h,commands.txt,resources.txt,structure.txt,eeprom.c,eeprom.h,gcode.c,gcode.h,limits.c,limits.h,main.c,motion_control.c,motion_control.h,nuts_bolts.c,nuts_bolts.h,planner.c,planner.h,print.c,print.h,protocol.c,protocol.h,console,proxy,stream,stream.rb,trapezoid_simulator.rb,simple_stream.py,stream.py,serial.c,serial.h,settings.h,spindle_control.c,spindle_control.h,stepper.c,stepper.h']"
Elijah Insua,2013-01-18,"Fix sim makefile so it works on mac

These changes include a path separator fix and the removal of --gc-sections which causes ld failures, and is not needed on a pc.

This patch also changes how a compiler is selected.  The makefile will now select the system compiler , which should work fine
under mingw and linux.","['.gitignore,Makefile']"
Sonny Jeon,2013-01-18,"Merge pull request #167 from tmpvar/simulator-mac

Fix sim makefile so it works on mac",['']
Sonny Jeon,2013-01-18,Merge bug fixes from recent v0.8c push. Added readme for Grbl Sim.,"['README.md,limits.c,motion_control.c,report.c,README.md']"
Sonny Jeon,2013-01-18,"Merge pull request #169 from silasb/fix-execute-bit-on-files

Removing executable bit on the files",['']
Jens Geisler,2013-02-20,"implemented a mixture of Sonny's MATLAB and my previous grbl planner
ontop of the edge planner
examples run byte for byte identical old and new version","['planner.c,interrupt.c,interrupt.h,stepper.c,stepper.h']"
Jens Geisler,2013-02-20,added counter for planner steps,"['planner.c,planner.h,simulator.c']"
Sonny Jeon,2013-02-20,Update README.md,['README.md']
Sonny Jeon,2013-02-20,"Merge pull request #188 from jgeisler0303/new_planner

New planner commits merge into dev branch.",['']
Jens Geisler,2013-02-22,"changed atomic access for updating the acceleration profile
the stepper interrupt is only halted when necessary and for the shortest
time possible (8% cycle time)","['Makefile,planner.c,planner.h,simulator.c,stepper.h']"
Sonny Jeon,2013-02-22,Push additional updates from @jgeisler0303,"['planner.c,planner.h,stepper.c']"
Sonny Jeon,2013-02-22,Added some prelimary notes to new changes.,"['planner.c,planner.h']"
bungao,2013-02-26,integrating soft limits,"['limits.c,motion_control.c,protocol.c,report.c,report.h,settings.c,settings.h']"
Jens Geisler,2013-02-26,"bugfix: uninitiallized curr_block->new_entry_speed_sqr lead to step loss
in some cases",['planner.c']
Sonny Jeon,2013-02-26,"Merge pull request #193 from bungao/soft_limts

integrating soft limits",['']
Sonny Jeon,2013-03-01,"Minor changes and added notes to soft limits routines.

- Changed up mc_line to accept an array rather than individual x,y,z
coordinates. Makes some of the position data handling more effective,
especially for a 4th-axis later on.

- Changed up some soft limits variable names.","['gcode.c,motion_control.c,motion_control.h,report.c,settings.c,settings.h']"
Sonny Jeon,2013-03-01,Bug fix to-do note on soft limit checks. Not yet completed.,['motion_control.c']
Bertus Kruger,2013-03-12,"Update eeprom.c

Function eeprom_put_char's parameters did not align with the .h file.",['eeprom.c']
Bertus Kruger,2013-03-12,"Update gcode.c

home_select defined out of scope. Moved it outside the switch 
so the rest of the switch can see it properly.",['gcode.c']
Bertus Kruger,2013-03-13,"Update eeprom.c

Changed back",['eeprom.c']
Bertus Kruger,2013-03-13,"Update eeprom.h

Fixed the function signature.",['eeprom.h']
Bertus Kruger,2013-03-13,"Update gcode.c

Removed the home_select variable.",['gcode.c']
Sonny Jeon,2013-03-12,"Merge pull request #200 from Protoneer/master

Fixed small bug.",['']
Sonny Jeon,2013-03-12,Pushed minor changes. Thanks @Protoneer!,"['eeprom.h,gcode.c']"
Bertus Kruger,2013-03-13,"Update nuts_bolts.c

Removed __floatunsisf and used normal casting on line 81. 
This makes it compatible with the Arduino IDE.",['nuts_bolts.c']
Bertus Kruger,2013-03-13,"Update planner.c

Removed inline from all functions. 

If this is really needed is there another way that we can get 
around using it? (The Arduino IDE does not recognize it)",['planner.c']
Sonny Jeon,2013-03-19,"G-code updates for G10 L2 and L20.

- LinuxCNC's g-code definitions changed for G10. Updated to their
descriptions.",['gcode.c']
Sonny Jeon,2013-03-19,"G-code updates for G10 L2 and L20

- Updated g-codes G10 L2 and G10 L20 to the new descriptions on
linuxcnc.org",['gcode.c']
Sonny Jeon,2013-03-19,Update README.md,['README.md']
Sonny Jeon,2013-03-21,"Untested! Soft limits, max travel, homing changes, new settings.

- WARNING: Completely untested. Will later when there is time. Settings
WILL be overwritten, as there are new settings.

- Soft limits installed. Homing must be enabled for soft limits to work
correctly. Errors out much like a hard limit, locking out everything
and bringing up the alarm mode. Only difference is it forces a feed
hold before doing so. Position is not lost.

- IMPORTANT: Homing had to be updated so that soft limits work better
with less CPU overhead. When homing completes, all axes are assumed to
exist in negative space. If your limit switch is other side, the homing
cycle with set this axis location to the max travel value, rather than
zero.

- Update mc_line() to accept an array, rather than individual variables.

- Added an mc_auto_cycle_start() function handle this feature.
Organization only.

-","['config.h,defaults.h,gcode.c,limits.c,limits.h,main.c,motion_control.c,motion_control.h,nuts_bolts.h,planner.c,planner.h,protocol.c,report.c,report.h,settings.c,settings.h']"
Sonny Jeon,2013-03-22,Update README.md,['README.md']
Sonny Jeon,2013-03-28,Minor updates to code and commenting.,"['gcode.c,limits.c,motion_control.c,stepper.c']"
Sonny Jeon,2013-04-05,"Updates to edge/dev. Line buffer increased/planner buffer decreased. Line overflow feedback.

- Increased g-code parser line buffer to 70 characters (from 50) to
prevent some long arc commands from getting truncated.

- Decreased planner buffer from 18 to 17 blocks to free up memory for
line buffer.

- Added a line buffer overflow feedback error (Thanks @BHSPitMonkey!)","['config.h,gcode.c,planner.h,protocol.c,protocol.h,report.c,report.h,stepper.c,stepper_new.c']"
Sonny Jeon,2013-04-05,"Increased g-code parser line buffer. Added line overflow feedback.

- Increased g-code parser line buffer from 50 to 70 characters. Should
fix most all issues with long arc statements, provided that they are 8
digits(float) long only.

- Added a line buffer overflow feedback error to let the user know when
it encounters this problem. Resets the line whenever this occurs.
(Thanks @BHSPitMonkey!)","['config.h,protocol.c,protocol.h,report.c,report.h']"
Sonny Jeon,2013-04-05,Updated readme,['README.md']
0xPIT,2013-05-16,fix command line parameter for avr-size,['Makefile']
Elmo Mäntynen,2013-07-21,Make serial work with most chips by default,"['serial.c,serial.h']"
Elmo Mäntynen,2013-07-21,"Added pin mapping list to docs, useful for porting",['pinmapping.txt']
Elmo Mäntynen,2013-07-21,Refactor config.h to allow defaults for chips/boards with different pin mappings,"['config.h,config_default_2560.h,config_default_328p.h']"
Sonny Jeon,2013-08-19,"Merge pull request #229 from 0xPIT/patch-1

fix command line parameter for avr-size",['']
Sonny Jeon,2013-08-19,"Push old dev_2 draft to work on other things.

- **NON-FUNCTIONAL**
- Contains an old draft of separating the stepper driver direct access
to the planner buffer. This is designed to keep the stepper and planner
modules independent and prevent overwriting or other complications. In
this way, feedrate override should be able to be installed as well.
- A number of planner optimizations are installed too.
- Not sure where the bugs are. Either in the new planner optimizations,
new stepper module updates, or in both. Or it just could be that the
Arduino AVR is choking with the new things it has to do.","['config.h,gcode.c,gcode.h,limits.c,main.c,motion_control.c,nuts_bolts.c,nuts_bolts.h,planner.c,planner.h,planner_old.c,planner_old.h,print.c,print.h,protocol.c,report.c,settings.c,stepper.c,stepper.h,stepper_new2.c,stepper_new_dual_ISR.c,stepper_new_time.c,stepper_old.c']"
Sonny Jeon,2013-08-19,"Merge pull request #260 from elmom/master

Thanks for the contribution! Looks good. Will update some of the semantics shortly, but the idea is solid.",['']
Sonny Jeon,2013-08-19,"Processor-independent pin mapping feature.

- Cleaned up and organized pin mapping concept by @elmom.

- pin_map.h allows for user-supplied pin mapping and port vector
definitions in a centralized file. With more processor types, more
definitions could be added.","['config.h,config_default_2560.h,config_default_328p.h,nuts_bolts.h,pin_map.h,serial.h']"
Sonny Jeon,2013-08-20,Pin map definition cleanup.,"['config.h,pin_map.h,serial.c']"
0xPIT,2013-08-25,remove mcu argument for avr-size in makefile as it is not present in GNU Binutils 2.22,['Makefile']
Sonny Jeon,2013-08-25,"Merge pull request #263 from 0xPIT/master

remove mcu argument for avr-size in makefile as it is not present in GNU...",['']
Sonny Jeon,2013-10-09,"Protected buffer works! Vast improvements to planner efficiency.  Many things still broken with overhaul.

Development push. Lots still broken.

- Protected planner concept works! This is a critical precursor to
enabling feedrate overrides in allowing the planner buffer and the
stepper execution operate atomically. This is done through a
intermediary segment buffer.

- Still lots of work to be done, as this was a complete overhaul of the
planner and stepper subsystems. The code can be cleaned up quite a bit,
re-enabling some of the broken features like feed holds, and finishing
up some of the concepts

- Pushed some of the fixes from the master and edge branch to here, as
this will likely replace the edge branch when done.","['Makefile,config.h,pinmapping.txt,nuts_bolts.h,pin_map.h,planner.c,planner.h,serial.c,stepper.c,stepper.h']"
Sonny Jeon,2013-10-12,"New stepper subsystem bug fixes.

- New stepper algorithm with the new optimized planner seems to be
working nearly twice as fast as the previous algorithm.

- For one, the planner computation overhead is probably a fraction of
what it used to be with the worst case being about half still.

- Secondly, anytime the planner plans back to the first executing
block, it no longer overwrites the block conditions and allows it to
complete without lost steps. So no matter if the streams slows, the
protected planner should keep the steppers moving without risk of lost
steps (although this still needs to be tested thoroughly and may
audibly sound weird when this happens.)

- It now seems that the bottleneck is the serial baudrate (which is
good!)",['stepper.c']
Sonny Jeon,2013-10-14,"Fine tuning of new stepper algorithm with protected planner. Adaptive step prediction for segment buffer.

- Cleaned up the new stepper algorithm code with more commenting and
better logic flow.

- The new segment buffer now predicts the number of steps each segment
should have to execute over about 8 milliseconds each (based on the
ACCELERATION_TICKS_PER_SECOND setting). So, for when the whole segment
buffer is full, the stepper algorithm has roughly 40 milliseconds of
steps queued before it needs to refilled by the main program.

- Readjusted the max supported step rate back to 30kHz from the lower
development 20kHz. Everything still works amazing great and the test
CNC machine still runs twice as fast with the new stepper algorithm and
planner.

- Upped the standard serial baudrate to 115200 baud, as it is clear
that the bottleneck is the serial interface. Will now support this, as
well as the old 9600 baud, in new firmware builds.","['config.h,defaults.h,planner.c,stepper.c,stepper_new2.c,stepper_new_dual_ISR.c,stepper_new_time.c']"
Rob Brown,2013-10-17,"Update Pin Change Interrupts so it works

PCIE1 - Interrupt 8 on the Mega is attached to USART0 RX so when any
serial communication was transmitted it was triggering the Reset
Interrupt",['pin_map.h']
Sonny Jeon,2013-10-17,"Merge pull request #278 from EliteEng/master

Update Pin Change Interrupts on Mega 2560",['']
Rob Brown,2013-10-18,"Changed Stepper Pins

Changed Stepper Pins so the Step Port Invert Mask matches the UNO",['pin_map.h']
Sonny Jeon,2013-10-21,"Merge pull request #279 from EliteEng/master

Changed Stepper Pins",['']
Sonny Jeon,2013-10-24,"Cleaned up stepper and planner code.

- Added some compile-time error checking. Will add more in future
pushes to ensure settings are correct and within parameters that won't
break anything.

- Pushed some master branch changes with MEGA pin settings.

- Cleaned up planner code and comments to clarify some of the new
changes. Still much to do here.

- Cleaned up the new stepper code. May need to abstract some of the
segment buffer more to fix the feed holds (and integrate homing into
the main stepper routine). With what's planned, this should make the
stepper algorithm easier to attach other types of processes to it,
where it is now tightly integrated with the planner buffer and nothing
else.","['README.md,config.h,pin_map.h,planner.c,planner.h,stepper.c']"
Sonny Jeon,2013-10-29,"Updated comments. Changed stepper variable names to be more understandable. Added step locking note.

- Updated config comments and stepper code comments for the new changes.

- Changed stepper algorithm variable names to be more understandable in
what they actually do.

- Added a stepper lock note in default.h per user request.

- Started some code layout in handling feed holds and refactoring the
homing routine to use the main stepper algorithm instead of a seperate
version.","['config.h,defaults.h,limits.c,protocol.c,stepper.c,stepper_old.c,stepper_v0_9.c']"
Sonny Jeon,2013-10-29,Planner function call fix. More clean up.,"['planner.c,protocol.c,stepper.c']"
Sonny Jeon,2013-10-29,"Merge branch 'dev_2' into dev

Conflicts:
README.md
gcode.c
motion_control.c
planner.c
planner.h
protocol.c
report.c
settings.c
settings.h
stepper.c
stepper.h","['Makefile,README.md,config.h,defaults.h,pinmapping.txt,eeprom.h,gcode.c,gcode.h,limits.c,limits.h,main.c,motion_control.c,motion_control.h,nuts_bolts.c,nuts_bolts.h,pin_map.h,planner.c,planner.h,planner_old.c,planner_old.h,print.c,print.h,protocol.c,protocol.h,report.c,report.h,serial.c,settings.c,settings.h,stepper.c,stepper.h,stepper_old.c,stepper_v0_9.c']"
Sonny Jeon,2013-10-29,"Merge branch 'dev_2' into dev

Conflicts:
	README.md
	gcode.c
	motion_control.c
	planner.c
	planner.h
	protocol.c
	report.c
	settings.c
	settings.h
	stepper.c
	stepper.h",['']
Sonny Jeon,2013-10-29,Merge fixes.,"['limits.c,motion_control.c,planner.c,report.c,report.h,stepper.c']"
Sonny Jeon,2013-10-29,Another merge fix.,['Makefile']
Sonny Jeon,2013-11-22,"Yet another major stepper algorithm and planner overhaul.

- Overhauled the stepper algorithm and planner again. This time
concentrating on the decoupling of the stepper ISR completely. It is
now dumb, relying on the segment generator to provide the number of
steps to execute and how fast it needs to go. This freed up lots of
memory as well because it made a lot tracked variables obsolete.

- The segment generator now computes the velocity profile of the
executing planner block on the fly in floating point math, instead of
allowing the stepper algorithm to govern accelerations in the previous
code. What this accomplishes is the ability and framework to (somewhat)
easily install a different physics model for generating a velocity
profile, i.e. s-curves.

- Made some more planner enhancements and increased efficiency a bit.

- The changes also did not increase the compiled size of Grbl, but
decreased it slightly as well.

- Cleaned up a lot of the commenting.

- Still much to do, but this push works and still is missing feedholds
(coming next.)","['planner_dist.c,planner_time_archive.c,planner_v0_9.c,planner_v0_9.h,stepper_dist.c,stepper_old.c,stepper_time.c,stepper_time_archive.c,stepper_v0_9.c,config.h,planner.c,planner.h,stepper.c,stepper.h,stepper_test.c']"
Travis Snoozy,2013-11-22,Add support for active-high limit switches,"['config.h,limits.c']"
Sonny Jeon,2013-11-23,"Merge pull request #289 from Travis-Snoozy/master

Add support for active-high limit switches",['']
Sonny Jeon,2013-12-04,"Reinstated feed holds into new stepper algorithm and planner. Rough draft, but working.

- Reinstated the feed hold feature with the new stepper algorithm and
new optimized planner. It works, but will be re-factored a bit soon to
clean up the code.

- At this point, feedrate overrides may need to be installed in the
v1.0 version of grbl, while this version will likely be pushed to the
edge branch soon and pushed to master after the bugs have been squashed.

- Measured the overall performance of the new planner and stepper
algorithm on an oscilloscope. The new planner is about 4x faster than
before, where it is completing a plan in around 1ms. The stepper
algorithm itself is minutely faster, as it is a little lighter. The
trade-off in the increased planner performance comes from the new step
segment buffer. However, even in the worse case scenario, the step
segment buffer generates a new segment with a typical 0.2 ms, and the
worse case is 1ms upon a new block or replanning the active block.
Added altogether, it’s argubly still twice as efficient as the old one.","['planner.c,planner.h,stepper.c']"
Sonny Jeon,2013-12-07,"Pushed limits active high option. Updated defaults.h. Misc bug fixes. Cleaned up codebase.

- Pushed limit switch active high option (i.e. NC switches).

- Updated defaults.h to be in-line with the new settings.

- Refactored feed hold handling and step segment buffer to be more
generalized in effort to make adding feedrate overrides easier in the
future. Also made it a little more clean.

- Fixed G18 plane select issue. Now ZX-plane, rather than XZ-plane, per
right hand rule.

- Cleaned some of the system settings by more accurately renaming some
of the variables and removing old obsolete ones.

- Declared serial.c rx_buffer_tail to be volatile. No effect, since
avr-gcc automatically does this during compilation. Helps with porting
when using other compilers.

- Updated version number to v0.9b.

- Updates to README.md","['README.md,planner_dist.c,planner_time_archive.c,planner_v0_9.c,planner_v0_9.h,stepper_dist.c,stepper_old.c,stepper_time.c,stepper_time_archive.c,stepper_v0_9.c,config.h,defaults.h,gcode.c,limits.c,planner.c,planner.h,report.c,serial.c,settings.c,settings.h,stepper.c,stepper_test.c']"
Sonny Jeon,2013-12-07,"Pushed bug fixes. Updated readme.

- G18 plane select fix from XZ-plane to ZX-plane per right hand rule.

- Added volatile declaration for rx_buffer_tail in serial.c. No real
effect to operation as avr-gcc adds this upon compilation. Helps with
porting issues when using a different compiler.","['README.md,gcode.c,serial.c']"
Sonny Jeon,2013-12-07,"Deceleration to zero speed improvements. Update defaults.

- A minor issue with deceleration ramps when close to zero velocity.
Should be virtually unnoticeable for most CNC systems, but fixed in
this push and accurate to physics.

- Updated some of the junction deviation defaults. Because the new
stepper algorithm can easily maximize a CNC machine’s capabilities or
simply go much faster, this means the speed in which it enters
junctions has to be a little more constrained. Meaning that, we have to
slow a little bit down more so that we don’t exceed the acceleration
limits of the stepper motors.","['defaults.h,stepper.c']"
Edward,2013-12-10,"added shapeoko2 profile

shapeoko 2 uses 2mm GT2 belting and 20tooth pulleys",['defaults.h']
Sonny Jeon,2013-12-10,"Merge pull request #301 from shapeoko/master

added shapeoko2 profile",['']
Sonny Jeon,2013-12-10,"Revamped homing cycle. Axis limits and max travel bug fixes. Build info. Refactored config.h.

- Revamped and improved homing cycle. Now tied directly into the main
planner and stepper code, which enables much faster homing seek rates.
Also dropped the compiled flash size by almost 1KB, meaning 1KB more
for other features.

- Refactored config.h. Removed obsolete defines and configuration
options. Moved lots of “advanced” options into the advanced area of the
file.

- Updated defaults.h with the new homing cycle. Also updated the
Sherline 5400 defaults and added the ShapeOko2 defaults per user
submissions.

- Fixed a bug where the individual axes limits on velocity and
acceleration were not working correctly. Caused by abs() returning a
int, rather than a float. Corrected with fabs(). Duh.

- Added build version/date to the Grbl welcome message to help indicate
which version a user is operating on.

- Max travel settings were not being defaulted into the settings EEPROM
correctly. Fixed.

- To stop a single axis during a multi-axes homing move, the stepper
algorithm now has a simple axis lock mask which inhibits the desired
axes from moving. Meaning, if one of the limit switches engages before
the other, we stop that one axes and keep moving the other.","['config.h,defaults.h,limits.c,nuts_bolts.h,planner.c,report.c,report.h,settings.c,settings.h,stepper.c']"
Sonny Jeon,2013-12-10,Update README.md,['README.md']
Scott R Carlson,2013-12-27,"Hard Limits configured for active high.

Added the use of homing_dir_mask to homing_cycle","['config.h,limits.c']"
Sonny Jeon,2013-12-27,"Merge pull request #312 from scottrcarlson/dev

Fixed homing_dir_mask functionality in the re-written homing_cycle.",['']
Sonny Jeon,2013-12-29,"Merge branch 'dev' of https://github.com/grbl/grbl into dev

Conflicts:
	limits.c","['README.md,config.h,limits.c,limits.h,main.c,motion_control.c,motion_control.h,nuts_bolts.h,planner.c,planner.h,protocol.c,report.c,stepper.c,stepper.h']"
Sonny Jeon,2013-12-29,"Merge branch 'dev' of https://github.com/grbl/grbl into dev

Conflicts:
	limits.c",['']
Sonny Jeon,2013-12-29,"Incomplete dev code push, but working. Lots of updates/fixes/improvements. Much still to polish.

- Ugh. Github just erased my list of improvements and changes due to a
conflict and forcing me to resolve it. Hope this goes through.

- Major stepper algorithm change. Trashed the old v0.9 edge
branch-style stepper algorithm. It’s fine, but it was susceptible to
aliasing noise when moving very slow or very fast. It also had a bit of
CPU overhead. It was written to solve a standing issue with v0.8
master, where it couldn’t generate a smooth acceleration abocve
10-15kHz. But, with new step segment buffer in v0.9c, it inadvertently
fixed the acceleration problem with v0.8 stepper algorithm. So, what
does it mean for you? Smoother stepper pulses and likely higher step
frequencies.

- Stepper algorithm now uses Timer1 and Timer2, instead of Timer0 and
Timer2. Timers 0 and 2 can be swapped if there is an issue.

- With the old v0.8 stepper algorithm, the STEP_DELAY_PULSE
configuration option is also back.

- NEW! Hard limit software debouncing. Grbl now employs the AVR’s
watchdog timer as a way to monitor the hard limit pins and checking
their states after a delay. This is a simple software debouncing
technique and may help alleviate some of the false trigger some users
have been complaining about. BUT, this won’t fix electric noise issues!

- Fixed an issue with the new homing cycle routine where it wasn’t
honoring the acceleration and axis speed limits depending on the homing
cycle mask. Now does. Also, updated the homing direction mask code to
be a little cleaner.

- Moved the main part of the homing cycle control and execution to
motion_control.c, where it fits better.

- Removed the STATE_INIT system state as it was redundant. Made the
system states into bitflags so multiple system states can be checked
via one if statement.

- Reorganized the power-up routine to work with the new system states.",['stepper.c']
Sonny Jeon,2013-12-30,"Incomplete push but working. Lots more stuff. More to come.

- NEW! An active multi-axis step smoothing algorithm that automatically
adjusts dependent on step frequency. This solves the long standing
issue to aliasing when moving with multiple axes. Similar in scheme to
Smoothieware, but more advanced in ensuring a more consistent CPU
overhead throughout all frequencies while maintaining step exactness.

- Switched from Timer2 to Timer0 for the Step Port Reset Interrupt.
Mainly to free up hardware PWM pins.

- Seperated the direction and step pin assignments, so we can now move
them to seperate ports. This means that we can more easily support 4+
axes in the future.

- Added a setting for inverting the limit pins, as so many users have
request. Better late than never.

- Bug fix related to EEPROM calls when in cycle. The EEPROM would kill
the stepper motion. Now protocol mandates that the system be either in
IDLE or ALARM to access or change any settings.

- Bug fix related to resuming the cycle after a spindle or dwell
command if auto start has been disabled. This fix is somewhat temporary
or more of a patch. Doesn’t work with a straight call-response
streaming protocol, but works fine with serial buffer pre-filling
streaming that most clients use.

- Renamed the pin_map.h to cpu_map.h to more accurately describe what
the file is.

- Pushed an auto start bug fix upon re-initialization.

- Much more polishing to do!","['config.h,cpu_map.h,defaults.h,limits.c,limits.h,main.c,motion_control.c,nuts_bolts.h,planner.c,protocol.c,report.c,settings.c,settings.h,stepper.c']"
Sonny Jeon,2013-12-30,"Merge pull request #201 from Protoneer/master

Made a few changes to make the code compatible with the Arduino IDE. Sorry about the tardiness!",['']
Sonny Jeon,2013-12-30,"Minor bug fixes: Homing travel calculations. Cycle resuming after spindle and dwell commands.

- Homing travel calculations fixed. It was computing the min travel
rather than max.

- Auto-start disable and pausing after spindle or dwell commands.
Related to plan_synchronize() function call. Now fixed, but still need
to work on the system state.

- Pushed a fix to make this branch more Arduino IDE compatible. Removed
extern call in nuts_bolts.c

- Updated the stepper configuration option of enabling or disabling the
new Adaptive Multi-Axis Step Smoothing Algorithm. Now works either way.

- Updated some copyright info.","['config.h,coolant_control.c,coolant_control.h,cpu_map.h,defaults.h,gcode.c,gcode.h,limits.c,limits.h,main.c,motion_control.c,motion_control.h,nuts_bolts.c,nuts_bolts.h,planner.c,planner.h,print.c,print.h,protocol.c,protocol.h,report.c,report.h,serial.c,serial.h,settings.c,settings.h,spindle_control.c,spindle_control.h,stepper.c,stepper.h']"
Rob Brown,2014-01-02,"PWM Spindle Control and Invert Spindle & Coolant Pins

PWM Spindle Control and Invert Spindle & Coolant Pins","['coolant_control.c,cpu_map.h,gcode.c,gcode.h,spindle_control.c,spindle_control.h']"
Sonny Jeon,2014-01-02,Update README.md,['README.md']
Sonny Jeon,2014-01-02,"Fix for M7/8/9 modal group checks. Updated AMASS frequency cutoffs and code cleaned.

- Updated Grbl version to 0.9c and build number.

- G-code parser was missing modal group violation checks for M7/8/9
commands. Added them.

- Updated the Adaptive Multi-Axis Step Smoothing (AMASS) cutoff
frequencies so that the trade between the 16-bit Timer1 accuracy and
the level step smoothing are somewhat better balanced. (Smoothing isn’t
free, but a higher accuracy timer would provide high cutoff
frequencies.)","['gcode.c,gcode.h,settings.h,stepper.c']"
Rob Brown,2014-01-03,"Update spindle_control.c

Updated spindle_control.c due to compile error.",['spindle_control.c']
Sonny Jeon,2014-01-02,"Merge pull request #318 from EliteEng/dev

PWM Spindle Control and Invert Spindle & Coolant Pins",['']
Rob Brown,2014-01-03,"Update to fix compile error

Update to fix compile error","['spindle_control.c,spindle_control.h']"
Sonny Jeon,2014-01-03,"Merge pull request #322 from EliteEng/dev

Update to fix compile error",['']
Sonny Jeon,2014-01-04,"Cleaned up variable spindle output (PWM). Code and config comments.

- Variable spindle speed output as a configuration option. Thanks
@EliteEng! When enabled, the Z-limit (D11) and spindle enable(D12) pins
switch to allow access to the hardware PWM output on pin D11.
Otherwise, everything should work as it does.

- Removed option for inverting the spindle and coolant enable pins.
This is a safety hazard, especially for the spindle. When Grbl
initializes, all pins are momentarily low until it finishes booting. If
an invert is enabled, this means the spindles can be energized briefly
during this time. If users need signal inversion, it’s recommended to
just wire in an inversion circuit instead.

- Cleared out references to spindle variable output in terms of step
signal. This isn’t complete and requires more deliberation before
installing.

- Cleared up and cleaned up some code and config comments.","['config.h,coolant_control.c,cpu_map.h,limits.c,spindle_control.c,spindle_control.h']"
Sonny Jeon,2014-01-04,"Variable spindle output. Resolved conflicts in last push.

Resolve conflicts.",['']
Sonny Jeon,2014-01-05,"New build info feature. (per @Analogreality request)

- New build info feature. Hidden command ‘$I’ will print the build info
for your Grbl firmware. Users may also write an identifying message
within it via ‘$I=‘ with up to 32 characters. (no more, or else it will
break).

- Adjusted the max number of startup lines to 3. Majority of people
will only need one.

- Fixed a compile error with spindle_control.c. A rogue #endif was
causing problems.","['config.h,protocol.c,report.c,report.h,settings.c,settings.h,spindle_control.c']"
Sonny Jeon,2014-01-05,Updates to some stepper algorithm commenting,"['protocol.c,stepper.c']"
Sonny Jeon,2014-01-10,"Lots of re-organization and cleaning-up. Some bug fixes.

- Added a new source and header file called system. These files contain
the system commands and variables, as well as all of the system headers
and standard libraries Grbl uses. Centralizing some of the code.

- Re-organized the include headers throughout the source code.

- ENABLE_M7 define was missing from config.h. Now there.

- SPINDLE_MAX_RPM and SPINDLE_MIN_RPM now defined in config.h. No
uncommenting to prevent user issues. Minimum spindle RPM now provides
the lower, near 0V, scale adjustment, i.e. some spindles can go really
slow so why use up our 256 voltage bins for them?

- Remove some persistent variables from coolant and spindle control.
They were redundant.

- Removed a VARIABLE_SPINDLE define in cpu_map.h that shouldn’t have
been there.

- Changed the DEFAULT_ARC_TOLERANCE to 0.002mm to improve arc tracing.
Before we had issues with performance, no longer.

- Fixed a bug with the hard limits and the software debounce feature
enabled. The invert limit pin setting wasn’t honored.

- Fixed a bug with the homing direction mask. Now is like it used to
be. At least for now.

- Re-organized main.c to serve as only as the reset/initialization
routine. Makes things a little bit clearer in terms of execution
procedures.

- Re-organized protocol.c as the overall master control unit for
execution procedures. Not quite there yet, but starting to make a
little more sense in how things are run.

- Removed updating of old settings records. So many new settings have
been added that it’s not worth adding the code to migrate old user
settings.

- Tweaked spindle_control.c a bit and made it more clear and consistent
with other parts of Grbl.

- Tweaked the stepper disable bit code in stepper.c. Requires less
flash memory.","['Makefile,config.h,coolant_control.c,coolant_control.h,cpu_map.h,defaults.h,gcode.c,gcode.h,limits.c,limits.h,main.c,motion_control.c,motion_control.h,nuts_bolts.c,nuts_bolts.h,planner.c,planner.h,print.c,protocol.c,protocol.h,report.c,serial.c,serial.h,settings.c,settings.h,spindle_control.c,spindle_control.h,stepper.c,stepper.h,system.c,system.h']"
Sonny Jeon,2014-01-14,Update README.md,['README.md']
Sonny Jeon,2014-01-15,Update README.md,['README.md']
michmerr,2014-01-22,Make sure that cycle_start state is set before simulating steps.,['simulator.c']
michmerr,2014-01-28,"Simplify setting of STATE_CYCLE and ISR interval.

Set sys.state to STATE_CYCLE directly instead of calling back to
st_wakeup().

Convert get_step_time() to a constant and rename it to ISR_INTERVAL.","['simulator.c,simulator.h']"
Jens Geisler,2014-01-28,"Merge pull request #337 from michmerr/edge

Make sure that cycle_start state is set before simulating steps.",['']
Sonny Jeon,2014-02-02,Update README.md,['README.md']
Robert Grzesek,2014-02-06,Initial line number reporting,"['gcode.c,limits.c,motion_control.c,motion_control.h,planner.c,planner.h,report.c']"
Robert Grzesek,2014-02-06,Made line number reporting optional via config.h,"['config.h,planner.c,planner.h,report.c']"
Sonny Jeon,2014-02-09,"Refactoring and lots of bug fixes. Updated homing cycle.

WARNING: There are still some bugs to be worked out. Please use caution
if you test this firmware.

- Feed holds work much better, but there are still some failure
conditions that need to be worked out. This is the being worked on
currently and a fix is planned to be pushed next.

- Homing cycle refactoring: Slight adjustment of the homing cycle to
allow for limit pins to be shared by different axes, as long as the
shared limit pins are not homed on the same cycle. Also, removed the
LOCATE_CYCLE portion of the homing cycle configuration. It was
redundant.

- Limit pin sharing: (See above). To clear up one or two limit pins for
other IO, limit pins can now be shared. For example, the Z-limit can be
shared with either X or Y limit pins, because it’s on a separate homing
cycle. Hard limit will still work exactly as before.

- Spindle pin output fixed. The pins weren’t getting initialized
correctly.

- Fixed a cycle issue where streaming was working almost like a single
block mode. This was caused by a problem with the spindle_run() and
coolant_run() commands and issuing an unintended planner buffer sync.

- Refactored the cycle_start, feed_hold, and other runtime routines
into the runtime command module, where they should be handled here
only. These were redundant.

- Moved some function calls around into more appropriate source code
modules.

- Fixed the reporting of spindle state.","['README.md,config.h,coolant_control.c,cpu_map.h,gcode.c,gcode.h,limits.c,limits.h,main.c,motion_control.c,motion_control.h,planner.c,planner.h,protocol.c,protocol.h,report.c,spindle_control.c,stepper.c,stepper.h,system.c']"
Sonny Jeon,2014-02-15,"Homing and feed hold bug fixes.

WARNING: Bugs may still exist. This branch is a work in progress and
will be pushed to the edge branch when at beta stability. Use at your
own risk.

- Homing freezing issue fixed. Had to do with the cycle stop flag being
set incorrectly after the homing cycles and before the pull-off
maneuver. Now resets the stepper motors before this can happen.

- Fixed an issue with a rare feed hold failure. Had to do with feed
hold ending exactly at the end of a block. The runtime protocol now
sets the QUEUED and IDLE states appropriately when this occurs. Still
need to clean this code up however, as it’s patched rather than written
well.

- Updated version build via $I command.

- Forgot to comment on a new feature for the last commit. Since steps
are integers and millimeters traveled are floats, the old step segment
generator ignored the step fraction differences in generating the
segment velocities. Didn’t see like it would be much of a big deal, but
there were instances that this would be a problem, especially for very
slow feed rates. The stepper algorithm now micro-adjusts the segment
velocities based on the step fractions not executed from the previous
segment. This ensures that Grbl generates the velocity profiles EXACTLY
and noticeably improves overall acceleration performance.","['limits.c,protocol.c,settings.h,spindle_control.c,stepper.c']"
Robert Grzesek,2014-02-18,"Merge commit 'cd71a90ce8a770e0030ed6c9bac805b89724e275' into dev

Conflicts:
	limits.c
	motion_control.c
	report.c",['']
Sonny Jeon,2014-02-19,Commenting updates. Minor bug fix with exit of soft limit event.,"['limits.c,motion_control.c,stepper.c,system.c,system.h']"
Sonny Jeon,2014-02-19,"Merge pull request #356 from robgrz/dev

Line number reporting as compile-time option.",['']
Sonny Jeon,2014-02-19,"Minor updates to line number feature.

- Changed line number integer types from unsigned to signed int32.
G-code mandates values cannot exceed 99999. Negative values can be used
to indicate certain modes.

- Homing cycle line number changed to -1, as an indicator.

- Fixed a reporting define for the spindle states that was broken by
the last merge.","['config.h,gcode.c,limits.c,motion_control.c,motion_control.h,planner.c,planner.h,report.c']"
Robert Grzesek,2014-02-25,Minimal probing cycle working.  Supports both G38.2 for error and G38.3 when no errors are desired.,"['cpu_map.h,gcode.c,gcode.h,motion_control.c,motion_control.h,report.c,report.h,stepper.c,system.c,system.h']"
Sonny Jeon,2014-02-26,"Added grbl planner Matlab simulator for test reference. Updated line number compile-time option.

- Added a grbl planner simulation tool that was written in Matlab and
Python. It was used to visualize the inner workings of the planner as a
program is streamed to it. The simulation assumes that the planner
buffer is empty, then filled, and kept filled. This is mainly for users
to see how the planner works.

- Updated some of the compile-time ifdefs when enabling line numbers.
The leaving the un-used line numbers in the function calls eats a
non-neglible amount of flash memory. So the new if-defs remove them.","['config.h,grbl_sim.m,matlab.gcode,matlab_convert.py,test.gcode,gcode.c,limits.c,motion_control.c,motion_control.h,planner.c,planner.h']"
Sonny Jeon,2014-02-27,"Merge pull request #362 from robgrz/dev

Minimal probing cycle working.  Supports both G38.2 for error and G38.3 ...",['']
Sonny Jeon,2014-02-27,"Probe cycle line numbers ifdef fixes to get it to compile.

- Updated some of the ifdefs when disabling line numbers feature.
Getting messy with this compile-time option. This will likely get
cleaned up later.

- This is just a push to get the new probing code to compile. Testing
and optimization of the code will soon follow and be pushed next.","['gcode.c,motion_control.c,motion_control.h']"
Sonny Jeon,2014-02-28,"G38.2 probe feature rough draft installed. Working but needs testing.

- G38.2 straight probe now supported. Rough draft. May be tweaked more
as testing ramps up.

- G38.2 requires at least one axis word. Multiple axis words work too.
When commanded, the probe cycle will move at the last ‘F’ feed rate
specified in a straight line.

- During a probe cycle: If the probe pin goes low (normal high), Grbl
will record that immediate position and engage a feed hold. Meaning
that the CNC machine will move a little past the probe switch point, so
keep federates low to stop sooner. Once stopped, Grbl will issue a move
to go back to the recorded probe trigger point.

- During a probe cycle: If the probe switch does not engage by the time
the machine has traveled to its target coordinates, Grbl will issue an
ALARM and the user will be forced to reset Grbl. (Currently G38.3 probe
without error isn’t supported, but would be easy to implement later.)

- After a successful probe, Grbl will send a feedback message
containing the recorded probe coordinates in the machine coordinate
system. This is as the g-code standard on probe parameters specifies.

- The recorded probe parameters are retained in Grbl memory and can be
viewed with the ‘$#’ print parameters command. Upon a power-cycle, not
a soft-reset, Grbl will re-zero these values.

- Moved ‘$#’ command to require IDLE or ALARM mode, because it accesses
EEPROM to fetch the coordinate system offsets.

- Updated the Grbl version to v0.9d.

- The probe cycle is subject to change upon testing or user-feedback.","['Makefile,cpu_map.h,gcode.c,gcode.h,limits.c,main.c,motion_control.c,motion_control.h,probe.c,probe.h,protocol.c,report.c,report.h,settings.h,stepper.c,system.c,system.h']"
henols,2014-03-07,"Probing command gets stuck in hold if several g38.2 are submitted
Ex.
G0 X0 Y0 Z0
G38.2 Z-10 F100
G10 L20 P0 Z0
G0 Z2
G38.2 Z-1 F50
G10 L20 P0 Z0
G0 Z2
G0 X0 Y0
G38.2 Z-1 F100
G0 Z2",['motion_control.c']
Sonny Jeon,2014-03-07,"Merge pull request #368 from henols/dev

Probing command gets stuck in hold if several g38.2 are submitted",['']
Martin Stingl,2014-03-10,Corrected units of default acceleration values,"['defaults.h,planner.c']"
Sonny Jeon,2014-03-10,"Merge pull request #372 from martinstingl/master

Corrected units of default acceleration values",['']
henols,2014-03-11,"Probing command gets stuck in hold if several g38.2 are submitted
Ex.
G0 X0 Y0 Z0
G38.2 Z-10 F100
G10 L20 P0 Z0
G0 Z2
G38.2 Z-1 F50
G10 L20 P0 Z0
G0 Z2
G0 X0 Y0
G38.2 Z-1 F100
G0 Z2",['motion_control.c']
Rob Brown,2014-03-11,Added Probing to Mega2560 and fixed Shapeoko2 compile error,"['cpu_map.h,defaults.h']"
Sonny Jeon,2014-03-13,"Merge pull request #373 from EliteEng/dev

Added Probing to Mega2560 and fixed Shapeoko2 compile error",['']
Sonny Jeon,2014-03-13,Comment corrections and function call update.,"['defaults.h,gcode.c']"
Sonny Jeon,2014-03-14,Update README.md,['README.md']
Paul Kaplan,2014-04-14,updated shapeoko2 defaults,['defaults.h']
Sonny Jeon,2014-04-28,"Merge pull request #391 from paulkaplan/master

Update Shapeoko 2 defaults",['']
Sonny Jeon,2014-05-18,MIT-licensing change,"['COPYING,Makefile,README.md,config.h,coolant_control.c,coolant_control.h,defaults.h,eeprom.h,gcode.c,gcode.h,limits.c,limits.h,main.c,motion_control.c,motion_control.h,nuts_bolts.c,nuts_bolts.h,pin_map.h,planner.c,print.c,print.h,protocol.c,protocol.h,report.c,report.h,serial.c,serial.h,settings.c,settings.h,spindle_control.c,spindle_control.h,stepper.c,stepper.h']"
Sonny Jeon,2014-05-18,MIT-licensing change.,"['planner.h,simple_stream.py,stream.py']"
Jens Geisler,2014-05-18,"Merge pull request #408 from chamnit/master

MIT-Licensing change.",['']
Sonny Jeon,2014-05-25,"Major g-code parser overhaul. 100%* compliant. Other related updates.

- Completely overhauled the g-code parser. It’s now 100%* compliant. (*
may have some bugs). Being compliant, here are some of the major
differences.

- SMALLER and JUST AS FAST! A number of optimizations were found that
sped things up and allowed for the more thorough error-checking to be
installed without a speed hit. Trimmed a lot of ‘fat’ in the parser and
still was able to make it significantly smaller than it was.

- No default feed rate setting! Removed completely! This doesn’t exist
in the g-code standard. So, it now errors out whenever it’s undefined
for motions that require it (G1/2/3/38.2).

- Any g-code parser error expunges the ENTIRE block. This means all
information is lost and not passed on to the running state. Before some
of the states would remain, which could have led to some problems.

- If the g-code block passes all of the error-checks, the g-code state
is updated and all motions are executed according to the order of
execution.

- Changes in spindle speed, when already running, will update the
output pin accordingly. This fixes a bug, where it wouldn’t update the
speed.

- Update g-code parser error reporting. Errors now return detailed
information of what exact went wrong. The most common errors return a
short text description. For less common errors, the parser reports
‘Invalid gcode ID:20’, where 20 is a error ID. A list of error code IDs
and their descriptions will be documented for user reference elsewhere
to save flash space.

- Other notable changes:

- Added a print integer routine for uint8 variables. This saved
significant flash space by switching from a heavier universal print
integer routine.

- Saved some flash space with our own short hypotenuse calculation

- Some arc computation flash and memory optimizations.","['config.h,coolant_control.c,coolant_control.h,defaults.h,gcode.c,gcode.h,motion_control.c,motion_control.h,nuts_bolts.c,nuts_bolts.h,print.c,print.h,probe.c,probe.h,protocol.c,report.c,report.h,settings.c,settings.h,spindle_control.c,spindle_control.h,system.c']"
Sonny Jeon,2014-05-29,Fixed spindle/coolant/dwell state check.,"['coolant_control.c,motion_control.c,settings.h,spindle_control.c']"
Sonny Jeon,2014-05-31,"Various minor g-code parser fixes.

- Updated the mantissa calculation that checks for non-integer values
and GXX.X commands that aren’t supported. There was a potential uint8
overflow issue.

- Fixed g-code parser bug related to not using the correct modal
struct. G10 P0 not selecting the current coordinate system when a
G55-59 is issued in the same line.

- Fixed g-code parser bug related to not using the correct modal
struct. Target position locations were not computed correctly when
G90/91 distance modes were changed in the same line. It was using the
previous state, rather than the current block.",['gcode.c']
Sonny Jeon,2014-05-31,"Arc error-checking update.

- Updated offset-mode arc error-checking to EMC2’s version: The old
NIST definition required the radii to the current location and target
location to differ no more than 0.002mm. This proved to be problematic
and probably why LinuxCNC(EMC2) updated it to be 0.005mm AND 0.1%
radius OR 0.5mm.","['gcode.c,settings.h']"
Krzysztof Foltman,2014-06-26,"Fixed atomic access to flags in sys.execute.

This seems to fix the bug that caused Grbl to hang during some operations,
especially jogging.","['limits.c,motion_control.c,nuts_bolts.h,probe.c,protocol.c,serial.c,system.c']"
Sonny Jeon,2014-07-02,"Minor bug fixes and updates. Line number tracking.

- Line number tracking was getting truncated at 255, since it was using
wrong variable type. Fixed it with a trunc().

- Increased the max number line allowed by Grbl to 9999999 from the
g-code standard 99999. The latter seems to be an arbitrary number, so
we are allowing larger ones for at least one known use case scenario.

- Created a new test directory to contain some testing g-code to proof
the firmware. Only got started with one test case so far. More will be
inserted as needed.

- Some other commenting updates to clarify certain aspects of the code.","['gcode.c,nuts_bolts.c,protocol.c,test.py']"
Sonny Jeon,2014-07-03,"G-code parser G0/G1 bug fix.

- Although stated as invalid in the NIST g-code standard, most g-code
parsers, including linuxcnc, allow G0 and G1 to be commanded without
axis words present. For example, something like ‘G1 F100.0’ to preset
the motion mode and feed rate without a motion commanded. Older CNC
controllers actually required this for feed rate settings. This update
should now allow this type of behavior.",['gcode.c']
Sonny Jeon,2014-07-03,"G18 reporting bug fix.

- G18 wasn’t getting reported back to the user correctly, even though
it has been set internally. Fixed the reporting code to reflect this
accurately.",['report.c']
Sonny Jeon,2014-07-03,Update README.md,['README.md']
ashelly,2014-07-04,Total rework of simulator for dev branch.  Create separate thread for interrupt processes.  Tick-accurate simulation of timers.  Non-blocking character input for running in realtime mode. Decouple hardware sim from grbl code as much as possible. Expanded command line options. Provisions for cross-platform solution.,"['.gitignore,config.h,coolant_control.c,gcode.c,serial.c,.gitignore,Makefile,interrupt.c,interrupt.h,io.c,io.h,wdt.h,config.h,eeprom.c,eeprom.h,kbhit.c,kbhit.h,main.c,planner_inject_accessors.c,platform.h,platform_LINUX.c,platform_WINDOWS.c,platform_linux.h,platform_windows.h,rename_execute_runtime.h,rename_main.h,serial.c,serial_hooks.h,sim.sh,simulator.c,simulator.h,spindle_control.c,stepper.c']"
ashelly,2014-07-04,reduce diffs with dev branch,"['coolant_control.c,gcode.c,serial.c,Makefile,kbhit.c,serial.c,spindle_control.c,stepper.c']"
Sonny Jeon,2014-07-04,"Realtime rate reporting. Updated decimal places.

- Added a new optional compile-time feature for ‘realtime’ (within
50ms) feed rate reporting. When querying for a status report, a new
data value will state the current operating rate. It’s only beta at the
moment and has some kinks to work out.

- Updated the code for printing floating point values to N decimal
places. Generalized the main floating point print code to accept a new
decimal places value and created a set of handler functions to print
certain floating point value types used in Grbl, like position, rates,
coordinate offsets, etc. All of these have different decimal
requirements and change when printed in mm or inches mode.

- Number of decimal places for the different value types can be
re-defined in config.h, but there shouldn’t be a need for this, as
these are physically limited.

- Removed the decimal places settings, as this was now obsoleted by the
new decimal places code.

- The new decimal places code also saves almost 300kB in flash space,
as it’s more efficient.","['config.h,eeprom.h,gcode.c,print.c,print.h,report.c,settings.c,settings.h,stepper.c,stepper.h']"
Adam Shelly,2014-07-04,minor tweaks for mingw.,"['Makefile,platform_WINDOWS.c']"
ashelly,2014-07-04,Don't need kbhit.h,['kbhit.h']
ashelly,2014-07-05,Update readme.md,['README.md']
ashelly,2014-07-05,formatting,['README.md']
Sonny Jeon,2014-07-05,"New G43.1/G49 gcodes. Not working yet!!

- Pushed this uncompleted code to merge a conflicting pull request.

- New G43.1 and G49 g-codes to be installed. The beginnings of it are
in place. These g-codes are intended to be used in conjunction with
probing and allow GUIs to set tool length offsets without Grbl needing
to store a tool table.

- G43.1 is defined as a dynamic tool length offset that is not stored
in memory. Rather, when commanded, these are applied to the work
coordinates until a reset or disabled by G49. This works much like G92.","['gcode.c,gcode.h']"
Sonny Jeon,2014-07-05,"Merge grbl-sim updates for v0.9.

- Removed some conflicting code in the main Grbl firmware source.

- Temporary patch for coolant and spindle control with streaming
applied.",['']
Sonny Jeon,2014-07-05,Merge branch 'ashelly-sim-update' into dev,['']
Sonny Jeon,2014-07-06,"G43.1/G49 tool length offset installed. Minor bug fix.

- Minor bug fix that caused G92.1 not to work. The mantissa of G92.1
was not computed correctly due to floating point round-off errors and
the use of trunc(). Fixed it by changing the computation with round().

- Installed tool length offsets with G43.1 and G49! True tool length
offsets via G43 are not supported, because these require us to store
tool data that we don’t have space for. But we’ve come up with a good
solution for users that need this. Instead we are strictly using the
dynamic version G43.1 via linuxcnc.org. Visit their website for more
details on the command.

- G43.1 operates by requiring an axis word and value to offset the
configured tool length axis, which can be configured for any axis
(default Z-axis) in config.h. For example, ```G43.1 Z0.5``` will offset
the work coordinates from Z0.0 to Z-0.5.

- G49 will cancel the last tool length offset value and reset it to
zero.

- Tweaked the ‘$#’ parameters report. `Probe` is now `PRB` and a new
value `TLO` states the tool length offset value.","['config.h,gcode.c,report.c,report.h']"
Sonny Jeon,2014-07-06,"Syntax fix for gcode.c

- Whoops! Missed a bracket and it wasn’t compiling. Now fixed.

- Updated the unsupported gcodes listed at the end of the gcode.c file.",['gcode.c']
Sonny Jeon,2014-07-06,"Merge pull request #436 from kfoltman/dev

Fixed atomic access to flags in sys.execute.",['']
Sonny Jeon,2014-07-06,"Isolate atomic bit flag for execution.

- Denoted bit_true_atomic only for sys.execute bit settings. All other
bit_true type calls are for local variables only and don’t need atomic
access. Still looking into other ways of setting these flags without
requiring atomic access, but this is a patch for now.","['gcode.c,limits.c,motion_control.c,nuts_bolts.h,protocol.c,serial.c,stepper.c']"
Sonny Jeon,2014-07-06,"Version and build update.

- Incremented from v0.9e to v0.9f due to the new g-codes, velocity
reporting option, decimal printing refactoring, grbl-sim updates, and
G0/G1 bug fix.

- Settings version was also incremented since settings.decimal_places
is now gone.",['settings.h']
Sonny Jeon,2014-07-09,Added test g-code programs.,"['SO2_helloworld.nc,braid_cut2d.nc']"
Sonny Jeon,2014-07-09,"Merge branch 'dev' into edge

Conflicts:
	sim/simulator.c
	sim/simulator.h",['']
ashelly,2014-07-10,"Bug fixes for timers, added some wdt support for limit debounce.

- Typo in timer def,
- Handle 8 bit timers correctly,
- Don't skip TOP count in CTC mode
- added SREG for atomic bit operations","['config.h,Makefile,interrupt.c,interrupt.h,io.h,wdt.h,simulator.c']"
ashelly,2014-07-10,Restore changes made only for testing.,"['config.h,Makefile']"
Sonny Jeon,2014-07-11,"Merge pull request #441 from ashelly/edge-simfix

Fixes for simulator in alternate configurations.",['']
Sonny Jeon,2014-07-11,Updated README,"['README.md,gcode.c']"
Sonny Jeon,2014-07-12,Updated README,['README.md']
Sonny Jeon,2014-07-12,Update README.md,['README.md']
Sonny Jeon,2014-07-12,Update README.md,['README.md']
Sonny Jeon,2014-07-12,Update README.md,['README.md']
Sonny Jeon,2014-07-17,Update README.md,['README.md']
Sonny Jeon,2014-07-26,"Settings refactoring. Bug fixes. Misc new features.

This is likely the last major change to the v0.9 code base before push
to master. Only two minor things remain on the agenda (CoreXY support,
force clear EEPROM, and an extremely low federate bug).

- NEW! Grbl is now compile-able and may be flashed directly through the
Arduino IDE. Only minor changes were required for this compatibility.
See the Wiki to learn how to do it.

- New status reporting mask to turn on and off what Grbl sends back.
This includes machine coordinates, work coordinates, serial RX buffer
usage, and planner buffer usage. Expandable to more information on user
request, but that’s it for now.

- Settings have been completely renumbered to allow for future new
settings to be installed without having to constantly reshuffle and
renumber all of the settings every time.

- All settings masks have been standardized to mean bit 0 = X, bit 1 =
Y, and bit 2 = Z, to reduce confusion on how they work. The invert
masks used by the internal Grbl system were updated to accommodate this
change as well.

- New invert probe pin setting, which does what it sounds like.

- Fixed a probing cycle bug, where it would freeze intermittently, and
removed some redundant code.

- Homing may now be set to the origin wherever the limit switches are.
Traditionally machine coordinates should always be in negative space,
but when limit switches on are on the opposite side, the machine
coordinate would be set to -max_travel for the axis. Now you can always
make it [0,0,0] via a compile-time option in config.h. (Soft limits
routine was updated to account for this as well.)

 - Probe coordinate message immediately after a probing cycle may now
be turned off via a compile-time option in config.h. By default the
probing location is always reported.

- Reduced the N_ARC_CORRECTION default value to reflect the changes in
how circles are generated by an arc tolerance, rather than a fixed arc
segment setting.

- Increased the incoming line buffer limit from 70 to 80 characters.
Had some extra memory space to invest into this.

- Fixed a bug where tool number T was not being tracked and reported
correctly.

- Added a print free memory function for debugging purposes. Not used
otherwise.

- Realtime rate report should now work during feed holds, but it hasn’t
been tested yet.

- Updated the streaming scripts with MIT-license and added the simple
streaming to the main stream.py script to allow for settings to be sent.

- Some minor code refactoring to improve flash efficiency. Reduced the
flash by several hundred KB, which was re-invested in some of these new
features.","['README.md,config.h,defaults.h,gcode.c,gcode.h,limits.c,motion_control.c,nuts_bolts.c,nuts_bolts.h,planner.c,planner.h,print.c,print.h,probe.c,protocol.c,protocol.h,report.c,console,proxy,stream,stream.rb,trapezoid_simulator.rb,simple_stream.py,stream.py,serial.c,serial.h,settings.c,settings.h,spindle_control.c,stepper.c,system.c,8x_gear_test.nc,braid_cut2d.nc,kikigey89.settings']"
Sonny Jeon,2014-07-26,"Updates to allow Arduino IDE direct compiling.

- Only minor changes were required to make the Arduino IDE compile all
of the Grbl’s source code (correctly using the C-compiler). Tested in
Windows and Mac and with the normal USB upload and with a programmer.","['README.md,serial.c']"
Sonny Jeon,2014-07-27,"Added build info feedback in help

- `$I` prints the Grbl build info and version number. NOTE: `$I=xxx`
stores an additional 30 character string into EEPROM, which will be
printed with the build info the next time it’s run. This is for
identification purposes for users that have more than one system using
Grbl.",['report.c']
Sonny Jeon,2014-07-28,Update README.md,['README.md']
Sonny Jeon,2014-07-28,Compile in Atmel Studio fix.,['config.h']
Sonny Jeon,2014-08-01,"Minor bug fixes.

- Bug fix for step and direction invert masks not immediately being in
effect. Now regenerates the masks when a user changes this setting.

- Bug fix for probing cycle. G-code standard mandates that there is an
error if the probe is already triggered when the cycle is commanded.
However, Grbl may have motions to pull off a previous probing cycle in
queue and can falsely lead to errors. To fix this, the triggered check
is performed within the probing cycle itself, right after the planner
buffer is synced. If there is an error, it will now alarm out as a
probe fail.","['gcode.c,motion_control.c,nuts_bolts.h,report.h,settings.c,settings.h,stepper.c,stepper.h,braid_cut2d.nc']"
Sonny Jeon,2014-08-01,Update README.md,['README.md']
Sonny Jeon,2014-08-03,"Probing cycle and view build info bug fixes.

- Probing cycle would drop into a QUEUED state, if multiple G38.2 are
sent. It would not honor the auto cycle start flags. To fix, the auto
cycle start state is saved at the beginning of the probing cycle and
restored at the end, since the feed hold it uses to stop a triggered
probe will disable the auto start flag. For now it’s a patch, rather
than a permanent fix.

- protocol_buffer_synchronize() also has a failure case. Auto cycle
start does not get executed when the system is waiting in here, so if
it’s in a QUEUED state already, it won’t resume. Patched here, but not
fully resolved.

- Fixed a problem with the “view build info” command. The EEPROM write
would do weird things and corrupt the EEPROM. Not sure exactly what
caused it, but it’s likely a compiler problem with an improperly
defined EEPROM address. It didn’t have enough room to store a full
string. To fix, the build info EEPROM range was increased and the max
number of STARTUP_BLOCKS was reduced to 2 from 3.

- Lastly, when a $I view build info is used for the first time, it
would normally show an EEPROM read error, since it wasn’t cleared or
wasn’t therein the first place. It will now not show that error. A
patch rather than a permanent fix again.","['config.h,motion_control.c,protocol.c,settings.c,settings.h,system.c']"
Sonny Jeon,2014-08-03,Update README.md,['README.md']
Sonny Jeon,2014-08-04,"Fixed probe position sync error.

- Restored probe position syncing. Had removed a pull-off motion after
a probe cycle completes, but ended up de-synchronizing the g-code
parser and probing cycle positions. Putting the pull-off motion back
fixed the problem.",['motion_control.c']
Sonny Jeon,2014-08-04,Update README.md,['README.md']
Sonny Jeon,2014-08-04,"Allow '$$' in check mode.

- Now allows the ‘$$’ view Grbl settings while in check mode

- Updated the version build date","['settings.h,system.c']"
Sonny Jeon,2014-08-05,"Fixed bug related to very very low feed rates.

- A very very low feed rate command like `G1 X100 F0.01`  would cause
some floating-point round-off error and freeze Grbl into an infinite
loop. To fix it, introduced a MINIMUM_FEED_RATE parameter in config.h
to ensure motions always complete.

- MINIMUM_FEED_RATE is set at 1.0 mm/min by default. It’s recommended
that no rates are below this value, but 0.1mm/min may be ok in some
situations.","['config.h,planner.c,settings.h,stepper.c']"
Sonny Jeon,2014-08-05,Update README.md,['README.md']
Sonny Jeon,2014-08-07,Updated licensing,"['COPYING,README.md,config.h,coolant_control.c,coolant_control.h,cpu_map.h,defaults.h,commands.txt,pinmapping.txt,resources.txt,structure.txt,eeprom.h,gcode.c,gcode.h,limits.c,limits.h,main.c,motion_control.c,motion_control.h,nuts_bolts.c,nuts_bolts.h,planner.c,planner.h,print.c,print.h,probe.c,probe.h,protocol.c,protocol.h,report.c,report.h,serial.c,serial.h,settings.c,settings.h,spindle_control.c,spindle_control.h,stepper.c,stepper.h,system.c,system.h,grbl_sim.m,matlab.gcode,matlab_convert.py,test.gcode']"
Sonny Jeon,2014-08-07,Moved Grbl Sim to its own repo.,"['.gitignore,HelloWorld.nc,Makefile,README.md,interrupt.c,interrupt.h,io.c,io.h,pgmspace.c,pgmspace.h,sleep.h,wdt.h,config.h,eeprom.c,eeprom.h,gnuplot.plt,main.c,planner_inject_accessors.c,platform.h,platform_LINUX.c,platform_WINDOWS.c,platform_linux.h,platform_windows.h,rename_main.h,serial.c,serial_hooks.h,sim.bat,sim.sh,simulator.c,simulator.h,delay.c,delay.h,floatunsisf.c']"
Sonny Jeon,2014-08-08,XON/XOFF flow control variable typo.,['serial.c']
Sonny Jeon,2014-08-13,"G28/30 bug fix. Block '$$' during cycle. SO2 defaults.

- A G28/30 bug would cause it to move to machine coordinate [0,0,0] if
no axis words were sent. It was a typo in the new g-code parser. Fixed
and slightly re-written to be more consistent with the program flow.

- Updated the ShapeOko2 defaults based on testing on the real machine.
A little conservative, but it might change again after some more
testing.

- Now blocks ‘$$’ command during a motion, because the printout takes
too long and can starve the segment buffer.","['defaults.h,gcode.c,serial.c,settings.h,system.c']"
Sonny Jeon,2014-08-13,Update README.md,['README.md']
Sonny Jeon,2014-08-13,"Added EEPROM force clear.

- When updating from v0.8, the settings will wipe the startup lines and
build info locations so that it won’t use whatever is already there in
the EEPROM. Parameters (coord offsets) are retained. They should be ok
during an upgrade.","['settings.c,settings.h']"
Sonny Jeon,2014-08-17,"Final minor updates for master release.

- Updated ShapeOko2 defaults based on machine testing of the basic
model provided by Inventables. (or close to it.) Should be pretty
conservative but much faster than before. For example, X and Y axes are
set at (10x) faster at 5000mm/min. It can run much faster than this,
but this seems like a safe speed for everyone.

- Updated README for master release.

- Added some new settings methods for clearing the EEPROM when changing
versions. Needs some more work, but it should ok for master release.
Should work on it more for the next version.","['README.md,defaults.h,settings.c,settings.h']"
Sonny Jeon,2014-08-17,Merge branch 'master' into edge,['']
Sonny Jeon,2014-08-17,Updated bitly link to master firmware,['README.md']
Sonny Jeon,2014-08-17,Update README.md,['README.md']
Sonny Jeon,2014-08-18,Update README.md,['README.md']
Sonny Jeon,2014-08-22,WPos report bug fix when MPos disabled.,"['Makefile,report.c']"
Sonny Jeon,2014-08-22,Updated build date.,"['report.c,settings.h']"
Sonny Jeon,2014-08-22,Update README.md,['README.md']
BinaryConstruct,2014-08-24,Add defaults for OX CNC,['defaults.h']
Sonny Jeon,2014-08-24,"Merge pull request #472 from BinaryConstruct/edge

Add defaults for OX CNC",['']
Sonny Jeon,2014-09-05,"Merge branch 'master' of https://github.com/grbl/grbl

Conflicts:
	README.md","['README.md,config.h,cpu_map.h,defaults.h,settings.c,settings.h,HSM_test.nc,braid_cut2d.nc']"
Sonny Jeon,2014-09-05,Updated README.md,['']
Sonny Jeon,2014-09-05,"Minor bug fix and CPU pin map update.

- Sometime I HATE github. This push is just here to be able to describe
the last two pushes today that had a merging conflict and lost all of
the commit comments before.

- Setting $10 would cause $11 to be the same value. Missed a break
statement in the switch-case. Oops! Now fixed.

- CPU pin map for the future versions of Grbl introduced, but not yet
finalized. Still working on it and it’s subject to change.

- Added a new high-speed machining test g-code routine written by Todd
Fleming. Mills a pocket at 15,000mm/min. Do not use when connected to
your machine! You’ve been warned!",['cpu_map.h']
ashelly,2014-09-08,Alarm if limits engaged on homing,['motion_control.c']
Elijah Insua,2014-09-14,add MOTION_MODE_PROBE_NO_ERROR,['gcode.h']
Elijah Insua,2014-09-14,"install G38.{3,4,5}","['gcode.c,motion_control.c,probe.c,system.h']"
Elijah Insua,2014-09-14,utilize MOTION_MODE_PROBE_NO_ERROR,['gcode.c']
Markus Schulz,2014-09-17,If variable spindle is defined print S value via $G command.,['report.c']
ashelly,2014-09-17,No false alarm if other bits in port are set.,['motion_control.c']
Sonny Jeon,2014-09-20,"Minor settings number overflow bug fix.

- The `x` in `$x=val` would overflow when a value larger than 255 was
entered and passed to Grbl. This resulted with unintended parameters
being set by the overflow value. To fix, simply check for values larger
than 255 and error out.",['system.c']
Sonny Jeon,2014-09-20,"Merge pull request #493 from alpharesearch/edge

If variable spindle is defined print S value via $G command.",['']
Sonny Jeon,2014-09-20,"Merge pull request #494 from ashelly/homing-alarm

Alarm if limits engaged on homing start.",['']
Sonny Jeon,2014-09-20,Edit hard limit check at start of homing cycle,"['gcode.h,limits.c,motion_control.c']"
Elijah Insua,2014-09-22,cleanup global var and push probe mode into probe_get_state,"['gcode.c,gcode.h,motion_control.c,motion_control.h,probe.c,probe.h,system.h']"
Elijah Insua,2014-09-22,test only for & PROBE_ACTIVE,['motion_control.c']
Elijah Insua,2014-09-22,bump mantissa to uint16_t to enable G38.5,['gcode.c']
Elijah Insua,2014-09-22,add/install probe_errors_enabled in mc_probe_cycle,"['motion_control.c,probe.c,probe.h']"
Elijah Insua,2014-09-22,"hop over probe pull-off sequence after probe miss

and while ""no errors"" is enabled (G38.3, G38.5)",['motion_control.c']
Elijah Insua,2014-09-22,"add probe_finalize to keep things DRY

this allows the PRB report to be valid when in ""no errors"" mode and the probe fails","['motion_control.c,probe.c,probe.h']"
Elijah Insua,2014-09-22,report probe_succeeded with probe status,"['motion_control.c,probe.c,probe.h,report.c,system.h']"
Sonny Jeon,2014-09-25,"Merge pull request #491 from tmpvar/G38.2+

G38.2+",['']
Sonny Jeon,2014-10-01,"Updated variable spindle and new probing. Minor bug fixes.

- Minor bug fix for variable spindle PWM output. Values smaller than
the minimum RPM for the spindle would overflow the PWM value. Thanks
Rob!

- Created an optional minimum spindle PWM low-mark value as a
compile-time option. This is for special circumstances when the PWM has
to be at a certain level to be read by the spindle controller.

- Refactored the new probing commands (G38.3, G38.4, G38.5) code to
work better with the rest of Grbl’s systems.

- Refactored mc_probe() and mc_arc() to accept the mode of the command,
i.e. clockwise vs counter, toward vs away, etc. This is to make these
functions independent of gcode state variables.

- Removed the pull off motion in the probing cycle. This is not an
official operation and was added for user simplicity, but wrongly did
so. So bye bye.

- Created a configure probe invert mask function to handle the
different probe pin setting and probing cycle modes with a single mask.

 - Minor bug fix with reporting motion modes via $G. G38.2 wasn’t
showing up. It now does, along with the other new probing commands.

- Refactored some of the new pin configurations for the future of Grbl.

-","['config.h,cpu_map.h,gcode.c,gcode.h,motion_control.c,motion_control.h,probe.c,probe.h,report.c,spindle_control.c,system.h']"
Sonny Jeon,2014-10-28,Update README.md,['README.md']
Sonny Jeon,2014-10-28,Update README.md,['README.md']
Sonny Jeon,2014-10-29,Update README.md,['README.md']
Sonny Jeon,2014-11-05,Update README.md,['README.md']
Sonny Jeon,2015-01-14,"Lot of refactoring for the future. CoreXY support.

- Rudimentary CoreXY kinematics support. Didn’t test, but homing and
feed holds should work. See config.h. Please report successes and
issues as we find bugs.

- G40 (disable cutter comp) is now “supported”. Meaning that Grbl will
no longer issue an error when typically sent in g-code program header.

- Refactored coolant and spindle state setting into separate functions
for future features.

- Configuration option for fixing homing behavior when there are two
limit switches on the same axis sharing an input pin.

- Created a new “grbl.h” that will eventually be used as the main
include file for Grbl. Also will help simply uploading through the
Arduino IDE

- Separated out the alarms execution flags from the realtime (used be
called runtime) execution flag variable. Now reports exactly what
caused the alarm. Expandable for new alarms later on.

- Refactored the homing cycle to support CoreXY.

- Applied @EliteEng updates to Mega2560 support. Some pins were
reconfigured.

- Created a central step to position and vice versa function. Needed
for non-traditional cartesian machines. Should make it easier later.

- Removed the new CPU map for the Uno. No longer going to used. There
will be only one configuration to keep things uniform.","['config.h,coolant_control.c,coolant_control.h,cpu_map.h,defaults.h,gcode.c,gcode.h,grbl.h,limits.c,limits.h,main.c,motion_control.c,motion_control.h,nuts_bolts.c,nuts_bolts.h,planner.c,planner.h,print.c,print.h,probe.c,probe.h,protocol.c,protocol.h,report.c,report.h,serial.c,serial.h,settings.c,settings.h,spindle_control.c,spindle_control.h,stepper.c,stepper.h,system.c,system.h,8x_gear_test.nc,HSM_test.nc,SO2_helloworld.nc,braid_cut2d.nc,grbl_sim.m,matlab.gcode,matlab_convert.py,test.gcode,kikigey89.settings,test.py']"
Sonny Jeon,2015-01-17,"Fully configurable pins for NO or NC switches.

- All pins, which include limits, control command, and probe pins, can
now all be configured to trigger as active-low or active-high and
whether the pin has its internal pull-up resistor enabled. This should
allow for just about all types of NO and NC switch configurations.

- The probe pin invert setting hasn’t been added to the Grbl settings,
like the others, and will have to wait until v1.0. But for now, it’s
available as a compile-time option in config.h.

- Fixed a variable spindle bug.","['config.h,cpu_map.h,defaults.h,limits.c,main.c,planner.c,probe.c,settings.h,spindle_control.c,system.c']"
Sonny Jeon,2015-02-04,"Rare planner bug fix and added simulator defaults.

- Planner bug when moving along a diagonal back and forth on the same
path. Rare for the fact that most CAM programs don’t program this type
of motion, neither does jogging. Fixed in this update.

- Added grbl_sim defaults for testing purposes.","['defaults.h,planner.c,settings.h,system.c']"
Sonny Jeon,2015-02-06,"Limit/control pin state reporting option

- As a setup feature, users can compile-in input pin status reporting.
Doesn’t do anything special, just prints the binary for the port. 0’s
and 1’s indicate low and high signals on the pins. It’s a bit cryptic
right now, but it’s just a start.

- Added a max step rate check when writing step/mm and max rate
settings. Should help avoid people misdiagnosing problems associated
with going over the 30kHz step rate limit. Right now not enabled. Takes
up over 100k of flash. Need that room for other things right now.","['config.h,report.c,report.h,settings.c']"
Sonny Jeon,2015-02-10,"Bug fix for certain motions. Re-org of includes.

- Critical bug fix for diagonal motions that continue on the same
direction or return in the exact opposite direction. This issue could
cause Grbl to crash intermittently due to a numerical round-off error.
Grbl versions prior to v0.9g shouldn’t have this issue.

- Reorganized all of the includes used by Grbl. Centralized it into a
single “grbl.h” include. This will help simplify the compiling and
uploading process through the Arduino IDE.

- Added an example .INO file for users to simply open and run when
compiling and uploading through the IDE. More to come later.","['config.h,coolant_control.c,Grbl.ino,gcode.c,grbl.h,limits.c,main.c,motion_control.c,motion_control.h,nuts_bolts.c,planner.c,print.c,probe.c,protocol.c,report.c,serial.c,settings.c,settings.h,spindle_control.c,stepper.c,system.c,system.h']"
Sonny Jeon,2015-02-10,"File re-organization. New Makefile.

- Re-organized source code files into a ‘grbl’ directory to lessen one
step in compiling Grbl through the Arduino IDE.

- Added an ‘examples’ directory with an upload .INO sketch to further
simplify compiling and uploading Grbl via the Arduino IDE.

- Updated the Makefile with regard to the source code no longer being
in the root directory. All files generated by compiling is placed in a
separate ‘build’ directory to keep things tidy. The makefile should
operate in the same way as it did before.","['Makefile,README.md,Grbl.ino,config.h,coolant_control.c,coolant_control.h,cpu_map.h,defaults.h,eeprom.c,eeprom.h,grblUpload.ino,license.txt,gcode.c,gcode.h,grbl.h,limits.c,limits.h,main.c,motion_control.c,motion_control.h,nuts_bolts.c,nuts_bolts.h,planner.c,planner.h,print.c,print.h,probe.c,probe.h,protocol.c,protocol.h,report.c,report.h,serial.c,serial.h,settings.c,settings.h,spindle_control.c,spindle_control.h,stepper.c,stepper.h,system.c,system.h']"
Sonny Jeon,2015-02-10,"Git fix for empty directory. Makefile updated.

- ‘build’ directory was not being synced by git because it was empty.
Added a .gitignore file in the ‘build’ directory to force git to sync
it but keep it empty.

- Updated the Makefile to not erase the .gitignore.","['Makefile,.gitignore']"
Sonny Jeon,2015-02-11,"Overhauled state machine. New safety door feature.

- Overhauled the state machine and cleaned up its overall operation.
This involved creating a new ‘suspend’ state for what all external
commands, except real-time commands, are ignored. All hold type states
enter this suspend state.

- Removed ‘auto cycle start’ setting from Grbl. This was not used by
users in its intended way and is somewhat redundant, as GUI manage the
cycle start by streaming. It also muddled up how Grbl should interpret
how and when to execute a g-code block. Removing it made everything
much much simpler.

- Fixed a program pause bug when used with other buffer_sync commands.

- New safety door feature for OEMs. Immediately forces a feed hold and
then de-energizes the machine. Resuming is blocked until the door is
closed. When it is, it re-energizes the system and then resumes on the
normal toolpath.

- Safety door input pin is optional and uses the feed hold pin on A1.
Enabled by config.h define.

- Spindle and coolant re-energizing upon a safety door resume has a
programmable delay time to allow for complete spin up to rpm and
turning on the coolant before resuming motion.

- Safety door-style feed holds can be used instead of regular feed hold
(doesn’t de-energize the machine) with a ‘@‘ character. If the safety
door input pin is not enabled, the system can be resumed at any time.","['config.h,cpu_map.h,gcode.c,limits.c,main.c,motion_control.c,probe.c,protocol.c,report.c,report.h,serial.c,settings.c,settings.h,stepper.c,system.c,system.h']"
Rob Brown,2015-02-13,Safety Door Update for Mega2560,['cpu_map.h']
Martin Poelstra,2015-02-13,Fix EXEC_ALARM_* flags: soft limit would lead to hard limit error.,['system.h']
Martin Poelstra,2015-02-13,"Fix generating header dependencies, merge with 'normal' compile, force recompile when files are removed.",['Makefile']
Martin Poelstra,2015-02-13,"Fix function signature of print_uint32_base10(), necessary for compiling simulator.",['print.c']
Sonny Jeon,2015-02-13,"Merge pull request #594 from poelstra/fix_sim_build

Fix function signature of print_uint32_base10(), necessary for compiling simulator.",['']
Sonny Jeon,2015-02-13,"Merge pull request #592 from poelstra/fix_softlimit

Fix EXEC_ALARM_* flags: soft limit would lead to hard limit error.",['']
Sonny Jeon,2015-02-13,"Merge pull request #591 from EliteEng/edge

Safety Door Update for Mega2560",['']
Sonny Jeon,2015-02-13,Doc re-org. New Grbl Logos!,"['Grbl Logo 150px.png,Grbl Logo 320px.png,Grbl Logo 640px.png,Grbl Logo.pdf,Grbl Logo.svg,simple_stream.py,stream.py,config.h']"
Sonny Jeon,2015-02-13,Update README.md,['README.md']
Sonny Jeon,2015-02-13,Updated README with new logo sized for github.,"['README.md,Grbl Logo 250px.png']"
Sonny Jeon,2015-02-13,"Merge pull request #593 from poelstra/fix_makefile_deps

Fix generating header dependencies, merge with 'normal' compile, force r...",['']
Sonny Jeon,2015-02-15,"Homing alarm upon no switch. Licensing update.

- Homing cycle failure reports alarm feedback when the homing cycle is
exited via a reset, interrupted by a safety door switch, or does not
find the limit switch.

- Homing cycle bug fix when not finding the limit switch. It would just
idle before, but now will exit with an alarm.

- Licensing update. Corrected licensing according to lawyer
recommendations. Removed references to other Grbl versions.","['COPYING,config.h,coolant_control.c,coolant_control.h,cpu_map.h,defaults.h,eeprom.h,gcode.c,gcode.h,grbl.h,limits.c,limits.h,main.c,motion_control.c,motion_control.h,nuts_bolts.c,nuts_bolts.h,planner.c,planner.h,print.c,print.h,probe.c,probe.h,protocol.c,protocol.h,report.c,report.h,serial.c,serial.h,settings.c,settings.h,spindle_control.c,spindle_control.h,stepper.c,stepper.h,system.c,system.h']"
Sonny Jeon,2015-02-15,"Improved homing limit search handling.

- Instead of a single overall max travel for a search distance for the
homing limit switches. The homing cycle now applies the max travel of
each axis to the search target. Generally makes more sense this way and
saved more than a 100bytes of flash too.","['README.md,grbl.h,limits.c']"
Sonny Jeon,2015-02-23,"New configuration options.

- New configuration option at compile-time:
 - Force alarm upon power-up or hard reset. When homing is enabled,
this is already the default behavior. This simply forces this all of
the time.
 - GUI reporting mode. Removes most human-readable strings that GUIs
don’t need. This saves nearly 2KB in flash space that can be used for
other features.
 - Hard limit force state check: In the hard limit pin change ISR, Grbl
by default sets the hard limit alarm upon any pin change to guarantee
the alarm is set. If this option is set, it’ll check the state within
the ISR, but can’t guarantee the pin will be read correctly if the
switch is bouncing. This option makes hard limit behavior a little less
annoying if you have a good buffered switch circuit that removes
bouncing and electronic noise.

- Software debounce bug fix. It was reading the pin incorrectly for the
setting.

- Re-factored some of the ‘$’ settings code.","['config.h,grbl.h,limits.c,main.c,report.c,system.c']"
Sonny Jeon,2015-02-23,"Fixed config.h to Grbl release defaults.

- REPORT_GUI_MODE was accidentally enabled, when it shouldn’t have.",['config.h']
Sonny Jeon,2015-02-25,"G91.1 support. Fixed a config.h option.

- G91.1 support added. This g-code sets the arc IJK distance mode to
incremental, which is the default already. This simply  helps reduce
parsing errors with certain CAM programs that output this command.

- Max step rate checks weren’t being compiled in if the option was
enabled. Fixed now.

- Alarm codes were not displaying correctly when GUI reporting mode was
enabled. Due to unsigned int problem. Changed codes to positive values
since they aren’t shared with other codes.","['README.md,gcode.c,gcode.h,report.c,report.h,settings.c']"
Sonny Jeon,2015-03-04,"Arduino IDE compatibility and minor homing fixes

- Added an include in the right spot, if a user tries to compile and
upload Grbl through the Arduino IDE with the old way.

- Fixed a minor bug with homing max travel calculations. It was causing
simultaneous axes homing to move slow than it did before.","['README.md,config.h,grbl.h,limits.c,protocol.c']"
Sonny Jeon,2015-03-07,"Another homing cycle fix.

- The homing cycle should be working again. Reverted it back to how it
was about a month ago before I started to fiddle with it. Turns out
that my past self knew what he was doing.","['grbl.h,limits.c']"
Sungeun Jeon,2015-03-14,"Cleaned-up limit pin reporting and comments.

- Cleaned up the limit pin state reporting option to display only the
state per axis, rather than the whole port. It’s organized by an XYZ
order, 0(low)-1(high), and generally looks like `Lim:001`.

- Separated the control pin state reporting from limit state reporting
as a new compile option. This stayed the same in terms of showing the
entire port in binary, since it’s not anticipated that this will be
used much, if at all.

- Updated some of the gcode source comments regarding supported g-codes.","['config.h,gcode.c,gcode.h,grbl.h,report.c']"
Sungeun Jeon,2015-03-15,"Updated README.

- Also altered the G38.X reporting to save some bytes.","['README.md,gcode.h,grbl.h,report.c']"
Sungeun Jeon,2015-03-15,Merge branch 'edge',['']
Sonny Jeon,2015-03-15,Create README.md,['README.md']
Sungeun Jeon,2015-03-15,Updated README,['README.md']
Sonny Jeon,2015-03-16,Update README.md,['README.md']
Sonny Jeon,2015-03-26,Update README.md,['README.md']
Sonny Jeon,2015-03-27,Update README.md,['README.md']
Sungeun Jeon,2015-03-27,"New compile options and inverse time bug fix.

- Apparently inverse time motion were not working for quite some time.
Goes to show how many people actually use it. The calculation was bad
and is now fixed in this update. It should now work correctly.

- `;` comment type is now supported. This is standard on LinuxCNC and
common on 3d printers. It was previously not supported due to not
existing in the NIST standard, which is out-dated.

- New compile-option to ECHO the line received. This should help users
experiencing very weird problems and help diagnose if there is
something amiss in the communication to Grbl.

- New compile-option to use the spindle direction pin D13 as a spindle
enable pin with PWM spindle speed on D11. This feature has been
requested often from the laser cutter community. Since spindle
direction isn’t really of much use, it seemed like good good trade.
Note that M4 spindle enable counter-clock-wise support is removed for
obvious reasons, while M3 and M5 still work.","['config.h,cpu_map.h,gcode.c,grbl.h,planner.c,protocol.c,report.c,report.h,spindle_control.c']"
Sungeun Jeon,2015-03-27,"Compile-option for inverting spindle enable.

- Installed a compile-option for inverting the spindle enable pin for
certain electronics boards users have reported needing this.","['config.h,spindle_control.c']"
Sonny Jeon,2015-03-29,"Commit history, logo license, full-arc fix.

- Commit history added to repo, as an easier way for people to see view
the changes over time.

- Grbl logo copyright license added. All rights reserved with regards
to the Grbl logo.

- G2/3 full circles would sometime not execute. The problem was due to
numerical round-off of a trig calculation. Added a machine epsilon
define to help detect and correct for this problem. Tested and should
not effect general operation of arcs.","['README.md,commit_log_v0.7.txt,commit_log_v0.8c.txt,commit_log_v0.9g.txt,commit_log_v0.9i.txt,COPYING,Grbl Logo 150px.png,Grbl Logo 250px.png,Grbl Logo 320px.png,Grbl Logo 640px.png,Grbl Logo.pdf,Grbl Logo.svg,config.h,grbl.h,motion_control.c']"
Sonny Jeon,2015-03-29,"Fix for limit pin reporting compile-option

- The limit pin reporting wasn’t working correctly due to calling the
wrong similarly-named function. Verified to be working now.",['report.c']
Sonny Jeon,2015-05-17,"Critical M0/2/30 fix. Homing updates.

- Critical fix for M0 program pause. Due to its recent change, it would
cause Grbl to suspend but wouldn’t notify the user of why Grbl was not
doing anything. The state would show IDLE and a cycle start would
resume it. Grbl now enters a HOLD state to better indicate the state
change.

- Critical fix for M2 and M30 program end. As with M0, the state
previously would show IDLE while suspended. Grbl now does not suspend
upon program end and leaves job control to the GUI. Grbl simply reports
a `[Pgm End]` as a feedback message and resets certain g-code modes.

- M2/30 g-code reseting fix. Previously Grbl would soft-reset after an
M2/30, but this was not complaint to the (linuxcnc) g-code standard. It
simply resets [G1,G17,G90,G94,G40,G54,M5,M9,M48] and keeps all other
modes the same.

- M0/M2/M30 check-mode fix. It now does not suspend the machine during
check-mode.

- Minor bug fix related to commands similar to G90.1, but not G90.1,
not reporting an unsupported command.

- Homing cycle refactoring. To help reduce the chance of users
misunderstanding their limit switch wiring, Grbl only moves a short
distance for the locate cycles only. In addition, the homing cycle
pulls-off the limit switch by the pull-off distance to re-engage and
locate home. This should improve its accuracy.

- HOMING_FORCE_ORIGIN now sets the origin to the pull-off location,
rather than where the limit switch was triggered.

- Updated default junction deviation to 0.01mm. Recent tests showed
that this improves Grbl’s cornering behavior a bit.

- Added the ShapeOko3 defaults.

- Added new feedback message `[Pgm End]` for M2/30 notification.

- Limit pin reporting is now a $10 status report option. Requested by
OEMs to help simplify support troubleshooting.","['commit_log_v0.9i.txt,config.h,defaults.h,gcode.c,grbl.h,limits.c,report.c,report.h,settings.h,stepper.c,system.h']"
ashelly,2015-05-22,"Splitting Cpu map into separate files.

Makes comparison, addition of new ones easier","['cpu_map.h,cpu_map_atmega2560.h,cpu_map_atmega328p.h']"
ashelly,2015-05-22,Fixing up comment blocks in headers,"['cpu_map.h,cpu_map_atmega2560.h,cpu_map_atmega328p.h']"
Sonny Jeon,2015-05-22,"Merge pull request #700 from ashelly/header-split

Header split",['']
ashelly,2015-05-22,Moving defaults to individual files in subdirectory,"['defaults.h,defaults_generic.h,defaults_oxcnc.h,defaults_shapeoko.h,defaults_shapeoko2.h,defaults_shapeoko3.h,defaults_sherline.h,defaults_simulator.h,defaults_zen_toolworks_7x7.h']"
Sonny Jeon,2015-05-22,"Merge pull request #702 from ashelly/default-split

Moving defaults to individual files in subdirectory",['']
Sonny Jeon,2015-05-23,"Homing and limit updates. Minor bug fixes.

- Updated new homing cycle to error out when a pull-off motion detects
the limit is still active.

- Created a limits_get_state() function to centralize it. It reports
state as a bit-wise booleans according to axis numbering.

- Updated the print uint8 functions. Generalized it to allow both base2
and base10 printouts, while allowing base2 prints with N_AXIS digits
for limit state status reports. Doing this saved about 100bytes of
flash as well.

- Applied CoreXY status reporting bug fix by @phd0. Thanks!","['commit_log_v0.9i.txt,defaults.h,grbl.h,limits.c,limits.h,motion_control.c,print.c,print.h,report.c,system.c']"
Sonny Jeon,2015-05-23,"Moved cpu_map.

- Moved cpu_map files to a cpu_map directory, like the defaults file
organization.","['cpu_map_atmega2560.h,cpu_map_atmega328p.h,commit_log_v0.9i.txt,cpu_map.h']"
Sonny Jeon,2015-05-23,"CoreXY planner bug fix.

- CoreXY motions were moving to the negative value of the intended
target. Now fixed.",['planner.c']
Sonny Jeon,2015-05-26,"Merge pull request #706 from grbl/edge

Merge edge branch.",['']
Sonny Jeon,2015-05-26,Updated README,"['README.md,config.h']"
Michel Pollet,2015-05-27,"Rename Grbl to grbl

Otherwise compilation fails on linux, or other case sensitive systems

Signed-off-by: Michel Pollet <buserror@gmail.com>","['cpu_map_atmega2560.h,cpu_map_atmega328p.h']"
Sonny Jeon,2015-05-27,"Merge pull request #710 from buserror/fix-directory-case-sensitivity

Rename Grbl to grbl",['']
Sonny Jeon,2015-05-27,"Added X-Carve defaults.

- Added X-Carve 500mm and 1000mm default files.

- Tweaked all default files. Removed obsolete AUTO_START and updated
some JUNCTION_DEVIATION defaults after testing showed these needed to
be reduced slightly.","['defaults_x_carve_1000mm.h,defaults_x_carve_500mm.h,defaults.h,defaults_generic.h,defaults_oxcnc.h,defaults_shapeoko.h,defaults_shapeoko2.h,defaults_sherline.h,defaults_simulator.h,defaults_zen_toolworks_7x7.h']"
Sonny Jeon,2015-05-27,"Another git case-sensitive folder fix.

- I’m now officially annoyed.","['defaults_x_carve_1000mm.h,defaults_x_carve_500mm.h']"
Sonny Jeon,2015-05-29,"Added G61 exact path support.

- G61 exact path is the Grbl default path control mode, so it’s now
added as a supported g-code.","['README.md,commit_log_v0.9i.txt,gcode.c,gcode.h,grbl.h']"
Sonny Jeon,2015-06-18,"Added restore settings defaults command.

- New restore setting defaults command. Only wipes ‘$$’ setting in
EEPROM and reloads them based on the defaults used when Grbl was
compiled. Used with a `$RST` command

NOTE: `$RST` is intentionally not listed in the Grbl ‘$’ help message.","['Makefile,commit_log_v0.9i.txt,grbl.h,report.c,report.h,settings.h,system.c']"
Sonny Jeon,2015-06-18,Updated README,"['README.md,commit_log_v0.9i.txt']"
Sonny Jeon,2015-06-20,"New EEPROM restore functions.

- Tweaked the previous EEPROM restore implementation and added new
functionality.

- `$RST=$` restores the `$$` grbl settings back to firmware defaults,
which are set when compiled.

- `$RST=#` restores the `$#` parameters in EEPROM. At times it’s useful
to clear these and start over, rather than manually writing each entry.

-`$RST=*` wipe all of the data in EEPROM that Grbl uses and restores
them to defaults. This includes `$$` settings, `$#` parameters, `$N`
startup lines, and `$i` build info string.

NOTE: This doesn’t write zeros throughout the EEPROM. It only writes
where Grbl looks for data. For a complete wipe, please use the Arduino
IDE’s EEPROM clear example.

- Refactored the restore and wipe functions in settings.c to
accommodate the new commands.","['README.md,commit_log_v0.9i.txt,grbl.h,settings.c,settings.h,system.c']"
Sonny Jeon,2015-06-25,"Restore parameters minor bug fix.

- `$RST=#` was not wiping the G30 positions from EEPROM. Minor but now
fixed.","['README.md,commit_log_v0.9i.txt,settings.c']"
Sonny Jeon,2015-07-17,"Version bump to v0.9j

- Version bump requested by OEMs to easily determine whether the
firmware supports the new EEPROM reset feature. Other than that, no
significant changes.","['README.md,commit_log_v0.9i.txt,config.h,grbl.h']"
Sonny Jeon,2015-08-14,"Individual control pin invert compile-option.

- Control pins may be individually inverted through a
CONTROL_INVERT_MASK macro. This mask is define in the cpu_map.h file.","['commit_log_v0.9i.txt,config.h,cpu_map_atmega2560.h,cpu_map_atmega328p.h,grbl.h,system.c']"
Sonny Jeon,2015-08-16,Update README.md,['README.md']
Sonny Jeon,2015-08-27,"v1.0 Beta Release.

- Tons of new stuff in this release, which is fairly stable and well
tested. However, much more is coming soon!

- Real-time parking motion with safety door. When this compile option
is enabled, an opened safety door will cause Grbl to automatically feed
hold, retract, de-energize the spindle/coolant, and parks near Z max.
After the door is closed and resume is commanded, this reverses and the
program continues as if nothing happened. This is also highly
configurable. See config.h for details.

- New spindle max and min rpm ‘$’ settings! This has been requested
often. Grbl will output 5V when commanded to turn on the spindle at its
max rpm, and 0.02V with min rpm. The voltage and the rpm range are
linear to each other. This should help users tweak their settings to
get close to true rpm’s.

- If the new max rpm ‘$’ setting is set = 0 or less than min rpm, the
spindle speed PWM pin will act like a regular on/off spindle enable
pin. On pin D11.

- BEWARE: Your old EEPROM settings will be wiped! The new spindle rpm
settings require a new settings version, so Grbl will automatically
wipe and restore the EEPROM with the new defaults.

- Control pin can now be inverted individually with a
CONTROL_INVERT_MASK in the cpu_map header file. Not typical for users
to need this, but handy to have.

- Fixed bug when Grbl receive too many characters in a line and
overflows. Previously it would respond with an error per overflow
character and another acknowledge upon an EOL character. This broke the
streaming protocol. Now fixed to only respond with an error after an
EOL character.

- Fixed a bug with the safety door during an ALARM mode. You now can’t
home or unlock the axes until the safety door has been closed. This is
for safety reasons (obviously.)

- Tweaked some the Mega2560 cpu_map settings . Increased segment buffer
size and fixed the spindle PWM settings to output at a higher PWM
frequency.

- Generalized the delay function used by G4 delay for use by parking
motion. Allows non-blocking status reports and real-time control during
re-energizing of the spindle and coolant.

- Added spindle rpm max and min defaults to default.h files.

- Added a new print float for rpm values.","['README.md,config.h,coolant_control.c,cpu_map_atmega2560.h,cpu_map_atmega328p.h,defaults_generic.h,defaults_oxcnc.h,defaults_shapeoko.h,defaults_shapeoko2.h,defaults_shapeoko3.h,defaults_sherline.h,defaults_simulator.h,defaults_x_carve_1000mm.h,defaults_x_carve_500mm.h,defaults_zen_toolworks_7x7.h,grbl.h,limits.c,motion_control.c,motion_control.h,nuts_bolts.c,nuts_bolts.h,planner.c,planner.h,print.c,print.h,protocol.c,protocol.h,report.c,report.h,settings.c,settings.h,spindle_control.c,stepper.c,stepper.h,system.c,system.h']"
Sonny Jeon,2015-08-27,Update README,"['README.md,commit_log_v0.9i.txt']"
Sonny Jeon,2015-08-29,"Optional line number reporting bug fix.

- Fixed a bug where it would not compile when USE_LINE_NUMBERS was
enabled.","['commit_log_v0.9i.txt,config.h,grbl.h,motion_control.c,motion_control.h']"
Sonny Jeon,2015-09-05,"Parking motion bug fix.

- Parking motion would intermittently complete the queued tool path
upon resuming in certain scenarios. Now fixed.","['commit_log_v0.9i.txt,gcode.c,grbl.h,limits.c,stepper.c']"
Sonny Jeon,2015-09-24,"Updated G28/G30 intermediate motion behavior.

- G28 and G30’s behavior has been updated from the old NIST g-code
standard to LinuxCNC’s. Previously when an intermediate motion was
programmed, the NIST standard would move all axes to the final G28/30
stored coordinates. LinuxCNC states it only moves the axes specified in
the command.

  For example, suppose G28’s stored position is (x,y,z) = (1,2,3) for
simplicity, and we want to do an automated z-axis tool retraction and
then park at the x,y location. `G28 G91 Z5` will first move the Z axis
5mm(or inches) up, then move Z to position 3 in machine coordinates.
Next, the command `G28 G91 X0 Y0` would skip the intermediate move
since distance is zero, but then move only the x and y axes to machine
coordinates 1 and 2, respectively. The z-axis wouldn’t move in this
case, since it wasn’t specified.

This change is intended to make Grbl more LinuxCNC compatible while
making commands, like the shown tool retraction, much easier to
implement.","['README.md,commit_log_v0.9i.txt,gcode.c,grbl.h']"
Sonny Jeon,2015-09-30,"Minor bug fixes.

- G38.x was not printing correctly in the $G g-code state reports. Now
fixed.

- Potential bug regarding volatile variables inside a struct. It has
never been a problem in v0.9, but ran into this during v1.0
development. Just to be safe, the fixes are applied here.

- Updated pre-built firmwares with these two bug fixes.","['README.md,commit_log_v0.9i.txt,gcode.c,grbl.h,limits.c,main.c,motion_control.c,probe.c,protocol.c,report.c,serial.c,stepper.c,system.c,system.h']"
Sonny Jeon,2015-09-30,"Bug fixes.

- G38.x was not printing correctly in the $G g-code state reports. Now
fixed.

- When investigating the above issue, it was noticed that G38.x
wouldn’t show at all, but instead a G0 would be printed. This was
unlike the v0.9j master build. It turned out volatile variables do not
like to be defined inside a C struct. These are undefined on how to be
handled. Once pulled out, all weird issues went away.

- Also changed two ‘sizeof()’ statements in the mc_probe() and
probe_state_monitor() functions to be more robust later on.

- Updated the commit logs to individual files for each minor release.
Forgot to update the generating script to account for this.",['']
Sonny Jeon,2015-11-09,"Pin state reporting of all pins. Flash optimization.

- New pin state realtime reporting feature. Instead of `Lim:000` for
limit state reports, the new feature shows `Pin:000|0|0000`, or
something similar. The `|` delimited fields indicate xyz limits, probe,
and control pin states, where 0 is always not triggered, and 1 is
triggered. Invert masks ARE accounted for.
  Each field may be enabled or disabled via the `$10` status report
setting. The probe and control pin flags are bits 5 and 6, respectively.

- Remove the now deprecated `REPORT_CONTROL_PIN_STATE` option in
config.h

- The old limit pin reports `Lim:000` may be re-enabled by commenting
out `REPORT_ALL_PIN_STATES` in config.h.

- Incremented the version letter (v1.0c) to indicate the change in
reporting style.

- Replaced all bit_true_atomic and bit_false_atomic macros with
function calls. This saved a couple hundred bytes of flash.","['README.md,commit_log_v1.0b.txt,config.h,gcode.c,grbl.h,limits.c,motion_control.c,nuts_bolts.h,probe.c,protocol.c,report.c,serial.c,settings.h,stepper.c,system.c,system.h']"
Sonny Jeon,2016-03-04,"Applied master branch bug fixes.

- Planner was under-estimating maximum speeds through straight
junctions in certain cases. The calculations have been updated to be
more accurate.

- Strange sizeof() bug in the most recent releases. Manifested as an
alarm upon a power up even when homing was disabled. Fixed by declaring
sizeof() with struct types, rather than variable names, even though
they were validated to give the same value.

- Spindle speed zero should disable the spindle. Now fixed.

- New configuration option for inverting certain limit pins. Handy for
mixed NO and NC switch machines. See config.h for details.","['commit_log_v1.0c.txt,config.h,gcode.c,grbl.h,limits.c,main.c,planner.c,spindle_control.c,stepper.c']"
Sonny Jeon,2016-03-11,"Soft limit error bug fix.

- Soft limit errors were stuck in a feed hold without notifying the
user why it was in a hold. When resumed, the soft limit error would
kick in. Issue should be fixed to behave as intended. To automatically
hold and issue a soft limit alarm once the machine has come to a stop.","['commit_log_v1.0c.txt,grbl.h,limits.c,main.c,protocol.c,system.h']"
Sonny Jeon,2016-03-19,"No variable spindle and spindle speed fix.

- Soft limit errors were stuck in a feed hold without notifying the
user why it was in a hold. When resumed, the soft limit error would
kick in. Issue should be fixed to behave as intended to automatically
hold and issue a soft limit alarm once the machine has come to a stop.","['commit_log_v1.0c.txt,grbl.h,spindle_control.c']"
Sonny Jeon,2016-03-30,"Organizational updates. Mega2560 support moved.

- Mega2560 support has been moved to the Grbl-Mega
[project](http://github.com/gnea/grbl-Mega/) to clean up the code and
make future developments easier with increased flash and RAM. All new
developments between the 328p and Mega2560 will be synced when it makes
sense to.

- OEM single file compile configuration option. Before OEMs needed to
alter three files. Provided a way to just alter the config.h file to
contain everything for a particular Grbl build. See config.h for more
details.

- Removed defaults and cpu_map directories and reverted back to
defaults.h and cpu_map.h to contain all definitions. This should help
reduce some headaches and the previous implementation inadvertently
created. Also, it makes the single file config.h possible.

- Moved (and tweaked) the invert control pin mask define and placed
into config.h, rather than in the cpu_map.h file. Makes more sense
there.","['README.md,commit_log_v1.0c.txt,config.h,cpu_map.h,cpu_map_atmega2560.h,cpu_map_atmega328p.h,defaults.h,defaults_generic.h,defaults_oxcnc.h,defaults_shapeoko.h,defaults_shapeoko2.h,defaults_shapeoko3.h,defaults_sherline.h,defaults_simulator.h,defaults_x_carve_1000mm.h,defaults_x_carve_500mm.h,defaults_zen_toolworks_7x7.h,grbl.h,spindle_control.c,system.c']"
chamnit,2016-09-21,"Grbl v1.0e huge beta release. Overrides and new reporting.

- Feature: Realtime feed, rapid, and spindle speed overrides. These
alter the running machine state within tens of milliseconds!
    - Feed override: 100%, +/-10%, +/-1% commands with values 1-200% of
programmed feed
    - Rapid override: 100%, 50%, 25% rapid rate commands
    - Spindle speed override: 100%, +/-10%, +/-1% commands with values
50-200% of programmed speed
    - Override values have configurable limits and increments in
config.h.
- Feature: Realtime toggle overrides for spindle stop, flood coolant,
and optionally mist coolant
    - Spindle stop: Enables and disables spindle during a feed hold.
Automatically restores last spindles state.
    - Flood and mist coolant: Immediately toggles coolant state until
next toggle or g-code coolant command.
- Feature: Jogging mode! Incremental and absolute modes supported.
    - Grbl accepts jogging-specific commands like $J=X100F50. An axis
word and feed rate are required. G20/21 and G90/G91 commands are
accepted.
    - Jog motions can be canceled at any time by a feed hold `!`
command. The buffer is automatically flushed. (No resetting required).
    - Jog motions do not alter the g-code parser state so GUIs don’t
have to track what they changed and correct it.
- Feature: Laser mode setting. Allows Grbl to execute continuous
motions with spindle speed and state changes.
- Feature: Significantly improved status reports. Overhauled to cram in
more meaningful data and still make it smaller on average.
    - All available data is now sent by default, but does not appear if
it doesn’t change or is not active.
    - Machine position(MPos) or work position(WPos) is reported but not
both at the same time. Instead, the work coordinate offsets (WCO)are
sent intermittently whenever it changes or refreshes after 10-30 status
reports. Position vectors are easily computed by WPos  = MPos - WCO.
    - All data has changed in some way. Details of changes are in the
markdown documents and wiki.
- Feature: 16 new realtime commands to control overrides. All in
extended-ASCII character space.
    - While they are not easily typeable and requires a GUI, they can’t
be accidentally triggered by some latent character in the g-code
program and have tons of room for expansion.
- Feature: New substates for HOLD and SAFETY DOOR. A `:x` is appended
to the state, where `x` is an integer and indicates a substate.
    - For example, each integer of a door state describes in what phase
the machine is in during parking. Substates are detailed in the
documentation.
- Feature: With the alarm codes, homing and probe alarms have been
expanded with more codes to provide more exact feedback on what caused
the alarm.
- Feature: New hard limit check upon power-up or reset. If detected, a
feedback message to check the limit switches sent immediately after the
welcome message.
    - May be disabled in config.h.

- OEM feature: Enable/disable `$RST=` individual commands based on
desired behavior in config.h.
- OEM feature: Configurable EEPROM wipe to prevent certain data from
being deleted during firmware upgrade to a new settings version or
`RST=*` command.
- OEM feature: Enable/disable the `$I=` build info write string with
external EEPROM write example sketch.
    - This prevents a user from altering the build info string in
EEPROM. This requires the vendor to write the string to EEPROM via
external means. An Arduino example sketch is provided to accomplish
this. This would be useful for contain product data that is
retrievable.

- Tweak: All feedback has been drastically trimmed to free up flash
space for the v1.0 release.
    - The `$` help message is just one string, listing available
commands.
    - The `$$` settings printout no longer includes descriptions. Only
the setting values. (Sorry it’s this or remove overrides!)
    - Grbl `error:` and `ALARM:` responses now only contain codes. No
descriptions. All codes are explained in documentation.
    - Grbl’s old feedback style may be restored via a config.h, but
keep in mind that it will likely not fit into the Arduino’s flash space.
- Tweak: Grbl now forces a buffer sync or stop motion whenever a g-code
command needs to update and write a value to EEPROM or changes the work
coordinate offset.
    - This addresses two old issues in all prior Grbl versions. First,
an EEPROM write requires interrupts to be disabled, including stepper
and serial comm. Steps can be lost and data can be corrupted. Second,
the work position may not be correlated to the actual machine position,
since machine position is derived from the actual current execution
state, while work position is based on the g-code parser offset state.
They are usually not in sync and the parser state is several motions
behind. This forced sync ensures work and machine positions are always
correct.
    - This behavior can be disabled through a config.h option, but it’s
not recommended to do so.
- Tweak: To make status reports standardized, users can no longer
change what is reported via status report mask, except for only
toggling machine or work positions.
    - All other data fields are included in the report and can only be
disabled through the config.h file. It’s not recommended to alter this,
because GUIs will be expecting this data to be present and may not be
compatible.
- Tweak: Homing cycle and parking motion no longer report a negative
line number in a status report. These will now not report a line number
at all.
- Tweak: New `[Restoring spindle]` message when restoring from a
spindle stop override. Provides feedback what Grbl is doing while the
spindle is powering up and a 4.0 second delay is enforced.
- Tweak: Override values are reset to 100% upon M2/30. This behavior
can be disabled in config.h
- Tweak: The planner buffer size has been reduced from 18 to 16 to free
up RAM for tracking and controlling overrides.
- Tweak: TX buffer size has been increased from 64 to 90 bytes to
improve status reporting and overall performance.
- Tweak: Removed the MOTION CANCEL state. It was redundant and didn’t
affect Grbl’s overall operation by doing so.
- Tweak: Grbl’s serial buffer increased by +1 internally, such that 128
bytes means 128, not 127 due to the ring buffer implementation. Long
overdue.
- Tweak: Altered sys.alarm variable to be set by alarm codes, rather
than bit flags. Simplified how it worked overall.
- Tweak: Planner buffer and serial RX buffer usage has been combined in
the status reports.
- Tweak: Pin state reporting has been refactored to report only the
pins “triggered” and nothing when not “triggered”.
- Tweak: Current machine rate or speed is now included in every report.
- Tweak: The work coordinate offset (WCO) and override states only need
to be refreshed intermittently or reported when they change. The
refresh rates may be altered for each in the config.h file with
different idle and busy rates to lessen Grbl’s load during a job.
- Tweak: For temporary compatibility to existing GUIs until they are
updated, an option to revert back to the old style status reports is
available in config.h, but not recommended for long term use.
- Tweak: Removed old limit pin state reporting option from config.h in
lieu of new status report that includes them.
- Tweak: Updated the defaults.h file to include laser mode, altered
status report mask, and fix an issue with a missing invert probe pin
default.

- Refactor: Changed how planner line data is generated and passed to
the planner and onto the step generator. By making it a struct
variable, this saved significant flash space.
- Refactor: Major re-factoring of the planner to incorporate override
values and allow for re-calculations fast enough to immediately take
effect during operation. No small feat.
- Refactor: Re-factored the step segment generator for re-computing new
override states.
- Refactor: Re-factored spindle_control.c to accommodate the spindle
speed overrides and laser mode.
- Refactor: Re-factored parts of the codebase for a new jogging mode.
Still under development though and slated to be part of the official
v1.0 release. Hang tight.
- Refactor: Created functions for computing a unit vector and value
limiting based on axis maximums to free up more flash.
- Refactor: The spindle PWM is now set directly inside of the stepper
ISR as it loads new step segments.
- Refactor: Moved machine travel checks out of soft limits function
into its own since jogging uses this too.
- Refactor: Removed coolant_stop() and combined with
coolant_set_state().
- Refactor: The serial RX ISR forks off extended ASCII values to
quickly assess the new override realtime commands.
- Refactor: Altered some names of the step control flags.
- Refactor: Improved efficiency of the serial RX get buffer count
function.
- Refactor: Saved significant flash by removing and combining print
functions. Namely the uint8 base10 and base2 functions.
- Refactor: Moved the probe state check in the main stepper ISR to
improve its efficiency.
- Refactor: Single character printPgmStrings() went converted to direct
serial_write() commands to save significant flash space.

- Documentation: Detailed Markdown documents on error codes, alarm
codes, messages, new real-time commands, new status reports, and how
jogging works. More to come later and will be posted on the Wiki as
well.
- Documentation: CSV files for quick importing of Grbl error and alarm
codes.

- Bug Fix: Applied v0.9 master fixes to CoreXY homing.
- Bug Fix: The print float function would cause Grbl to crash if a
value was 1e6 or greater. Increased the buffer by 3 bytes to help
prevent this in the future.
- Bug Fix: Build info and startup string EEPROM restoring was not
writing the checksum value.
- Bug Fix: Corrected an issue with safety door restoring the proper
spindle and coolant state. It worked before, but breaks with laser mode
that can continually change spindle state per planner block.
- Bug Fix: Move system position and probe position arrays out of the
system_t struct. Ran into some compiling errors that were hard to track
down as to why. Moving them out fixed it.","['COPYING,Makefile,README.md,alarm_codes.csv,error_codes.csv,error_codes.md,jogging.md,realtime_cmds.md,report.md,config.h,coolant_control.c,coolant_control.h,cpu_map.h,defaults.h,grblWrite_BuildInfo.ino,license.txt,gcode.c,gcode.h,grbl.h,jog.c,jog.h,limits.c,limits.h,main.c,motion_control.c,motion_control.h,nuts_bolts.c,nuts_bolts.h,planner.c,planner.h,print.c,print.h,probe.c,probe.h,protocol.c,protocol.h,report.c,report.h,serial.c,serial.h,settings.c,settings.h,spindle_control.c,spindle_control.h,stepper.c,stepper.h,system.c,system.h']"
winder,2016-09-22,Add locale to code CSVs.,"['alarm_codes_en_US.csv,error_codes_en_US.csv']"
Sonny Jeon,2016-09-22,"Merge pull request #1 from winder/dev

Add locale to code CSVs.",['']
Sonny Jeon,2016-09-22,"Increment to v1.1a, minor compile bug fix, tweaked communication protocol, more docs.

- Incremented to v1.1a, rather than keep 1.0e. This is because there
are existing v1.0 installations. Don’t want to confuse people further.

- Certain version of the Arduino IDE did not like the `inline` in the
function header. Removed from spindle_control files to fix the problem.

- Tweaked the communication protocol slightly. Added message type
indicators for all `[]`bracketed feedback messages. It’s been
problematic for GUI dev to try to determine the context of a message
and how it should be handled. These indictors should help tremendously
to remove context all together.

- Also altered how `$N` startup lines are presented when executed. They
now start with an open chevron ‘>’ followed by the line and an ‘:ok’ to
indicate it executed. The ‘ok’ is on the same line intentionally so it
doesn’t mess up a streaming protocol counter.

- Managed to save a 100+KB from refactoring parts of report.c. (Thanks
Vasilis!) Freed up room to alter the protocol a little.

- Wrote a markdown document on interface messaging to make it clear how
it’s intended to work. See interface.md in /doc/markdown

- Started to pull in some Wiki pages from the old grbl site and
beginning to update them for v1.1.

- Created new commit log for v1.1.","['commit_log_v1.1.txt,error_codes.md,interface.md,interface_notes.md,settings.md,realtime_cmds.md,report.md,grbl.h,print.c,print.h,report.c,report.h,spindle_control.c,spindle_control.h,system.c']"
Sonny Jeon,2016-09-24,"Serial RX count bug fix. Settings codes CSV. More documentation.

- Reverted back the serial RX count function to how it was. The
variable type was unsigned and cause an integer underflow whenever the
calculation produced a negative number. The old way was the correct way.

- Lots of minor edits to the code CSVs and markdown documents.

- Expanded on explaining feedback messages and startup line execution
feedback.

- Created a new settings codes CSV to help GUIs import the values and
meanings.","['alarm_codes_en_US.csv,error_codes_en_US.csv,setting_codes_en_US.csv,commit_log_v1.1.txt,change_summary.md,error_codes.md,interface.md,realtime_cmds.md,serial.c']"
Sonny Jeon,2016-09-25,"Addressed much larger flash size with avr-gcc v4.9.2. Refactored reports to save 160KB.

- The newest Arduino IDE 1.6.12 has recently updated to avr-gcc v4.9.2.
Unfortunately, it produces a compiled size almost 0.7KB to 1KB larger
than prior versions! This can easily cause the base build to exceed the
Arduino Duemilanove/Nano flash limit of 30.5KB. The Arduino Uno seems
to be ok still with its 31.5KB flash limit.

- Makefile `-flto` compile flag added to cut down on the horrible flash
size when using the new avr-gcc. (Edit Makefile and remove comment on
COMPILE definition). This brings it in-line with what the IDE produces.

- Functionalized repetitive tasks in report.c to try to reduce overall
flash size. Successfully cut down about 160bytes.

- Removed printFloat_SettingValue() and printFloat_RPMValue()
functions. These aren’t required and can be replaced with a direct call
to printFloat() because they don’t require a unit conversion check.","['Makefile,commit_log_v1.1.txt,grbl.h,print.c,print.h,report.c']"
Sonny Jeon,2016-09-26,"v1.1b: Tweaked Bf reports, jogging doc, saved another 160 bytes, minor bug fixes

- Increment to v1.1b due to status report tweak.

- Tweaked the buffer state status reports to show bytes and blocks
available, rather than in use. This does not require knowing the buffer
sizes beforehand. It’s implicit.

- Also, since buffer states are not used by most devs (after
inquiries), it is no longer enabled by default and a status mask option
was added for this.

- Fixed some typos and updated for the report tweak in the
documentation.

- Wrote a joystick implementation concept in the jogging markdown
document. Outlines how to get a low-latency feel to a joystick (and
other input devices).

- Removed XON/XOFF support. It’s not used by anyone because of its
inherent problems. Remains in older versions for reference.

- Added a compile option on how to handle the probe position during a
check mode.

- Fixed a jogging bug. If G93 is the modal state before a jogging
motion, the feed rate did not get calculated correctly. Fixed the issue.

- Refactored some code to save another 160+ bytes. Included an improved
float vector comparison macro and reducing a few large and repetitive
function calls.

- Fixed a probing bug (existing in v0.9 too) where the target positions
were not set correct and error handling was improper.","['commit_log_v1.1.txt,change_summary.md,interface.md,jogging.md,config.h,defaults.h,gcode.c,gcode.h,grbl.h,motion_control.c,motion_control.h,nuts_bolts.h,planner.c,planner.h,report.c,serial.c,serial.h,settings.h']"
Sonny Jeon,2016-09-27,Update README and clarifications in jogging document.,"['README.md,commit_log_v1.1.txt,jogging.md']"
Sonny Jeon,2016-09-27,"Refactored g-code parser. Saved 60bytes flash and some ram. Edited Readme.

- Freed up another 60 bytes of flash and 12-24 bytes of stack RAM by
using the pre-allocated IJK arc offset vector that is guaranteed to be
not in use. Only G10 and G28/30 require fetching from EEPROM and
retaining extra data. Both commands use axis words, which rules out
G2/3 arcs using IJK offsets existing in same block. Not ideal, but
every byte helps.

- Edited README.","['README.md,commit_log_v1.1.txt,gcode.c,grbl.h']"
Sonny Jeon,2016-09-28,"New jog cancel real-time command. Parser typo fix from last push.

- Added a new jog cancel real-time command. Rather than depending on a
feed hold to cancel a jogging motion, this realtime command can be used
instead. The main advantage is if a feed hold is used, you can
accidentally hold the machine right when Grbl returns to IDLE after
completing a jog. And the GUI doesn’t have to worry about tracking this
either.

- Fixed a typo in the g-code parser edits from the last push. Was
causing the G10 set coordinate system command to not work correctly.

- Updated the documentation with the jog cancel command.","['commit_log_v1.1.txt,jogging.md,realtime_cmds.md,config.h,gcode.c,grbl.h,protocol.c,report.c,serial.c,system.c']"
Sonny Jeon,2016-10-11,"v1.1c: New sleep mode. Laser mode and other bug fixes.

- New $SLP sleep mode that will disable spindle, coolant, and stepper
enable pins. Allows users to disable their steppers without having to
alter their settings. A reset is required to exit and re-initializes in
alarm state.

- Laser mode wasn’t updating the spindle PWM correctly (effected
spindle speed overrides) and not checking for modal states either.
Fixed both issues.

- While in laser mode, parking motions are ignored, since the power off
delay with the retract motion would burn the material. It will just
turn off and not move. A restore immediately powers up and resumes. No
delays.

- Changing rpm max and min settings did not update the spindle PWM
calculations. Now fixed.

- Increased default planner buffer from 16 to 17 block. It seems to be
stable, but need to monitor this carefully.

- Removed software debounce routine for limit pins. Obsolete.

- Fixed a couple parking motion bugs. One related to restoring
incorrectly and the other the parking rate wasn’t compatible with the
planner structs.

- Fixed a bug caused by refactoring the critical alarms in a recent
push. Soft limits weren’t invoking a critical alarm.

- Updated the documentation with the new sleep feature and added some
more details to the change summary.","['README.md,commit_log_v1.1.txt,change_summary.md,interface.md,config.h,cpu_map.h,gcode.c,grbl.h,limits.c,motion_control.c,planner.h,protocol.c,report.c,report.h,serial.c,settings.c,spindle_control.c,stepper.c,system.c,system.h']"
Sonny Jeon,2016-10-12,"Spindle speed bug fix.

- Spindle speed updating wasn’t working in the g-code parser due to
some borked up logic on my part. Fixed it and should be operating as
intended for both normal and laser spindle modes.

- Elaborated a little more on the new sleep mode in the documentation.","['commit_log_v1.1.txt,interface.md,gcode.c,grbl.h']"
chamnit,2016-10-12,"Added settings documentation. Very minor bug fix to step direction handling.

- Added v1.1 settings documentation to the markdown folder.

- Fixed a very minor bug in the step direction handling upon wakeup.
The direction mask would temporarily go back to default mask for about
a millisecond when moving in the same non-default direction. It did not
effect Grbl behavior before, but fixed for consistency.","['commit_log_v1.1.txt,realtime_cmds.md,settings.md,stepper.c']"
chamnit,2016-10-12,Merge branch 'dev' into edge,['']
Will Winder,2016-10-17,"Modify code CSV format. (#10)

- Wrap value in quotes to avoid issue with embedded commas. This occurs
  in one of the alarm codes.

- Change header row format to allow same parsing code as data rows.","['alarm_codes_en_US.csv,error_codes_en_US.csv,setting_codes_en_US.csv']"
Sonny Jeon,2016-10-17,"v1.1d: Tweaked interface a bit. Added realtime spindle speed and build option data. Minor bug fixes.

- Increment to v1.1d due to interface tweaks.

- Based on GUI dev feedback, the toggle overrides report was removed
and replace with showing “accessory state”. This shows a character if a
particular accessory is enabled, like the spindle or flood coolant.
These can be directly altered by the toggle overrides, so when they
execute, a GUI will be able to observe the state altering as feedback.

- Altered the real-time feed rate to show real-time spindle speed as
well. It was an over-sight on my part. It’s needed because it’s hard to
know what the current spindle speed is when overrides are altering it.
Especially during something like a laser cutting job when its important
to know how spindle speed overrides are effecting things.

- Real-time spindle speed is not shown if VARIABLE_SPINDLE is disabled.
The old real-time feed rate data field will show instead.

- Compile-time option data is now included in another message
immediately following the build info version string, starting with
`[OPT:`. A character code follows the data type name with each
indicating a particular option enabled or disabled. This will help
immensely with debugging Grbl as well as help GUIs know exactly how
Grbl was compiled.

- These interface changes are detailed in the updated documentation.

- Reduced the default planner buffer size from 17 to 16. Needed to free
up some memory…

- For increasing the serial TX buffer size from 90 to 104 bytes. The
addition of real-time spindle speeds and accessory enable data required
a bigger buffer. This is to ensure Grbl is performing at optimal levels.

- Refactored parts of the spindle and coolant control code to make it
more consistent to each other and how it was called. It was a little
messy. The changes made it easier to track what each function call was
doing based on what was calling it.

- Created a couple of new get_state functions for the spindle and
coolant. These are called by the accessory state report to look
directly at the pin state, rather than track how it was set. This
guarantees that the state is reported correctly.

- Updated the g-code parser, parking motion, sleep mode, and spindle
stop calls to refactored spindle and coolant code.

- Added a compile-time option to enable homing individual axes, rather
than having only the main homing cycle. The actual use case for this is
pretty rare. It’s not recommended you enable this, unless you have a
specific application for it. Otherwise, just alter the homing cycle
itself.

- Refactored the printFloat() function to not show a decimal point if
there are no trailing values after it. For example, `1.` now shows `1`.

- Fixed an issue regarding spindle speed overrides no being applied to
blocks without motions.

- Removed the toggle_ovr_mask system variable and replaced with
spindle_stop_ovr system variable. Coolant toggles don’t need to be
tracked.

- Updated README","['Makefile,README.md,build_option_codes_en_US.csv,commit_log_v1.1.txt,change_summary.md,interface.md,settings.md,config.h,coolant_control.c,coolant_control.h,cpu_map.h,gcode.c,grbl.h,main.c,motion_control.c,motion_control.h,planner.h,print.c,protocol.c,report.c,serial.h,spindle_control.c,spindle_control.h,stepper.c,system.c,system.h']"
Sonny Jeon,2016-10-18,"Improved option for v0.9 GUI compatibility.

- Addressed an issue with backward compatibility with Grbl v0.9-style
GUIs.

- It still may not work due to new data and states coming back from
Grbl v1.1. Regardless, DO NOT TRY TO USE THE COMPATIBILITY MODE UNTIL
THERE IS A REALLY GOOD REASON TO.

- v0.9 GUI compatibility mode will be removed in future versions.
You’ve been warned. It’s highly recommended for GUIs to update to the
new v1.1 interface.

- Compability mode will only fit on an Arduino Uno due to size
increases.

- Removed the REPORT_GUI_MODE compile option since it’s part of the
v1.1 interface standard.

- Updated the documentation to better describe the compatibility mode
build option.","['build_option_codes_en_US.csv,commit_log_v1.1.txt,interface.md,config.h,grbl.h,report.c,settings.h']"
Will Winder,2016-10-22,"Minor VARIABLE_SPINDLE feature toggle refactoring (#16)

* Modify code CSV format.

- Wrap value in quotes to avoid issue with embedded commas. This occurs
  in one of the alarm codes.

- Change header row format to allow same parsing code as data rows.

* VARIABLE_SPINDLE feature flag experiment.

- Use a macro for 'spindle_set_speed' and 'spindle_sync' to reduce the
  number of required VARIABLE_SPINDLE checks.","['gcode.c,protocol.c,spindle_control.c,spindle_control.h']"
Sonny Jeon,2016-10-23,"Spindle speed close to minimum fix.

- When spindle speed is close to the minimum rpm, the PWM value would
be zero or lower than allowed. The computation error was caused by
setting the minimum PWM value to zero, when it should have been 1.

- Added a compiler check for minimum PWM to be greater than zero.

- Moved some of the spindle PWM macros to a more appropriate place in
the cpu_map.h.","['commit_log_v1.1.txt,config.h,cpu_map.h,grbl.h,report.c,spindle_control.c']"
Sonny Jeon,2016-10-24,"Minor re-factoring. Fix an issue with parking and spindle restore.

- Altered the report counters to be count down, rather than count up.
Simplified some of the logic.

- Fixed an issue with parking restore. The spindle state would disable
then reenable.

- Clarified some of the config.h descriptions.

- Moved the compile-time checks from config.h to grbl.h. They don’t
belong in the config.h file.

- Refactored the initialization of the system variables in main.c.
System position and probe position were undefined when power cycled,
but were zero anyway. Added clear vector code to make it explicit.","['commit_log_v1.1.txt,config.h,coolant_control.c,grbl.h,main.c,protocol.c,report.c,spindle_control.c,system.c,system.h']"
chamnit,2016-10-25,"Resolved parking accessory handling issue.

- Yikes. Totally borked the last parking “fix”. Testing shows that all
accessories are now properly handled when retracting and restoring. It
was caused by not accounting for the planner re-factoring correctly in
the parking code.","['commit_log_v1.1.txt,grbl.h,planner.h,protocol.c']"
chamnit,2016-10-25,"Mandate all probe cycles ignore feed overrides.

- For repeatability reasons, all G38.x probe cycles ignore feed rate
overrides and move at their programmed speed.

- The mandate can be removed with a new config.h option.

- Updated the documentation to reflect the change.","['build_option_codes_en_US.csv,commit_log_v1.1.txt,interface.md,config.h,gcode.c,report.c']"
Sonny Jeon,2016-10-26,"Add high-frequency spindle output option. Minor parking motion re-factoring.

- Some laser controllers were reported to need a very high PWM
frequency. Added a line to enable this in cpu_map.h, if needed.

- Cleaned up some of the parking code. Mostly just editing the comments.

- Moved the accessory state resetting after the initial parking
retract. Should ensure the accessory state is properly handled upon an
aborted parking restore. Not certain if this was a problem before
though. Just to be sure.","['commit_log_v1.1.txt,cpu_map.h,grbl.h,protocol.c']"
Sonny Jeon,2016-10-27,"Spindle speed overrides behavior tweak. New experimental laser dynamic power mode.

- Spindle speed overrides now update immediately if they are changed
while in a HOLD state. Previously, they would update after exiting the
HOLD, which isn’t correct.

- New experimental dynamic laser power mode that adjusts laser power
based on current machine speed. Enabled by uncommenting
LASER_CONSTANT_POWER_PER_RATE in config.h

  - It assumes the programmed rate is the intended power/rate for the
motion.
  - Feed rate overrides (FRO) do not effect the power/rate. Meaning
that spindle PWM will automatically lower with lower FRO and increase
with higher FRO to keep it the same.
  - Spindle speed overrides (SSO) will directly increase and decrease
the power/rate. So 150% SSO will increase the PWM output by 150% for
the same speed.
  - The combination of FRO and SSO behaviors should allow for subtle
and highly flexible tuning of how the laser cutter is operating in
real-time and during the job.

- Re-factored planner block rapid rate handling for the dynamic laser
power feature. Should have had no effect on how Grbl operates.","['commit_log_v1.1.txt,config.h,grbl.h,planner.c,planner.h,protocol.c,spindle_control.c,stepper.c']"
Sonny Jeon,2016-11-04,"Improved constant laser power per rate mode. Re-factored for flash size. Minor bug fixes.

- NOTE: This commit has largely been untested.

- Constant laser power per rate mode has been improved. Altered its
implementation to be more responsive and accurate.

- Based on LaserWeb dev feedback, only G1, G2, and G3 moves operate
with constant laser power mode. Meaning that G0, G38.x, and $J jogging
motions operate without it and will keep a constant power output. This
was specifically requested as a way to focus the laser by keeping the
laser on when not moving. Operationally, this shouldn’t alter how the
laser mode operates.

- Re-factored parts of the g-code parser and g-code state reports to
save a few hundred bytes of flash. What was done makes the code a bit
more unreadable (bad), but the flash space was in dire need. So, I’m
willing to live with it for now.

- Fixed a problem with $G g-code state reports. Showed `M0` program
pause during a run state. Now fixed to show nothing during a run state.
Also, `M30` program end was shown as `M2`. This was also corrected.

- Improved spindle stop override responsiveness by removing the
enforced spindle restoring delay. It’s not needed for a feature that is
user controlled.

- Fixed a bug with G2/3 arcs in inverse time mode.

- Updated the interface.md document to make it more clear how WPos: or
MPos: can be calculated from WCO:. Some GUI devs have failed to catch
this in the documentation.","['README.md,commit_log_v1.1.txt,interface.md,gcode.c,gcode.h,grbl.h,motion_control.c,planner.h,protocol.c,report.c,spindle_control.c,stepper.c']"
Sonny Jeon,2016-11-04,"Fixed a g-code parser issue caused by last commit.

- G-code parser refactoring in the last commit wasn’t tested. Found and
fixed issues with G28.1/30.1 and G38.x probe commands. They were not
being accepted due to a borked mantissa check.","['commit_log_v1.1.txt,gcode.c']"
Sonny Jeon,2016-11-12,"PWM calculation correction.

- The PWM calculation was a little bit off and has been corrected.

- Edited the unused settings strings to be smaller and just show what
the settings are, rather than include units. May include this in the
master build, if it fits.

- The minimum spindle PWM define in config.h needed to be update for
cpu map compatibilty.","['commit_log_v1.1.txt,config.h,grbl.h,report.c,spindle_control.c']"
Sonny Jeon,2016-12-03,"v1.1e: New laser features. G-code parser refactoring. CoreXY homing fix.

- Increment to v1.1e due to new laser features.

- After several discussions with some prominent laser people, a few
tweaks to the new laser mode has been installed.

- LASER: M3 behaves in a constant power mode.

- LASER: M4 behaves in a dynamic power mode, where the laser power is
automatically adjusted based on how fast Grbl is moving relative to the
programmed feed rate. This is the same as the  CONSTANT_POWER_PER_RATE
config.h option in the last version. NOTE: When not in motion in M4,
Grbl automatically turns off the laser. Again, it only operates while
moving!

- LASER: Only G1, G2, and G3 motion modes will turn on the laser. So,
this means that G0, G80 motion modes will always keep the laser
disabled. No matter if M3/M4 are active!

- LASER: A spindle stop override is automatically invoked when a laser
is put in a feed hold. This behavior may be disabled by a config.h
option.

- Lots of little tweaks to the g-code parser to help streamline it a
bit. It should no effect how it operates. Generally just added a parser
flag to track and execute certain scenarios a little more clearly.

- Jog motions now allow line numbers to be passed to it and will be
displayed in the status reports.

- Fixed a CoreXY homing bug.

- Fixed an issue when $13 is changed, WCO isn’t sent immediately.

- Altered how spindle PWM is set in the stepper ISR. Updated on a step
segment basis now. May need to change this back if there are any
oddities from doing this.

- Updated some documentation. Clarified why M0 no longer showing up in
$G and why a `1.` floating point values are shown with no decimals,
like so `1`.","['commit_log_v1.1.txt,change_summary.md,interface.md,jogging.md,config.h,gcode.c,gcode.h,grbl.h,jog.c,jog.h,motion_control.c,motion_control.h,planner.c,protocol.c,report.c,settings.c,spindle_control.c,stepper.c']"
chamnit,2016-12-04,"Fixed unintended laser mode pausing. Updated documentation. Min SS OVR lowered to 10%.

- [laser] Tested a working version and pushed the wrong one for the
last! 20161203 was pausing upon every spindle speed change. That’s not
right. Fixed so nearly all motions are passed through and does not stop.

- Minimum spindle speed override lower from 50% to 10%. Lasers could
use the lower speeds.

- Fixed a very minor bug related to G80 error checking. Allowed no
error with non-modal motions with axis words. Not correct and fixed.

- Fixed a compile error when disabling VARIABLE_SPINDLE

- [doc] Updated some obsolete documentation.

- [doc] Started a “Laser Mode” document that summarizes how Grbl’s new
laser mode works.","['commit_log_v1.1.txt,change_summary.md,laser_mode.md,realtime_cmds.md,settings.md,config.h,gcode.c,gcode.h,grbl.h,stepper.c']"
Sonny Jeon,2016-12-08,"Removed classic GUI interface. Fixed typo with line number support.

- [config] Permanently removed classic GUI interface support. This
unintentionally created a problem where some users/GUI devs used this
compatibility mode and did not update to the new interface. So, there
were two interfaces in use, rather than just one like it was intended.
This removal should help everyone by forcing all GUIs to update and
updated GUI not having to support yet another interface.

- Fixed typo with line number support in jog mode.","['commit_log_v1.1.txt,config.h,grbl.h,jog.c,report.c,settings.h']"
Sonny Jeon,2016-12-09,Update README.md,['README.md']
Sonny Jeon,2016-12-09,Update README.md,['README.md']
Sonny Jeon,2016-12-09,Update README.md,['README.md']
Sonny Jeon,2016-12-10,"Updated documentation. Cleaned up a bit.

- [doc] Updated the markdown documents for the v1.1 release.

- [doc] Removed references to classic GUI mode.","['build_option_codes_en_US.csv,commit_log_v1.1.txt,commands.md,interface.md,realtime_cmds.md,settings.md,report.c']"
Sonny Jeon,2016-12-11,Updated documentation.,"['commit_log_v1.1.txt,interface.md,jogging.md,laser_mode.md,interface_notes.md']"
Sonny Jeon,2016-12-12,"Updating steam.py streaming script

- Added push message capability to the stream.py streaming script. It
prints out as a `Debug:` string in the output.",['stream.py']
Sonny Jeon,2016-12-18,"Addressed optional PWM min value issue. Updated docs.

- [fix] Spindle PWM minimum value had some typos. Fixed the macros to
compile correctly. Only effects users that enable SPINDLE_MINIMUM_PWM.
The name changed to SPINDLE_PWM_MIN_VALUE for consistency sake.

- Updated the laser documentation.","['commit_log_v1.1.txt,laser_mode.md,config.h,cpu_map.h,grbl.h']"
Sonny Jeon,2016-12-19,"Fixed homing fail alarm handling. Re-integrated software debouncing.

- [bug] Fixed a homing fail issue, where the alarm was not being set
right, not cleared correctly. It would report the wrong code and enter
an infinite alarm loop. This was due to how alarm codes were altered a
while back. Now updated and fixed to show the right codes.

- [feature] Re-installed optional software debouncing for hard limit
switches. By request.","['commit_log_v1.1.txt,config.h,grbl.h,limits.c,motion_control.c,planner.c,protocol.c,report.c,report.h,system.c,system.h']"
Sonny Jeon,2017-01-03,"Spindle enable pin with variable spindle option fix.

- [fix] When USE_SPINDLE_DIR_AS_ENABLE_PIN is enabled in config.h, the
enable pin was not being set when spindle speed is zero. This behavior
should now be fixed.","['commit_log_v1.1.txt,grbl.h,spindle_control.c']"
Sonny Jeon,2017-01-14,"Tool number bug fix. Updated documentation.

- [fix] Tool numbers were not being tracked and reported correctly. Now
shows tool number values in $G when programmed.

- [fix] Added a max tool number value check to the g-code parser.

- [doc] Added a new error code for invalid tool number. Updated CSV and
interface documents.

- [doc] Added a implementation note for buffer state in status reports.
Don’t rely on this data for streaming.","['error_codes_en_US.csv,commit_log_v1.1.txt,interface.md,cpu_map.h,gcode.c,grbl.h,report.h']"
chamnit,2017-01-28,"v1.1f. Parking override control. Spindle enable pin option.

[ver] v1.1f update due to tweaks to interface from new parking override
control.

[new] Parking motion override control via new `M56 P0` and `M56 P1`
command, which disables and enables the parking motion, respectively.
Requires ENABLE_PARKING_OVERRIDE_CONTROL and PARKING_ENABLE enabled in
config.h. Primarily for OEMs.

[new] `M56` appears in the $G report when enabled.

[new] Five new build info identification letters. Some were missing and
a couple are new. Updated the CSV and documentation to reflect these
new items.

[new] Spindle enable pin configuration option to alter its behavior
based on how certain lasers work. By default, Grbl treats the enable
pin separately and leaves it on when S is 0. The new option turns the
enable pin on and off with S>0 and S=0. This only is in effect when a
user enables the USE_SPINDLE_DIR_AS_ENABLE_PIN option.

[fix] M4 is now allowed to work when USE_SPINDLE_DIR_AS_ENABLE_PIN is
enabled. Previously this was blocked and was problematic for laser
folks using M4.

[fix] Properly declared system variables as extern. Not sure how that
went unnoticed or why it worked up until now but it has.

[fix] EXTREMELY RARE. When AMASS is intentionally disabled and sent a
motion command that is _one step_ in length, Grbl would not actuate the
step due to numerical round-off. Applied a fix to prevent the round-off
issue.

[fix] Added a compile-time check for AMASS settings to make sure that
the numerical round-off issue doesn’t effect it. This would only happen
if someone set AMASS max levels to zero. It does not effect AMASS with
its current defaults.

[fix] Wrapped the mc_parking_motion() function in an ifdef for porting
purposes.

[fix] Fixed an issue when in inverse time mode and G0’s would require a
F word. This was not correct.

[fix] Added a note in the defaults.h file that MAX_TRAVEL values must
be positive. Some users were setting this negative and it was causing
issues.","['build_option_codes_en_US.csv,commit_log_v1.1.txt,change_summary.md,commands.md,interface.md,laser_mode.md,config.h,defaults.h,gcode.c,gcode.h,grbl.h,main.c,motion_control.c,motion_control.h,protocol.c,report.c,spindle_control.c,stepper.c,system.h']"
Sonny Jeon,2017-01-29,"Tidying up parking override control implementation

[new] Added a default configuration for the parking override control
upon a reset or power-up. By default, parking is enabled, but this may
be disabled via a config.h option.

[fix] Parking override control should be checking if the command word
is passed, rather than the value.","['commit_log_v1.1.txt,config.h,gcode.c,gcode.h,grbl.h,protocol.c,report.c']"
Sonny Jeon,2017-01-31,"Additional build info in the $I printout.

- [new] Added total available planner buffer blocks (15 shown, but
there are 16. one is used by the ring buffer and to execute system
motions) and serial RX buffer bytes. This information is useful for
GUIs to setup and optimize their streaming protocols easily.

[doc] Updated the interface document to reflect the change.","['commit_log_v1.1.txt,interface.md,grbl.h,report.c']"
Sonny Jeon,2017-02-23,"Fixed issue with M3 laser state changes and coincident targets.

[fix] When in M3 constant laser power mode, a change from G0 to G1
would not set the laser on, if G1 was passed with a coincident target.
Motion controller now checks for a coincident target situation and will
force a spindle sync when detected.","['commit_log_v1.1.txt,grbl.h,motion_control.c']"
Sonny Jeon,2017-02-23,"Restrict coincident target updates to M3 constant laser only.

- Restrict M3 forced updates when there is a motion block with a
coincident target. Force syncing of the spindle state can lead to some
pauses during a job that has coincident targets. That’s not
particularly desirable. This ensures M4 dynamic mode is not effected by
this force-sync.","['commit_log_v1.1.txt,motion_control.c']"
Sonny Jeon,2017-02-27,"Fixed shared build info code.

- The build info options of “two switches on an axis” and “homing init
lock” shared the same letter ‘L’. The former is now ’T’.","['build_option_codes_en_US.csv,commit_log_v1.1.txt,interface.md,grbl.h,report.c']"
Sonny Jeon,2017-03-02,"Fixed $G report issue with M7 and M8 both enabled.

[fix] When M7 and M8 are both enabled, $G report would show `M78`,
rather than `M7 M8`. This only effects systems that enable M7 mist
coolant in config.h. Not the default build.","['commit_log_v1.1.txt,grbl.h,report.c']"
Sonny Jeon,2017-03-19,Update README.md,['README.md']
Sonny Jeon,2017-03-19,"Housekeeping.

- Moved Grbl logo files to a separate repo.

- Added PocketNC FR4 defaults. Needs some additional work though to be
compatible.

- Updated README image links.","['README.md,COPYING,Grbl Logo 150px.png,Grbl Logo 250px.png,Grbl Logo 320px.png,Grbl Logo 640px.png,Grbl Logo.pdf,Grbl Logo.svg,defaults.h']"
Sonny Jeon,2017-03-24,"Added an error code for laser mode when VARIABLE_SPINDLE is disabled.

- When trying to enable laser mode with $32=1 and VARIABLE_SPINDLE is
disabled, the error code shown was improperly stating it was a homing
failure. Added an new error code specifically for the laser mode being
disabled without VARIABLE_SPINDLE.","['error_codes_en_US.csv,commit_log_v1.1.txt,interface.md,grbl.h,report.h,settings.c']"
chamnit,2017-05-31,"New nonlinear spindle speed PWM output model and solution. Updated scripts.

[new] A nonlinear spindle speed/PWM output option via a piecewise
linear fit model. Enabled through config.h and solved by a Python
script in /doc/script

[new] fit_nonlinear_spindle.py. A solver script that can be run on
http://repl.it for free. No Python install necessary. All instructions
are available in the script file comments.

[new] stream.py has been updated to include status reports feedback at
1 second interval.

[fix] stream.py bug fix with verbose mode disabled.","['commit_log_v1.1.txt,fit_nonlinear_spindle.py,stream.py,config.h,grbl.h,spindle_control.c']"
Sonny Jeon,2017-07-17,"Clean up and new streaming script check-mode feature.

[new] The stream.py streaming script now has a check-mode option, where it will place Grbl in $C check mode automatically and then stream the g-code program. It's a very fast way to check if the g-code program has any errors.

[fix] The debug variable was not initialized if the debug option was enabled in config.h

[fix] Updated error_codes CSV file to the same format as the others.","['error_codes_en_US.csv,commit_log_v1.1.txt,stream.py,grbl.h,main.c']"
Sonny Jeon,2017-07-31,"Hot fix for rare lowering feed override bug.

[fix] Squashed a very rare bug when lowering the feedrate (or rapid) override. When in the very strict set of circumstances with acceleration settings, override step size, and current speed, an internal calculation would cause Grbl to crash. The fix was an overlooked equality statement that should have been a less than or equal, not a less than.","['commit_log_v1.1.txt,grbl.h,stepper.c']"
Sonny Jeon,2017-08-01,"Improved fix for rare lowering feed/rapid override bug.

[fix] In the previous hot fix, there was still (rarer) potential for
very small floating point errors incorrectly handle an override
deceleration and crash Grbl. Re-factored the if-then statement in terms
of speed changes, rather than distance, to completely eliminate the
issue.","['commit_log_v1.1.txt,grbl.h,stepper.c']"
Sonny Jeon,2018-04-06,"Updated instructions in fit_nonlinear_spindle.py

- repl.it has changed since the last time fit_nonlinear_spindle.py was tested. Updated instructions.",['fit_nonlinear_spindle.py']
Jon,2018-06-09,Fix apparent error in restore masking that causes the call to coolant_set_state to not re-enable the mist (M7) output if it was previously enabled. (#469),['protocol.c']
Sonny Jeon,2018-06-14,"Spindle/coolant rare bug fixes. Free more flash.

[new] Altered the way default settings are stored and restored. Saved about 300 bytes(!) of flashed size. Should free up enough for certain configurations of CoreXY machines.

[fix] When the optional M7 mist coolant IO was enabled, coolant overrides was not disabling correctly.

[fix] Coolant override states was not restored correctly after a parking motion in certain situations. It would restore programmed state, rather than current overridden state.

[fix] Now allow coolant overrides to operate during jogging motion.

[fix] Invert control pin mask typo.

[new] Added a new build info feedback mechanism for enabling the safety door input pin.","['build_option_codes_en_US.csv,commit_log_v1.1.txt,interface.md,config.h,coolant_control.c,coolant_control.h,gcode.c,grbl.h,planner.h,protocol.c,report.c,settings.c,settings.h']"
Sonny Jeon,2018-11-12,"Update gcode.c

If statement bug fix related to jog motion modal group error checking.",['gcode.c']
Sonny Jeon,2018-11-12,"Update system.c

Correct control pin state checking within pin change interrupt. Improper if-else statements could lead to missed signal.",['system.c']
Sonny Jeon,2018-11-12,Update grbl.h,['grbl.h']
Sonny Jeon,2019-07-30,"Dual motor support for self-squaring gantry homing.

- New dual motor support feature for gantry CNC machines. An axis motor is  efficiently mirrored to a dedicated set of step and direction pins (D12/D13 or A3/A4) with no detectable loss of performance. Primarily used to independently home both sides of a dual-motor gantry with a pair of limit switches (second shared with Z-axis limit pin). When the limit switches are setup correctly, Grbl will self-square the gantry (and stay square if $1=255 is programmed). Beware use at your own risk! Grbl is not responsible for any damage to any machines.

- Dual axis motors is only supported on the X-axis or Y-axis. And deletes the spindle direction(D13) and optional coolant mist (A4) features to make room for the dual motor step and direction pins.

- Dual axis homing will automatically abort homing if one limit switch triggers and travels more than 5% (default) of the non-dual axis max travel setting. For example, if the X-axis has dual motors and one X-axis triggers during homing, Grbl will abort 5% of the Y-axis max travel and the other X-axis limit fails to trigger. This will help keep any misconfigurations or failed limit switches from damaging the machine, but not completely eliminate this risk. Please take all precautions and test thouroughly before using this.

- Dual axis motors supports two configurations:

- Support for Arduino CNC shield clones. For these, step/dir on pins D12/D13, and spindle enable is moved to A3 (old coolant enable), while coolant enable is moved to A4 (SDA pin). Variable spindle/laser mode option is NOT supported for this shield.

- Support for Protoneer CNC Shield v3.51. Step/dir on pins A3/A4, and  coolant enable is moved to D13 (old spindle direction pin). Variable spindle/laser mode option IS supported for this shield.

- Added Bob's CNC E3 and E4 CNC machine defaults.","['alarm_codes_en_US.csv,build_option_codes_en_US.csv,commit_log_v1.1.txt,config.h,cpu_map.h,defaults.h,grbl.h,limits.c,planner.c,report.c,spindle_control.c,stepper.c,system.h']"
Sonny Jeon,2019-08-25,Update system.c,['system.c']
Sonny Jeon,2019-08-25,Update grbl.h,['grbl.h']
Sonny Jeon,2019-08-30,Fixed typo bug effecting dual-axis build with Y.,"['grbl.h,report.c']"
Sonny Jeon,2019-08-30,Update log.,['commit_log_v1.1.txt']
