Commit_ID,Contributor,Date,Message,Files
9df29ad3b3fb769317d9c5560c54e89c92a71680,Simen Svale Skogsrud,2009-01-25,version 0.1,"['COPYING.txt,Makefile,config.h,gcode.c,gcode.h,main.c,motion_control.c,motion_control.h,nuts_bolts.h,readme.txt,serial_protocol.c,serial_protocol.h,spindle_control.c,spindle_control.h,todo.txt,wiring_private.h,wiring_serial.c,wiring_serial.h']"
8108f64c746fde95a0e5ff205f21207a2dfedda5,Simen Svale Skogsrud,2009-01-25,Added status in readme,['readme.txt']
bd9c1a31f6efce93975491b754c318240b435032,Simen Svale Skogsrud,2009-01-26,minor edit,['readme.txt']
323118546d5e72646443c6606a2c9a44fe32c28f,Simen Svale Skogsrud,2009-01-26,renamed file,['COPYING']
8530c7d2fc35bf7ed1edb112c8672a7b0e665e2c,Simen Svale Skogsrud,2009-01-27,added testbed for the arc interpolator i will be using,['arc.rb']
3ead6a02e743af8b1cda4beddc359a2614c4bbf8,Simen Svale Skogsrud,2009-01-27,minor edit,['readme.txt']
2207acdf2bb7a2cfa9c031c743acd6b9188f401f,Simen Svale Skogsrud,2009-01-27,minor edit,['readme.txt']
ac2e26fda91d116e21600dfaf769bd670a60b632,Simen Svale Skogsrud,2009-01-28,added buffered stepping support and the rudiments of the arc-interpolator,"['Makefile,arc.rb,config.h,main.c,motion_control.c,motion_control.h,stepper.c,stepper.h,todo.txt']"
a9d41c6c646d68f9b91d0bfda72deca2faf3c258,Simen Svale Skogsrud,2009-01-29,tweaks and bugfixes,"['Makefile,gcode.c,motion_control.c,readme.txt,serial_protocol.c,stepper.c,stepper.h,todo.txt,wiring_serial.c']"
73a357e512114f16822514f32ba4ea13545b9e6e,Simen Svale Skogsrud,2009-01-29,minor edit,['motion_control.c']
8c18e2659d5c5cee0555206f1b6c900f7e587fa9,Simen Svale Skogsrud,2009-01-29,motion control level support for arcs. No gcode yet,"['motion_control.c,motion_control.h,todo.txt']"
0c8004357aa01487687ea804bf79c1b8b906d3db,Simen Svale Skogsrud,2009-01-30,optimized arc code for size and speed,"['motion_control.c,motion_control.h']"
5f5bd35ddb48b0ff5bc89648c85cf93680c79235,Simen Svale Skogsrud,2009-01-30,minor optimizatin for size,['motion_control.c']
68c13981b3424339e7c1adc0c0aa0ef6c562e1b4,Simen Svale Skogsrud,2009-01-30,enabled interrupts and mad buffer flushing atomic,['stepper.c']
02f6699b0aaf3feac3380a71fcc663f984fe02ac,Simen Svale Skogsrud,2009-01-30,minor edits,"['gcode.c,motion_control.c']"
cb6b32f982288b3fedc9278e9d4191367ece3610,Simen Svale Skogsrud,2009-01-30,updated todo,['todo.txt']
e21064bd866b90ced187fdf0441698b6a2df42e8,Simen Svale Skogsrud,2009-01-30,gcode support for offset arcs,"['Makefile,theta.rb,gcode.c,geometry.c,geometry.h,todo.txt']"
9799955555bdde74962bb7fe1f4caa5e78dce632,Simen Svale Skogsrud,2009-02-01,arc code complete with support for both R and IJK style blocks,"['arc.rb,config.h,gcode.c,geometry.c,geometry.h,motion_control.c']"
50a9f7808881f268a8e96e7f220f31a7da627d86,Simen Svale Skogsrud,2009-02-03,lots and lots of bugfixes after running on reals hardware for the first time,"['Makefile,arc.rb,theta.rb,config.h,gcode.c,gcode.h,geometry.c,geometry.h,unrolled_arc.c,main.c,motion_control.c,motion_control.h,nuts_bolts.h,serial_protocol.c,serial_protocol.h,stepper.c,stepper.h,echotest.rb,gcodetest.png']"
5797812f4aec89665a4f2d6b18b2d69d6b26d4a4,Simen Svale Skogsrud,2009-02-03,deleted a stray png,['gcodetest.png']
7f9a9d27e2303199e6d430b6ce8e024d638a2832,Simen Svale Skogsrud,2009-02-03,stepper signals looks good on scope,"['motion_control.c,nuts_bolts.h,stepper.c,echotest.rb,gcodetest.png']"
d012440518695d44ad410adfe905b12d385b1a20,Simen Svale Skogsrud,2009-02-04,presumably fixed the feed rate computation,"['config.h,motion_control.c,serial_protocol.c,serial_protocol.h,stepper.c,todo.txt']"
6c3a6a25d5b34d9a1cdf02d342ccf700dbcebfc3,Simen Svale Skogsrud,2009-02-08,"pace calculation correct, arc algorithm correct, support for negative R","['config.h,gcode.c,motion_control.c,console,proxy,serial_protocol.c,echotest.rb,gcodetest.png,todo.txt']"
8a0c9fd1808f48b912d69bd7a808f23295c500aa,Simen Svale Skogsrud,2009-02-08,updated readme,['readme.txt']
c07a32258950da2de2bb0c809e14ab9d491b67aa,Simen Svale Skogsrud,2009-02-08,fixed buffering of pace changes and general cleaning,"['gcode.c,main.c,motion_control.c,stepper.c,todo.txt']"
05bacc436e7ede1a760aac4f064d81e74af8b7c1,Simen Svale Skogsrud,2009-02-08,"optimized for size, shaved 2k","['gcode.c,motion_control.c,motion_control.h,stepper.c,stepper.h']"
3e5e866115e5b2bd90d6b518c65b3b559aea094b,Simen Svale Skogsrud,2009-02-08,shaved ~100 bytes of code space,['gcode.c']
2992683c8dd68546ac85bd7d475bff9df1578622,Simen Svale Skogsrud,2009-02-08,optimized for size and did some housekeeping,"['gcode.c,motion_control.c,motion_control.h,stepper.c,todo.txt']"
c2981be94a08cde722fa7d209ad260a44b309fd3,Simen Svale Skogsrud,2009-02-09,added code to estimate steps in arc in order to support helical motion,"['geometry.c,geometry.h,motion_control.c,stepper.c,stepper.h']"
8f3a69b37ed30cc1694cb38432579e64d6f0f2a6,Simen Svale Skogsrud,2009-02-09,edit,['motion_control.c']
e257fc195c0853eb48da65c41a7c3fe577ba2a9f,Simen Svale Skogsrud,2009-02-11,support for helical motion,"['gcode.c,gcode.h,motion_control.c,motion_control.h,stepper.c,stepper.h']"
9e6d62e531f63eb62fad076f2a40f94bfa40885a,Simen Svale Skogsrud,2009-02-11,tiny edit that saved a lot of bytes,['gcode.c']
bf38fae67bfe95b10b73e199850479267ffaad78,Simen Svale Skogsrud,2009-02-11,minor edits,['motion_control.c']
356517c6f226f9c522130c851b0dbeeadcf62e5e,Simen Svale Skogsrud,2009-02-11,updated todo,['todo.txt']
2bd984a734fef0e63a4c37f58b7863d5f8558647,Simen Svale Skogsrud,2009-02-15,configurations and adjustments to protocol,"['config.h,gcode.c,motion_control.c,readme.txt,console,proxy,serial_protocol.c']"
ddcdce26402ca9df9e48bfc7e083228a65610a59,Simen Svale Skogsrud,2010-01-04,minor revision,"['.gitignore,config.h,todo.txt']"
2b0e19993d6df97b1408d37204d87d5b1b098439,Simen Svale Skogsrud,2010-01-05,removed support for echoing of steps via serial,"['gcode.c,serial_protocol.c,stepper.c']"
df271c82dadffa63fcbc80f49d2a06eb058d7e83,Simen Svale Skogsrud,2010-01-05,fixed en operator precedence bug with step mask calculations,"['config.h,stepper.c']"
ed400693b3e58373743e00b0e2f1051817605a1b,Simen Svale Skogsrud,2010-01-06,fixed feed rate calculation,"['config.h,motion_control.c']"
960444fb9780d150b7a8277e03d0ec51e626b9cf,Simen Svale Skogsrud,2010-01-06,fixed feed rate calculation,['motion_control.c']
c669a7562c90219028b6f7ec74bf1ce56196f509,Simen Svale Skogsrud,2010-01-06,updated readme,['readme.txt']
65b696f2f9485cb4083a31039f92f1b5d7e65e95,Simen Svale Skogsrud,2010-01-06,added a simple ruby-script to stream gcode and made serial protocol more reprap-like,"['stream,stream.rb,test.gcode,serial_protocol.c']"
6ac3b3f2e608984b9dfabf30c03dda160f30219d,Simen Svale Skogsrud,2010-01-07,added some gcode to test with,"['braid.gcode,zoetrope.gcode,motion_control.c,stream.rb']"
a42c03601d6ee7dc4267fce5293ad53c0500cffa,Simen Svale Skogsrud,2010-02-27,"Fixed a number of bugs caused by using abs() on floats and long ints. Added support for selectively inverting bits of the stepping port. Debugged, optimized and cleaned up timing code for the step-pulses.","['Makefile,config.h,gcode.c,braid_two_decimals.gcode,miller.gcode,geometry.c,main.c,motion_control.c,console,stream.rb,serial_protocol.c,stepper.c,stepper.h,wiring_serial.c']"
551b4ed274c5801ac501575bb00f081c5fb9b7b3,Simen Svale Skogsrud,2010-02-27,fixed a problem with the direction-pins,"['config.h,stepper.c']"
36fd3a9bfbc858997b297983569112dc9e223e68,Simen Svale Skogsrud,2010-03-02,"improved the serial protocol, added some debug pins for a while","['main.c,motion_control.c,serial_protocol.c,stepper.c']"
2be1f473cd5788fec55d6659765e105d0c0916eb,Simen Svale Skogsrud,2010-03-02,first stab at replacing step-buffering with line-buffering,"['config.h,braid_cut2d.gcode,motion_control.c,stepper.c,stepper.h']"
df243d2490f176254f5d3fad79f6bd71926aa883,Simen Svale Skogsrud,2010-03-03,"successfully maintained 30khz, lots of optimization of code and buffering allocation","['gcode.c,motion_control.c,stream.rb,stepper.c,wiring_serial.c']"
49ca861dc03b0782808bea2fb7e6c91289f6f5c0,Simen Svale Skogsrud,2010-03-03,added segmented arc support with configurable segmentation,"['config.h,gcode.c,motion_control.c,stepper.c,stepper.h']"
7e152851cca82ffa59d8d4a9cfa3f0b66f2df92b,Simen Svale Skogsrud,2010-03-03,general clean up after refactoring,"['config.h,main.c,motion_control.c,serial_protocol.c,serial_protocol.h,stepper.c,stepper.h,todo.txt']"
9a41b3a4fb18ed9e4b12fc8b9826245e26da32a7,Simen Svale Skogsrud,2010-03-03,deleted more code following line-buffer refactoring,"['gcode.c,geometry.c,geometry.h']"
898b4ca99dc08c9d113617fa09d5e485ffb42525,Simen Svale Skogsrud,2010-03-03,further refactoring debris extraction,"['Makefile,gcode.c,gcode.h,geometry.c,geometry.h,motion_control.c,motion_control.h,nuts_bolts.h,stepper.c,stepper.h']"
e8f94e6a87f3d8755ec8217fd0edf8ff89391efb,Simen Svale Skogsrud,2010-03-03,removed void credits,['motion_control.c']
b2de9abf86d4b2b33ceb97b589f0ba1632b0a57a,Simen Svale Skogsrud,2010-03-03,removed more orphaned code,"['arc.rb,theta.rb']"
01ad93fbedbe62dd8043b3df887f077573e9fdb0,Simen Svale Skogsrud,2010-03-03,minor edit,['gcode.c']
48855ec977ea3381e0bcfb5a8696b30b8d2c3e65,Simen Svale Skogsrud,2010-03-03,added back a line that was not really refactoring debris come to think of it,['stepper.c']
db193f4336efee8c4d7e48a55dfd1dae34d66330,Simen Svale Skogsrud,2010-03-03,cleaned up stepper signal in junctions between short line segments,['stepper.c']
b85b575b9b815b15af0a26604235b8d8e6194f65,Simen Svale Skogsrud,2010-03-03,added protection against retriggering stepper irq,['stepper.c']
b9c3ea02fb4bf3bfd47c036817ee9284801601c2,Simen Svale Skogsrud,2010-03-03,adjustments to retriggering protection,['stepper.c']
58ad1ba50933ef048b62552504408bed54f81eb0,Simen Svale Skogsrud,2010-03-04,minor edits after verifying refactored grbl on real hardware,"['Makefile,config.h,braid_cut2d.gcode,main.c,motion_control.c,stream,stepper.c']"
c57f5ae86fd53712c4bac74ce32fd9c3d445d6b2,Simen Svale Skogsrud,2010-03-04,Switched to linebuffer buffering in main branch. Updated readme,['readme.txt']
a6b8d73044dd2c3551ff1dd918f5e494bf7acb1a,Simen Svale Skogsrud,2010-03-05,removed a warning,['stepper.c']
b8ba8a4231676eb1bec9b73dd5862f18188c2977,Simen Svale Skogsrud,2010-03-07,Added runtime configurable global settings with eeprom persitence,"['Makefile,config.c,config.h,eeprom.c,eeprom.h,gcode.c,main.c,motion_control.c,readme.txt,stepper.c,todo.txt,wiring_serial.c,wiring_serial.h']"
06a31cd94cb88a78f2d6fd5d98abb850a9746577,Simen Svale Skogsrud,2010-03-07,updated readme,['readme.txt']
3c98837a7083b386cf9840854cd58b3d12e4612a,Simen Svale Skogsrud,2010-03-07,"purged legacy code, updated todo","['unrolled_arc.c,todo.txt']"
e409f10047fb8e3d2265513abb2d8144b00d9b78,Simen Svale Skogsrud,2010-03-07,moved all strings to pgm-memory,"['config.c,config.h,console,stream.rb,serial_protocol.c,stepper.c,wiring_serial.c,wiring_serial.h']"
937c70cb50e0eb0c91f5f1c7ed2d3c470cb30962,Simen Svale Skogsrud,2010-03-14,Grbl can now take advantage of the extra memory in the 328,"['Makefile,stream.rb,serial_protocol.c,stepper.c,wiring_serial.c']"
1088c402ad9fc811aeea434befe348161b0d53d9,Simen Svale Skogsrud,2010-04-22,fixed a string wrongly stored in SRAM,['config.c']
0170ba0dc54f5c4124fbccb17c4bf22e7e10f5c1,Simen Svale Skogsrud,2010-06-18,updated readme,['readme.txt']
5613aa706fa66171f50c2b9dd28b3513e3ac8e07,Simen Svale Skogsrud,2010-06-18,the stream script will no longer reset the arduino before it completes the last couple of operation in a g-code-file,['stream.rb']
703d812b85f6c4065e9b366ee8300e34c4697348,Simen Svale Skogsrud,2010-06-28,rough accelleration stuff,"['acceleration.c,acceleration.h,config.c,config.h,motion_control.c,console,stream.rb,stepper.c']"
287310735e85473e00d6b95f3fb95e2a5b8fc4b2,Simen Svale Skogsrud,2010-07-02,added twitter link,['readme.txt']
2f847a1f3349c81c86f442f710f39ac8749b5387,Simen Svale Skogsrud,2010-07-02,support both CR and LF and CRLF line termination,['serial_protocol.c']
f93d0e8132b6eef2e18bf13c0521b7e0cb9d7508,Simen Svale Skogsrud,2010-07-03,completed support for separate feed-rate for G0-operations,['gcode.c']
d0f64d8f65923be9abd16139f185ce2d374ecaba,Simen Svale Skogsrud,2010-07-03,fixed the inches->mm conversion bug and some general cleanup,"['config.h,gcode.c,serial_protocol.h']"
0ac1731488e31737384db1146b9d3e498bd123c3,Simen Svale Skogsrud,2010-07-08,minor edits,"['config.h,gcode.c,console,stream,stream.rb,todo.txt']"
23da1ffa46727c9eb7c32bfc5443f01551b13aea,Simen Svale Skogsrud,2010-07-08,Merge branch 'bugfixes',['']
48b596c2fe7f8d170cf8873a53aaa5418b23b370,Simen Svale Skogsrud,2010-12-20,"added code with merge conflict as note to self, accelleration will just have to wait","['.gitignore,Makefile,accelleration.h,config.c,config.h,nuts_bolts.h,stepper.c']"
e0f3dcbe43beb10cd9f53512824c4f0cdecf9d56,Simen Svale Skogsrud,2011-01-03,"stepper.c now has 90% of acelleration support built in except for the planner, still som known conflicts to mark rough spots that need attention later","['acceleration.c,motion_control.c,stepper.c']"
b628a4aabfdca9ebd4a9783c1721a3ae89999de2,Simen Svale Skogsrud,2011-01-14,added basic accelleration management with trapezoid accelleration profiles but no look ahead optimization (coming next patch),"['Makefile,accelleration.h,config.c,config.h,gcode.c,motion_control.c,motion_control.h,acceleration.c,acceleration.h,nuts_bolts.h,console,stream.rb,stepper.c,stepper.h']"
49a16cb777e8ca4e5c62665436ac29b7021c0bf9,Simen Svale Skogsrud,2011-01-14,refactored block buffer into separate module motion_plan pending the addition of the actual look ahead planner,"['Makefile,accelleration.h,config.c,config.h,gcode.c,gcode.h,main.c,motion_control.c,motion_control.h,motion_plan.c,motion_plan.h,acceleration.c,nuts_bolts.h,console,serial_protocol.c,serial_protocol.h,spindle_control.c,spindle_control.h,stepper.c,stepper.h,todo.txt']"
0be21a903443d16684354523af931b3233f006f2,Simen Svale Skogsrud,2011-01-14,eliminated an annoying constant that broke my cleanly layered abstractions,"['config.h,motion_plan.c,motion_plan.h,stepper.c,stepper.h']"
7327b8258515142765717cc68c324b5544603c8f,Simen Svale Skogsrud,2011-01-14,interface to enable or disable acceleration management,"['main.c,motion_plan.c,motion_plan.h']"
d89b86d3bf44981e172b85139baff8d34f10033c,Simen Svale Skogsrud,2011-01-14,determined the SRAM requirements as part of the build process (requires ruby),['Makefile']
5880e55ce997227501f5bd90423974a7be6b6f03,Simen Svale Skogsrud,2011-01-15,"pcomplete, fully untested, support for accelleration management with look ahead optimization, finally","['Makefile,config.c,config.h,main.c,readme.txt,stepper.c,stepper_plan.c,stepper_plan.h']"
849cfe6812f7c8844e1913becc794400c535fab0,Simen Svale Skogsrud,2011-01-15,purged some unneeded files,"['braid.gcode,braid_cut2d.gcode,braid_two_decimals.gcode,miller.gcode,zoetrope.gcode,acceleration.c,acceleration.h']"
c9df285604fe75d4b43adc314860221722f4fe20,Simen Svale Skogsrud,2011-01-15,removed one more extraneous file,['todo.txt']
2f18cf90b472209232463b61466a26dcdaac0280,Simen Svale Skogsrud,2011-01-17,added DS_Store to gitignore,['.gitignore']
b33cf8b746dff9e764a95c03d5f50010614289e5,Simen Svale Skogsrud,2011-01-17,added note about fuses in Makefile,['Makefile']
4103e6ca000c0b6a5a2666077075d8ab83a5433d,Simen Svale Skogsrud,2011-01-22,"still not running, but a lot further along","['config.c,config.h,main.c,console,serial_protocol.c,stepper.c,stepper_plan.c,stepper_plan.h']"
8325bfb96e4c4e75c529db4a8647f40258f66e32,Simen Svale Skogsrud,2011-01-23,the trapezoid generator seems to be working,"['stepper.c,stepper_plan.c']"
0bc0fd77577e9c8b629f3cb9dfdde8759fa52f7e,Simen Svale Skogsrud,2011-01-24,"look ahead planner complete and enabled save the acceleration limiting forward scan. Not tested on real hardware, just logic analyzer","['console,stepper.c,stepper_plan.c']"
32c038ddd369259c53b42189cff0f50049625c83,Simen Svale Skogsrud,2011-01-24,"acceleration management implementation complete, now ready for testing on actual real machine",['stepper_plan.c']
c481c29dc52c36fedacf9c12f46a834aac05bca9,Simen Svale Skogsrud,2011-01-24,added useful comments about the algorithms used in the acceleration planner,"['stepper_plan.c,stepper_plan.h']"
4869e7b1ccc0e3e69cedbe7008f7ec067571dfb4,Simen Svale Skogsrud,2011-01-24,reallocated debug pin to time replanning,"['stepper.c,stepper_plan.c']"
a24fe197200a78b375c5409520b59e39aff7b1ae,Simen Svale Skogsrud,2011-01-24,updated settings version number. Old settings must be reset now that we have changed the format of the settings,"['config.c,config.h']"
5977bd37488e3cac4d40e92a62c552cccac4d605,Simen Svale Skogsrud,2011-01-25,reorganized functions somewhat,['stepper_plan.c']
0c262b03c28b0308c151f165e19084b0ed6858a2,Simen Svale Skogsrud,2011-01-25,eliminated step down-counter in stepper.c,"['stepper.c,stepper_plan.c']"
5f005f59f12178e9abe696445926153c4baf8150,Simen Svale Skogsrud,2011-01-25,cleanup,['stepper_plan.c']
d2cbca36e89c408bb86de71eed79858e88905e3b,Simen Svale Skogsrud,2011-01-25,cleanup,['stepper_plan.h']
3a7ae13003c7b2b1327c88541b59df82eaad1608,Simen Svale Skogsrud,2011-01-25,updated readme,"['readme.textile,readme.txt']"
c8f71cf0332cf592518a3311ab6c3bda49cbac48,Simen Svale Skogsrud,2011-01-25,cleaned up stepper.c,['stepper.c']
db377f18f3d4d63cfe16cd876fc6d55bfa1653ea,Simen Svale Skogsrud,2011-01-25,updated readme,['readme.textile']
4dbe7c4833f63c97968823a251929eb9bec0515b,Simen Svale Skogsrud,2011-01-25,added high-level api-call for enabling or disabling the acceleration manager,"['motion_control.c,motion_control.h,stepper_plan.c']"
25383790e229171d41dacd98ce4bbade18ef579f,Simen Svale Skogsrud,2011-01-25,updated struct types to use typedefs and conform to Micael Barrs Embedded C Coding Standard,"['config.c,config.h,gcode.c,stepper.c,stepper_plan.c,stepper_plan.h']"
c72efdaf627bee1c96ed2d4648fc2190a14c022b,Simen Svale Skogsrud,2011-01-25,purged an unused typedef,['wiring_private.h']
d8e2778b7bd737fe9b779ffc638f8cf60c3594df,Simen Svale Skogsrud,2011-01-25,"bye bye support for atmega 168, your flash space has overflowed","['stepper.c,stepper_plan.h,wiring_serial.c']"
35064b53e99f2af984ee46a6d5e4f7aea27ec782,Simen Svale Skogsrud,2011-01-25,made local variables static,"['gcode.c,serial_protocol.c,stepper.c,stepper_plan.c']"
35f499c00c2c703f42eb91963dedd72ae3b2aabd,Simen Svale Skogsrud,2011-01-25,minor edits,['stepper.c']
a7b596caac9bf27dce93e9e537b2bb1d94054e33,Simen Svale Skogsrud,2011-01-26,configured avr-gcc for dead code removal,['Makefile']
f5cf3195a8ede30c72e2fb0fee3fe54a8cfb12f9,Simen Svale Skogsrud,2011-01-31,probably fixed a bug that would crash grbl after ~20 commands,['stepper_plan.c']
4562ee7fe91a0eb0ad203d061b27f672b77cf1ca,Simen Svale Skogsrud,2011-01-31,merged master,['']
bf4f75d6320404c097290b8122bd2aa9de6f0393,Simen Svale Skogsrud,2011-01-31,cleaned up formatting gcode.c,['gcode.c']
9b292ffe3cbdb2bd73856b0148b9d3957be7aeb8,Simen Svale Skogsrud,2011-01-31,added support for silently upgrading from old settings record w/o accelleration parameters,"['config.c,config.h']"
5694310a408e5c3183f6f40817389994b221e228,Simen Svale Skogsrud,2011-01-31,formatting,"['eeprom.c,console,stepper.c']"
dad9db1b02c2f9f844b4962fc63858776b359ce4,Simen Svale Skogsrud,2011-01-31,formatting,"['gcode.c,main.c,motion_control.c,motion_control.h,nuts_bolts.h,stepper_plan.c']"
420641d13d11063eafc259baac3225c4c22fd8ad,Simen Svale Skogsrud,2011-02-03,"added the new, more optimal pin configuration",['config.h']
4b63cf3ab51a177dbba2624b7258151b5be851b0,Simen Svale Skogsrud,2011-02-03,small fixes after testing on real hardware. Still no chaining of motions and something odd with arcs,"['config.h,motion_control.c,console,stepper_plan.c']"
e68e9cdf7c65f6c4448413fc04cc0b039caeef19,Simen Svale Skogsrud,2011-02-03,ousted numerous small bugs in acceleration-planner,['stepper_plan.c']
f4b9da1ecb37526f1c6d1e6652d41416a580ef13,Simen Svale Skogsrud,2011-02-03,acceleration management is disabled during arc-motions until the two can be made to play nice together,['motion_control.c']
b44577f69f136d254ee594eec39a47a395c40ae7,Simen Svale Skogsrud,2011-02-03,small error in trapezoid-calculation,['stepper_plan.c']
0bd0ba6e6e3fa21faef2fb9c645bb586f6cc7ce7,Simen Svale Skogsrud,2011-02-04,eliminated an old header file,['wiring_serial.c']
59a9b640876c4abb8a25560cde99fd403f6b4f59,Simen Svale Skogsrud,2011-02-04,"removed a grave little bug in the planner and added a baseline safe speed so that motion sequences do not attempt to go to speed 0, but to a safe, higher speed based on the max_jerk setting","['stepper.c,stepper_plan.c,stepper_plan.h']"
f38c5016ed7de5f1dea046a34e7f368ce85b49a2,Simen Svale Skogsrud,2011-02-04,small fry,"['console,wiring_private.h']"
9f5365aac9ed8b79e767d8a811fa1a01f74ce75d,Simen Svale Skogsrud,2011-02-04,fixed a bug where F-commands never would modify feed-rate of G0-operations,['gcode.c']
682e23eb7b1fc46fb9d9e99b96f780ab398cd571,Simen Svale Skogsrud,2011-02-05,added error messages and dropped echoing of command input,"['gcode.h,serial_protocol.c']"
d00947a23aaee7c816dcd4a087b6410aa3639ae2,Simen Svale Skogsrud,2011-02-05,renamed config.* to settings.*,"['Makefile,gcode.c,main.c,motion_control.c,serial_protocol.c,settings.c,settings.h,spindle_control.c,stepper.c,stepper_plan.c']"
6d3ff506e86a8c4dd638e2791520a01d0fab33ad,Simen Svale Skogsrud,2011-02-05,refactored compile time settings back into a new file called config.h,"['config.h,motion_control.c,serial_protocol.c,settings.c,settings.h,spindle_control.c,stepper.c,stepper_plan.c']"
7092b0e1fe626786b0524671e2a93d50a2a3201e,Simen Svale Skogsrud,2011-02-05,renamed public methods of settings module to include module name,"['gcode.c,settings.c,settings.h']"
cdcc7bf86ef5a95243dd268e9d99b0332d127c2b,Simen Svale Skogsrud,2011-02-06,cleaned up methods for enabling/disabling acceleration manger,"['motion_control.c,motion_control.h,stepper_plan.c,stepper_plan.h']"
c42741032fe699c3cd37f4e5d8dd91dc9c5a20aa,Simen Svale Skogsrud,2011-02-06,Refactored line buffering to eliminate state from motion control and centralize tracking of position. UNTESTED: NEEDS TESTING,"['main.c,motion_control.c,motion_control.h,stepper.c,stepper.h,stepper_plan.c,stepper_plan.h']"
799548c013daa06cd921f1479e46fdf8015ec618,Simen Svale Skogsrud,2011-02-06,replaced use of magical numbers for axis reference with constants,"['settings.c,stepper_plan.c']"
52dda8713e31593ebaa682f0f822c97a16147579,Simen Svale Skogsrud,2011-02-06,purged an unused method,"['stepper.c,stepper.h']"
ba13ddadd0390befd0d659c879558572e246d049,Simen Svale Skogsrud,2011-02-06,refactoring that improved compartmentalization between stepper and stepper_plan modules,"['stepper.c,stepper_plan.c,stepper_plan.h']"
bdeb551ea202f77f162e2ad7b460dc913c9ecb66,Simen Svale Skogsrud,2011-02-07,missing edit,['stepper_plan.h']
29f914391dee2f80b4a4c92971d1c556f239fcd8,Simen Svale Skogsrud,2011-02-07,peh. Missing edit II,['stepper_plan.c']
041a8b8a3ff526477b98f09f5def6589b4e5efee,Simen Svale Skogsrud,2011-02-07,purged debug code,"['stepper.c,stepper_plan.c']"
fd18ab455f7c19e81d4612d48aaf6a932f2d1f9e,Simen Svale Skogsrud,2011-02-10,config command prevents gcode parsing,['gcode.c']
f95f48763a426bc0f7a60cd6330c20d0381875a2,Simen Svale Skogsrud,2011-02-10,"corrections in planner, including speed estimation",['stepper_plan.c']
9b022a6f4faf6e3786ed904547b011dcfb78832c,Simen Svale Skogsrud,2011-02-10,minor tweak eliminates 'ok' message after errors,"['console,serial_protocol.c']"
c5e0285e80291641ff2e729bd759bd8f170ed367,Simen Svale Skogsrud,2011-02-10,eliminated som debug code,['stepper.c']
fb5db05b6dc16f2975ec7026ba4c426a4da20f8e,Simen Svale Skogsrud,2011-02-10,eliminated some more debug code,['main.c']
fc1c1b7e093b4c9a85a8e8d3cacf6b51bb6ed82c,Simen Svale Skogsrud,2011-02-10,corrected speed calculation in planner (untested on hardware),"['stepper.c,stepper_plan.c']"
a4c64945e08ae8fcd8b034e4cce9aeef98792997,Simen Svale Skogsrud,2011-02-11,refactored stepper_plan -> planner (untested),"['Makefile,main.c,motion_control.c,planner.c,planner.h,stepper.c,stepper.h']"
07f8623098edacb99cf11ea37ec6ad7f61df4e1c,Simen Svale Skogsrud,2011-02-11,smoothed a wrinkle,['motion_control.c']
6dc81b41c9951199b22694c45257f81480e88be3,Simen Svale Skogsrud,2011-02-11,formatting + moved current position getter to planner,"['motion_control.c,planner.c,planner.h,stepper.c,stepper.h']"
480f898c2b1497dcb3404db74627dfb25be2e4d4,Simen Svale Skogsrud,2011-02-11,eliminated the mc_line-method and replaced it with a macro forwarding calls directly to the planner (untested),"['motion_control.c,motion_control.h']"
80afa2f40340da4af88151284c37d658e77c4ff6,Simen Svale Skogsrud,2011-02-11,formatting,['motion_control.h']
d96e48cecf9b19e44f4dd7624c7a8dff98603991,Simen Svale Skogsrud,2011-02-11,"added a line to disable baud doubling, but commented out for the time being until I can test it on real hardware",['wiring_serial.c']
ef61efbf704af5ca736e87905155fefedea8be83,Simen Svale Skogsrud,2011-02-11,makes sure steppers cruise at exactly nominal rate to eliminate rounding errors. Possibly fixes the problem where some moves have a long tail of slow steps. (Untested),"['planner.c,stepper.c']"
3b51a4b81ef073f87026983e740fb747f29b17c2,Simen Svale Skogsrud,2011-02-11,added one line to disable baud doubling on Uno,['wiring_serial.c']
33f014aa744b3858f11f0ae79c540aeb18517fd1,Simen Svale Skogsrud,2011-02-11,eliminated an abstraction violation where motion_control needed position information from the planner (untested),"['gcode.c,motion_control.c,motion_control.h,planner.c,planner.h']"
dce597be45b0cb054159055aeb9d9919e4785b82,Simen Svale Skogsrud,2011-02-11,corrected the handling of status codes so that 'ok' will not be default response in the event of an undefined error code (untested),['serial_protocol.c']
977c4948bd2156cda7676010d9c0d744522942a0,Simen Svale Skogsrud,2011-02-11,syntax tweak,['gcode.c']
bfd8cfa7ddddf5f0b2a398c04ee0b2e4ffd9b010,Simen Svale Skogsrud,2011-02-11,slimmed down nuts_bolts,"['nuts_bolts.h,planner.c,stepper.c']"
f42385265700ac13ad048c2d75d2543c6987c8af,Simen Svale Skogsrud,2011-02-11,added som documentation for other contributors,"['resources.txt,structure.txt']"
ff73645a14ef72de7f2a180fcdb9b6c5394ea953,Simen Svale Skogsrud,2011-02-12,"cleanup, protected some more module variables as static","['main.c,motion_control.c,motion_control.h,planner.c,planner.h,stepper.c']"
c02a6e23664511b01f0d7859c4432c79a3050feb,Simen Svale Skogsrud,2011-02-16,"possible improvement on the long, slow tail problem",['planner.c']
1ed2195e11c4aae1797b49fae2ed8c7883d5b3ed,Simen Svale Skogsrud,2011-02-16,a new (slightly inelegant) stab at eliminating the slow tail problem,"['planner.c,planner.h,trapezoid_simulator.rb,stepper.c']"
ee6436c62541b3c46c4e86d7210d135a4e7738a3,Simen Svale Skogsrud,2011-02-17,increased default acceleration ticks per second,['config.h']
3f172fa276a7fbebb5628521e4768b034781e701,Simen Svale Skogsrud,2011-02-17,gcode streaming works,"['stream.rb,serial_protocol.c']"
31635481ad10a483427067a79307c1f9a3dd117f,Simen Svale Skogsrud,2011-02-17,added informative error message for people building 0.6 for atmega168 (impossible),['main.c']
c09b05fcbdaaa3e3b50fca38374c27d43ae7ad21,Simen Svale Skogsrud,2011-02-17,updated readme with info for users of 168's,['readme.textile']
5eddbabcd3fdafdd44994e64927724303ba571c4,Simen Svale Skogsrud,2011-02-17,added another note for existing users,['readme.textile']
23462de85acc595ba4a36783c3b45743e8c86b26,Simen Svale Skogsrud,2011-02-17,cleaned up settings.h,"['settings.c,settings.h']"
2ff680a12584c7683f6228921356430dc5740c77,Simen Svale Skogsrud,2011-02-17,improved some defaults,['settings.c']
b8eee5ac9a403b84de4ddc86b824606e06390d8f,Simen Svale Skogsrud,2011-02-17,clamped safe speed to 100% of nominal speed. Fixes a problem that might have spelled trouble at very low feed rates,['planner.c']
124bc363bdbecd6ea99509d9f3a03d1dbb93a083,Simen Svale Skogsrud,2011-02-17,removed inline-keywords because gcc ignores them anyway,"['gcode.c,planner.c,planner.h,stepper.c']"
6152d16205ebd153c1c4414a3078c7753f91d501,Simen Svale Skogsrud,2011-02-18,circle buffers now power of two size and indicies are unsigned to help gcc make a few nice optimizations,"['planner.c,wiring_serial.c']"
85f62111b5d82140bc6d5cb15a89a4724270de6c,Simen Svale Skogsrud,2011-02-18,renamed serial_protocol -> protocol,"['Makefile,gcode.c,main.c,protocol.c,protocol.h']"
6893463e80a6d0d3726ae4d6c831fc8c17596fef,Simen Svale Skogsrud,2011-02-18,renamed protocol methods to reflect the new module name,"['structure.txt,main.c,protocol.c,protocol.h']"
9876e14f0be06ccde0b5514164142cd7161e8e1c,Simen Svale Skogsrud,2011-02-18,refactored handling of settings '$' command out of gcode module and into settings module,"['Makefile,gcode.c,gcode.h,nuts_bolts.c,nuts_bolts.h,protocol.c,protocol.h,settings.c,settings.h']"
6edbbe322c2a67a9c1b875e397e8f4420d35cca5,Simen Svale Skogsrud,2011-02-18,lowercased boolean constants,"['gcode.c,motion_control.c,nuts_bolts.h,planner.c,settings.c,stepper.c']"
6be195ba38164ae044e31b02e5f8f5ebc641054d,Simen Svale Skogsrud,2011-02-18,cleaned up handling of number parsing in settings_execute_command,"['nuts_bolts.c,nuts_bolts.h,settings.c']"
464dcd12e8d56a2c7dfa716f129fec6ebcd3b730,Simen Svale Skogsrud,2011-02-19,formatting,"['planner-maths.txt,structure.txt,motion_control.h,planner.c,planner.h']"
d21a791eae51d3b21f7537b643bf0743de7488f0,Simen Svale Skogsrud,2011-02-19,spindle operations are now synchronized,['spindle_control.c']
9c8c259153e69cb5acee9b524ad9de921df93f81,Simen Svale Skogsrud,2011-02-19,made most internal function static to allow gcc to inline them,"['gcode.c,planner.c,protocol.c,stepper.c']"
d5d6298de3f5acddd885277671576410e08bd846,Simen Svale Skogsrud,2011-02-20,added support for limit switches and homing action,"['Makefile,config.h,gcode.c,limits.c,limits.h,main.c,nuts_bolts.h,planner.c,planner.h,stepper.c,stepper.h']"
67d7607e60855370c14ef679e19fedf6b318282c,Simen Svale Skogsrud,2011-02-20,acceleration-Grbl now works with atmega 168 by disabling arc motion,"['gcode.c,main.c,motion_control.c,motion_control.h,planner.c,wiring_serial.c']"
2c913a00bd322d17a4280cbb3eac0faa711fc86b,Simen Svale Skogsrud,2011-02-20,acceleration-Grbl now works with atmega 168 by disabling arc motion,"['gcode.c,main.c,motion_control.c,motion_control.h,planner.c,wiring_serial.c']"
68ff56a8b1f81e1a900a1f75434e084997912b42,Simen Svale Skogsrud,2011-02-21,stepper enable pin now toggles to reflect the active/passive state of the stepper subsystem,['stepper.c']
c491324e8937a40018dd9668f5d11f07a748bbe3,Simen Svale Skogsrud,2011-02-21,added support for G92,['gcode.c']
ef20be9f4c819a3e8893abcc92b1fdf3af286e05,Simen Svale Skogsrud,2011-02-21,result of G92 also affects planner,"['gcode.c,motion_control.h,planner.c']"
60f417b57021d5d72ca1fd3cb8fa936b842f96e0,Simen Svale Skogsrud,2011-02-23,fixed a double rounding error compensation bug in mc_arc thanks to Etienne Chové,['motion_control.c']
87b6364aa00a48038d58ad49c85608c83ff2859a,Simen Svale Skogsrud,2011-02-24,added missing line from G92 patch,['gcode.c']
a18a89c77962d2dded0edb42ad98a4167fbb230b,Simen Svale Skogsrud,2011-02-24,"fixed linebreaks, was LFCR, is CRLF",['protocol.c']
4cac11ec86415cb364c8a15701c96e948cf5996d,Simen Svale Skogsrud,2011-02-25,fixed synchronization problem with spindle_control,['spindle_control.c']
cd074bc590175e945202ca3997d148b399f9261b,Simen Svale Skogsrud,2011-02-25,foolproofed steps/mm setting (must be > 0),['settings.c']
d914089e91c92ab2f48f755eb1b19feeffb68149,Simen Svale Skogsrud,2011-02-25,spindle could not be stopped. Thanks again to Etienne for reporting,['spindle_control.c']
74dcf58c5c0d6c9a9c5e4862aca8514dfc3dd9a6,Simen Svale Skogsrud,2011-02-25,simplification in gcode.c also thanks to etienne,['gcode.c']
c2aec12004be91b97e58933eb26d9c3a594c602e,Simen Svale Skogsrud,2011-05-31,converted the STEPPER_ENABLE_PIN to a STEPPER_DISABLE_PIN as per the request of Alden Hart of Grbl Shield fame.,"['config.h,main.c,stepper.c']"
a25812f36bcb1030ada306923cfa77d3f97e814e,Simen Svale Skogsrud,2011-05-31,made inverted stepper driving the default as per the request of the Grbl Shield team and frankly myself. Who doesn't need their stepper signals inverted anyway?,['settings.c']
f4c1cbac3c5e0ddfbdd4e9d095420f8b11a4eded,Simen Svale Skogsrud,2011-05-31,added a fix for division by zero errors that would occur on very low feed rates (thanks to Arthur Wolf for hardcore investigation),['planner.c']
33a940cdf847e111d9dcb908973812ebdfdbc29f,Simen Svale Skogsrud,2011-05-31,added asynchronous write as provided by Arthur Wolf,['wiring_serial.c']
defabc80ed8c42ba9ec57417dd83f736564cfab8,Simen Svale Skogsrud,2011-05-31,renamed wiring_serial to serial to reflect its complete remake,"['Makefile,structure.txt,main.c,motion_control.c,planner.c,protocol.c,protocol.h,serial.c,serial.h,settings.c,stepper.c']"
ee3139d283219484d32f779a79310ae3b491f901,Simen Svale Skogsrud,2011-06-01,"changed serialAvailable to serialAnyAvailable which does not calculate the number of bytes, only if there are any at all","['serial.c,serial.h']"
8793b555e0ed0352fe2451b173a365b3fc4d4158,Simen Svale Skogsrud,2011-06-01,"cleaned up data types in serial module, all data now uint8_t","['serial.c,serial.h']"
c0b4b8309ab3ca02d3431b4c689be3c45ee2f0bc,Simen Svale Skogsrud,2011-06-03,cleaned up serial completing support for non blocking tx and refactoring formatting functions into a new module 'print',"['Makefile,resources.txt,structure.txt,main.c,motion_control.c,planner.c,print.c,print.h,protocol.c,serial.c,serial.h,settings.c,stepper.c']"
9a5fed4fda7012f87d48a72c919d92ef6f4b9f70,Simen Svale Skogsrud,2011-06-03,changed file headers to reflect the totally refactored state of the serial and print modules,"['print.c,print.h,serial.c,serial.h']"
ab8bae74c1915e0cbf4b8a2fd4f53267fddd440c,Simen Svale Skogsrud,2011-06-03,pruned some undefined declarations from the print module,['print.h']
5eea9f4c7c49494b199707f04b329621eb901b8d,Simen Svale Skogsrud,2011-06-03,pruned extraneous comment,['serial.c']
9488cb329c72dffc6d48d0b14d4f6c908fc0400a,Simen Svale Skogsrud,2011-06-03,cleaned up function definitions for serial and print modules and added a comment about the deeply flawed printFloat method,"['print.c,print.h,serial.h']"
bfe7a2ad84dc62e2b32a2c22ef9ffb338f2c56a1,Simen Svale Skogsrud,2011-06-03,flossed the serial module,['serial.c']
69be1240be4ea68779eebbda0670ab0216428bdc,Simen Svale Skogsrud,2011-06-03,refactored a complex comment,['serial.c']
f0843db46e953beda585846c87c0c11fdabf95a9,Simen Svale Skogsrud,2011-06-03,refactored printIntegerInBase to work without a buffer + minor cleanup,"['print.c,protocol.c,serial.c,serial.h']"
a7c13c497adbdfea8a1dbd87ee0d86276afceec9,Simen Svale Skogsrud,2011-06-03,a new printFloat that probably works,['print.c']
903303579fae6e7ff5fc4188eef0d57e4c24d68e,Simen Svale Skogsrud,2011-06-03,NOW printFloat probably works,['print.c']
74db3e6c5b6b91c74a49f861a03729966da09263,Simen Svale Skogsrud,2011-06-04,undid changes to printIntegerInBase that resulted in the integers being printed in reverse...,['print.c']
553c44a93f92e314a6c9dd35c933d5ae0f18b6a3,Simen Svale Skogsrud,2011-06-05,Fixed serial.c after tests on real hardware,"['main.c,serial.c']"
bd336867a64d9a22dbbee3fd4fae28c0b894260c,Simen Svale Skogsrud,2011-06-05,changed default fp decimal places to 3,['print.c']
9e09a502e9d34413ba1480c30a0d5527fe8025ce,Simen Svale Skogsrud,2011-06-05,updated readme to reflect real state of 168-compatibility,['readme.textile']
c3fda5ac211cff8b02d011a9ddde50ae8f29ed75,Simen Svale Skogsrud,2011-06-05,fixed a bug where the default step mask would not actually reflect the real pin out,['settings.c']
391efe37ed0241f6c623d0015f4cd9081f144125,Simen Svale Skogsrud,2011-06-06,avoid line buffer overflow,['protocol.c']
a9aa7d4d397c9e42c3187792029adacbb6965c8b,Simen Svale Skogsrud,2011-06-06,need to bump the version number because of the serial refactoring,['settings.h']
2be3a6cc61736328b2c04cb4ad2b28ada776740e,jvangrin,2011-07-04,fixed null pointer dereference in planner_forward_pass_kernel,['planner.c']
d4f3fdd4bbd99f6d307a4a86f0773597bd287ef7,jvangrin,2011-07-04,fix sign of fractional part in printFloat,['wiring_serial.c']
926d74fcb7c93434ce9acf24d08c0dd59908a278,jvangrin,2011-07-05,Reset the overflow flag to stop a queued overflow interrupt from resetting the step pulse right after sei() is called,['stepper.c']
d9a7fc4680c2228607c4833d41004b89883ef7b8,jvangrin,2011-07-05,Make sure we don't accelerate above the nominal_rate,['stepper.c']
804837a111e8fddb87074f12d8c39e1d5649d265,Simen Svale Skogsrud,2011-07-09,corrected an outdated comment,['planner.c']
74576a8a0c1f3065a31f48c6e8515867423713e8,Simen Svale Skogsrud,2011-07-10,Merge pull request #32 from jv4779/masterminor grbl code issues,['']
5466bc0c33e9be6d94bff2485e6fb697413bdec6,Simen Svale Skogsrud,2011-07-10,fixed a nil dereferencing bug in planner_forward_pass_kernel thanks to jv4779,['planner.c']
d3f1f82e5f65e83198b3ef0f013ed7c77dbc120d,Brian Boucheron,2011-07-17,added error message for step pulses < 3 microseconds,['settings.c']
5f09dba95d21707ccf0a1a7261f75f0942f33ea8,Simen Svale Skogsrud,2011-07-19,Merge pull request #34 from beardicus/pulse_error_msgStep Pulse Error Message thanks to beardicus.,['']
517a0f659a06182c89cafe27ee371edccad777a4,Simen Svale Skogsrud,2011-08-02,reordered a couple of functions for consistency,['planner.c']
ea5b8942db2616e93fc0478922010c3bab7c0481,chamnit,2011-08-15,"Moved comment and block delete handling to be done in protocol.c rather than gcode.c. Prevents these from being held in memory. Also, fixes bug when comments and block delete character are mixed with g-code.",['protocol.c']
fdc90f1821f1f5edb7756fcddce75b4b4fbf6bbf,chamnit,2011-08-15,Removed comment and block delete handling from gcode.c. Parser expects clean gcode.,['gcode.c']
8b0556bcfdba918329d6a37a6ce057f1d31a4f86,Sonny J,2011-08-15,Revert fdc90f1821f1f5edb7756fcddce75b4b4fbf6bbf^..HEAD,['gcode.c']
a2837943c014590704e57bca8597b9d8654f1b17,Sonny J,2011-08-15,"Revert ""Moved comment and block delete handling to be done in protocol.c rather than gcode.c. Prevents these from being held in memory. Also, fixes bug when comments and block delete character are mixed with g-code.""This reverts commit ea5b8942db2616e93fc0478922010c3bab7c0481.",['protocol.c']
971e50aa9a0a29afc40beacc0ca3c23e590db65f,Sonny J,2011-08-15,Revert 517a0f659a06182c89cafe27ee371edccad777a4^..HEAD,['planner.c']
896a6b9199395eb9dbfd42134d84ba40a332eb36,Sonny J,2011-08-15,"Moved comment and block delete handling into protocol.c from gcode.c. Fixes bug when comment and block delete are not isolated. Blank lines ignored.Comments, block delete characters, and blank lines are no longer passedto the gcode parser and should free up some memory by ignoring thesecharacters. Gcode parser now expects clean gcode only. There was a bugif there were block deletes or comments not in the first character (i.e.spindle on/off for proofing geode without turning it on, or a NXXfollowed by a comment). This should fix it by bypassing the problem.Left a commented line for easily turning on and off block deletes for alater feature, if desired.","['gcode.c,protocol.c']"
ed5e5d1181547bdc2c0be050a2bf24b846ed90b7,Sonny J,2011-08-15,Revert ea5b8942db2616e93fc0478922010c3bab7c0481^..HEAD,"['gcode.c,planner.c,protocol.c']"
badb638df925924c05b3b5e49880590e53faa759,Sonny J,2011-08-15,"Moved comment and block delete handling into protocol.c from gcode.c. Fixes bug when comment and block delete are not isolated. Blank lines ignored.Comments, block delete characters, and blank lines are no longer passedto the gcode parser and should free up some memory by ignoring thesecharacters. Gcode parser now expects clean gcode only. There was a bugif there were block deletes or comments not in the first character (i.e.spindle on/off for proofing geode without turning it on, or a NXXfollowed by a comment). This should fix it by bypassing the problem.Left a commented line for easily turning on and off block deletes for alater feature, if desired.","['gcode.c,protocol.c']"
5c2150daa9b6ca9c7f3be32f37907cf1f7b46f6f,Sonny J,2011-09-03,"Significantly improved junction control and fixed computation bugs in planner- Junction jerk now re-defined as junction_deviation. The distance fromthe junction to the edge of a circle tangent to both previous andcurrent path lines. The circle radii is used to compute the maximumjunction velocity by centripetal acceleration. More robust andsimplified way to compute jerk.   - Fixed bugs related to entry and exitfactors. They were computed based on the current nominal speeds but notwhen computing exit factors for neighboring blocks. Removed factors andreplaced with entry speeds only. Factors now only computed for steppertrapezoid rate conversions.  - Misc: Added min(), next_block_index,prev_block_index functions for clarity.","['nuts_bolts.h,planner.c,planner.h,settings.c,settings.h']"
75bd4c5ac355418fcecabf146d39fd95e2aedbe9,Sonny J,2011-09-03,"Add G02/03 arc conversion/pre-processor script and example streaming scriptBeta pre-processor script used to clean and streamline g-code forstreaming and converts G02/03 arcs into linear segments. Allows for fullacceleration support if the pre-processed g-code is then streamed togrill, sans G02/03 arcs. Added a simple example streaming script forPython users.","['grbl_preprocess.py,simple_stream.py']"
5e2e935bda93d0923ffa385e9cafb7a751c65e34,Sonny J,2011-09-03,Minor bug fixes in planner.,['planner.c']
f1e5ff35ecf6dfd11c431e4e714c7bc6077ca52a,Sonny J,2011-09-04,"More minor bug fixes in planner.Reverse planner was over-writing the initial/buffer tail entry speed,which reset the forward planner and caused it to lose track of itsspeed. Should now accelerate into short linear segments much nicer now.",['planner.c']
d75ad82e4932aea166c189e4160e197e4710c191,Sonny J,2011-09-04,Minor update for memory savings in ring buffer and fleshed out commenting.No changes in functionality. Path vectors moved from ring buffer tolocal planner static variables to save 3*(BUFFER_SIZE - 1) doubles inmemory. Detailed comments. Really need to stop micro-updating. Should bethe last until a planner optimization (ala Jens Geisler) has beencompleted.,"['nuts_bolts.h,planner.c,planner.h']"
ffcc3470a31411b63aa57d12cc58cc306a1fb660,Sonny J,2011-09-06,"Optimized planner re-write. Significantly faster. Full arc support enabled by rotation matrix approach.- Significant improvements in the planner. Removed or reorderedrepetitive and expensive calculations by order of importance:recalculating unchanged blocks, trig functions [sin(), cos(), tan()],sqrt(), divides, and multiplications. Blocks long enough for nominalspeed to be guaranteed to be reached ignored by planner. Done byintroducing two uint8_t flags per block. Reduced computational overheadby an order of magnitude.   - Arc motion generation completelyre-written and optimized. Now runs with acceleration planner. Removedall but one trig function (atan2) from initialization. Streamlinedcomputations. Segment target locations generated by vectortransformation and small angle approximation. Arc path correctionimplemented for accumulated error of approximation and single precisioncalculation of Arduino. Bug fix in message passing.","['gcode.c,motion_control.c,motion_control.h,nuts_bolts.h,planner.c,planner.h,protocol.c,grbl_preprocess.py,settings.c,settings.h']"
4d03c4febc94eaaaa6906a70c99ebb7c7e4947b1,Sonny J,2011-09-13,"Further planner improvements and misc minor bug fixes. Memory savings and increased buffer size.- Update grbl version and settings version to automatically reseteeprom. FYI, this will reset your grbl settings. - Saved3*BLOCK_BUFFER_SIZE doubles in static memory by removing obsoletevariables: speed_x, speed_y, and speed_z. - Increased buffer sizeconservatively to 18 from 16. (Probably can do 20). - Removed expensive!modulo operator from block indexing function. Reduces significantcomputational overhead. - Re-organized some sqrt() calls to be moreefficient during time critical planning cases, rather than non-timecritical. - Minor bug fix in planner max junction velocity logic. -Simplified arc logic and removed need to multiply for CW or CCWdirection.","['gcode.c,motion_control.c,motion_control.h,nuts_bolts.h,planner.c,planner.h,protocol.c,grbl_preprocess.py,settings.c,settings.h']"
110faae986eef6c4398c166a81c91cbd1d5a3bf4,Sonny J,2011-09-15,"More '%' modulo opertor removals and some housecleaning.- Serial functions contained quite a few modulo operations that wouldbe executed with high frequency when streaming. AVR processors are veryslow when operating these. In one test on the Arduino forums, it showedabout a 15x slow down compared to a simple if-then statement. -Clarified some variable names and types and comments.","['gcode.c,motion_control.c,motion_control.h,serial.c,settings.c']"
6de805441fe00b436c1f44997df4034543164b50,Sonny J,2011-09-18,"Fixed minor bugs in planner. Increased max dwell time. Long slope bug stop-gap solution note.- Fixed the planner TODO regarding minimum nominal speeds. Re-arrangedcalculations to be both more efficient and guaranteed to be greaterthan zero. - Missed a parenthesis location on the rate_deltacalculation. Should fix a nearly in-perceptible issue with incorrectacceleration ramping in diagonal directions. - Increased maximum dwelltime from 6.5sec to an 18hour max. A crazy amount more, but that's howthe math works out. - Converted the internal feedrate values to mm/minonly, as it was switching between mm/min to mm/sec and back to mm/min.Also added a feedrate > 0 check in gcode.c. - Identified the long slopeat the end of rapid de/ac-celerations noted by stephanix. Problem withthe numerical integration truncation error between the exact solutionof estimate_acceleration_distance and how grbl actually performs theacceleration ramps discretely. Increasing theACCELERATION_TICKS_PER_SECOND in config.h helps fix this problem.Investigating further.","['config.h,gcode.c,motion_control.c,motion_control.h,planner.c']"
2be0d668722ed42af66a4bdab71cda672189ff73,Sonny Jeon,2011-09-24,"Fixed long slope at deceleration issue. Moved things into config.h. New MINIMUM_PLANNER_SPEED parameter.- The long standing issue of a long slope at deceleration is likelyfixed. The stepper program was not tracking and timing the end ofacceleration and start of deceleration exactly and now is fixed tostart and stop on time. Also, to ensure a better acceleration curve fitused by the planner, the stepper program delays the start of theaccelerations by a half trapezoid tick to employ the midpoint rule. -Settings version 3 migration (not fully tested, but should work) -Added a MINIMUM_PLANNER_SPEED user-defined parameter to planner to leta user change this if problems arise for some reason. - Moved alluser-definable #define parameters into config.h with clear comments onwhat they do and recommendations of how to change them. - Minorhousekeeping.","['config.h,gcode.c,motion_control.c,planner.c,settings.c,stepper.c']"
05ed6c122d16889a82ebaca6835a21676a6ed0e3,Sonny Jeon,2011-09-25,Updated some comments and fixed a bug in the new stepper logic.- The stepper logic was not initiating the decelerations for certaincases. Just re-arranged the logic to fix it.,['stepper.c']
59a84c4925c441e994583da46d9e9782331bf61d,Sonny Jeon,2011-09-29,Added complete stop delay at the end of all motion. Moved grbl preprocessor script into a new repository.Added a very short (25 ms) user-definable delay before the steppers aredisabled at the motors are disabled and grbl goes idle. This ensuresany residual inertia at the end of the last motion does not cause theaxes to drift and grbl to lose its position when manually enteringg-code or when performing a tool change and starting the nextoperation.,"['config.h,grbl_preprocess.py,stepper.c']"
ca26bb9ccfea29782b0e536a6e25004cc5de6887,Sonny Jeon,2011-10-06,"Minor update to further eliminate the ole long slope deceleration issue. New update note!- Added another way to further ensure the long slope deceleration issueis eliminated. If the stepper rate change is too great near zero, thestepper rate is adjusted at half increments to the end of travel,creating a smooth transition. - If the new STEPPER_IDLE_LOCK_TIME isset as zero, this delay is not compiled at compile-time. - NOTE: Thenext update is likely going to be major, involving a full re-write ofthe stepper.c program to integrate a simple way to apply pauses,jogging, e-stop, and feedrate overrides. The interface should beflexible enough to be easily modified for use with either hardwareswitches or software commands. Coming soon.","['config.h,stepper.c']"
c98ff4cc2e8ed9461e65a37cba85c8470233ca4e,Sonny Jeon,2011-10-07,Forgot something! Comments on what the last change does.,['stepper.c']
9141ad282540eaa50a41283685f901f29c24ddbd,Sonny Jeon,2011-10-11,"Third time's a charm! No more deceleration issues! Updated grbl version and settings. General cleanup.- Fleshed out the original idea to completely remove the long slope atthe end of deceleration issue. This third time should absolutelyeliminate it.- Changed the acceleration setting to kept as mm/min^2 internally,since this was creating unneccessary additional computation in theplanner. Human readable value kept at mm/sec^2.- Updated grbl version 0.7d and settings version to 4. NOTE: Pleasecheck settings after update. These may have changed, but shouldn't.- Before updating the new features (pause, e-stop, federate override,etc), the edge branch will soon be merged with the master, barring anyimmediate issues that people may have, and the edge branch will be thetesting ground for the new grbl version 0.8.","['config.h,gcode.c,motion_control.c,motion_control_new.c,planner.c,planner.h,settings.c,settings.h,stepper.c,stepper.h']"
169c859b9ce314c81448d3d156f10232a29fafc1,Sonny Jeon,2011-10-11,Delete a new work file shouldn't have been synced.,['motion_control_new.c']
b5cc0331507510b1121f27f56076efd38a0108d4,Sonny Jeon,2011-11-11,Corrected clearing of target and position variable for the go home routine. Thanks Jens!,['gcode.c']
292fcca67faf6f781db46e8578e3314271026b17,Sonny Jeon,2011-11-19,Re-ordered stepper idle function to first disable interrupt.,['stepper.c']
4bf0085ae6bf1726554bcc625884a12679fce715,Sonny Jeon,2011-11-19,Updated README and reordered branch versions.,"['readme.textile,stepper.c']"
03e2ca7cd5ef6653de74c242e73be978dfa2fec4,Sonny Jeon,2011-12-08,"Initial v0.8 ALPHA commit. Features multi-tasking run-time command execution (feed hold, cycle start, reset, status query). Extensive re-structuring of code for future features.- ALPHA status. - Multitasking ability with run-time command executionsfor real-time control and feedback. - Decelerating feed hold and resumeduring operation. - System abort/reset, which immediately kills allmovement and re-initializes grbl. - Re-structured grbl to easily allowfor new features: Status reporting, jogging, backlash compensation. (Tobe completed in the following releases.) - Resized TX/RX serial buffers(32/128 bytes) - Increased planner buffer size to 20 blocks. - Updateddocumentation.","['config.h,commands.txt,planner-maths.txt,structure.txt,gcode.c,limits.c,main.c,motion_control.c,motion_control.h,nuts_bolts.c,nuts_bolts.h,planner.c,planner.h,protocol.c,protocol.h,readme.textile,serial.c,serial.h,settings.c,settings.h,spindle_control.c,stepper.c,stepper.h']"
12bae589948c9f861d35c5f066a35e2bdd72d47f,Sonny Jeon,2011-12-10,Various minor updates and variable definition corrections. Removed deprecated acceleration manager.- Removed deprecated acceleration manager (non-functional since v0.7b)- Updated variable types and function headers. - Updated stepperinterrupt to ISR() from SIGNAL()+sei(). - General code cleanup.,"['main.c,motion_control.c,nuts_bolts.c,nuts_bolts.h,planner.c,planner.h,protocol.c,protocol.h,serial.c,stepper.c']"
e8a6bfd179a594fd8237f5f9720bb337f758760c,Sonny Jeon,2012-01-06,"Position reporting, refactored system variables, serial print fixes, updated streaming scripts.- Added machine position reporting to status queries. This will befurther developed with part positioning/offsets and maintaininglocation upon reset.- System variables refactored into a global struct for betterreadability.- Removed old obsolete Ruby streaming scripts. These were no longercompatible. Updated Python streaming scripts.- Fixed printFloat() and other printing functions.- Decreased planner buffer back to 18 blocks and increased TX serialbuffer to 64 bytes. Need the memory space for future developments.- Begun adding run-time modes to grbl, where block delete toggle, mm/inreporting modes, jog modes, etc can be set during runtime. Will befleshed out and placed into EEPROM when everything is added.","['config.h,gcode.c,main.c,motion_control.c,nuts_bolts.h,planner.c,planner.h,print.c,print.h,protocol.c,console,proxy,stream,stream.rb,trapezoid_simulator.rb,simple_stream.py,stream.py,serial.c,settings.c,settings.h,stepper.c']"
f40078110eda6b8939fdda8d38d2941deec7dd71,Sonny Jeon,2012-01-09,Updated line in streaming script.,['stream.py']
6f27e2cdb1625657ccb8a96c3fbc9bd637f29170,Sonny Jeon,2012-01-09,Corrected a minor streaming script character counting bug.,['stream.py']
89a3b37e020aa4e657973baadb0ff0936aa25656,Sonny Jeon,2012-01-10,"Extended position reporting with both home and work coordinates. Home position now retained after reset. Other minor changes/fixes.- Grbl now tracks both home and work (G92) coordinate systems and doeslive updates when G92 is called.- Rudimentary home and work position status reporting. Works but stillunder major construction.- Updated the main streaming script. Has a disabled periodic timer forquerying status reports, disabled only because the Python timer doesn'tconsistently restart after the script exits. Add here only for usertesting.- Fixed a bug to prevent an endless serial_write loop during statusreports.- Refactored the planner variables to make it more clear what they areand make it easier for clear them.","['limits.c,main.c,motion_control.c,nuts_bolts.h,planner.c,protocol.c,stream.py,serial.c,stepper.c']"
d27dd13a54badd0f8ecb21b3c06dbde7a2ea8cd3,Sonny Jeon,2012-01-15,"Fix bug with premature step end. Refactored _delay_ms() and square() for better portability.- Fixed a premature step end bug dating back to Simen's 0.7b edgeversion is fixed, from which this code is forked from. Caused by Timer2constantly overflowing calling the Step Reset Interrupt every 128usec.Now Timer2 is always disabled after a step end and should free up somecycles for the main program. Could be more than one way to fix thisproblem. I'm open to suggestions.- _delay_ms() refactored to accept only constants to comply withcurrent compilers. square() removed since not available with somecompilers.","['config.h,main.c,motion_control.c,nuts_bolts.c,nuts_bolts.h,planner.c,stream.py,stepper.c']"
66d3155f2fbb160a238f5f0ac9ad96c75d7f38ad,Sonny Jeon,2012-01-15,"Propagated premature step end bug fix from the edge branch. Updated printFloat() function.- Will not be uploading a hex build of this, unless asked.","['print.c,stepper.c']"
0c0ee248201389b832fbcf6a6f333fea013a0ccf,Sonny Jeon,2012-01-17,Merge pull request #39 from chamnit/edgeMerging chamnit/grbl edge v0.8a to grbl/grbl edge,['']
cebee41f7eedbdd613537021b4dfabab7ee83bad,Sonny Jeon,2012-01-17,Update readme.textile,['readme.textile']
9713f9067dbc47c7622357736d0a55ad3cd8771d,Sonny Jeon,2012-01-17,Merge chamnit/v0_7 with grbl/master,"['Makefile,config.h,planner-maths.txt,resources.txt,structure.txt,gcode.c,gcode.h,limits.c,limits.h,main.c,motion_control.c,motion_control.h,nuts_bolts.c,nuts_bolts.h,planner.c,planner.h,print.c,print.h,protocol.c,protocol.h,readme.textile,simple_stream.py,serial.c,serial.h,serial_protocol.c,settings.c,settings.h,spindle_control.c,stepper.c,stepper.h,wiring_serial.c,wiring_serial.h']"
3734c20eec77baa3903577dbfe5b6e105eefc059,Sonny Jeon,2012-01-17,Merge pull request #47 from chamnit/v0_7Merging chamnit/v0_7 to grbl/master,['']
fca3fb41884dd365a8a7905790398827fe83f484,Sonny Jeon,2012-01-17,Update readme.textile,['readme.textile']
b86ba60a250a498003a423cbf89c6165a0729b70,Sonny Jeon,2012-01-27,Updated streaming scripts. Compiler compatibility for _delay_ms().- Moved obsolete streaming scripts to folder for reference.- Added a more complex Python streaming script which uses the serialbuffer as an additional streaming buffer.- Removed all references to a _delay_ms(variable) to allow for betterporting across different compilers.,"['motion_control.c,nuts_bolts.c,nuts_bolts.h,console,proxy,stream,stream.rb,trapezoid_simulator.rb,simple_stream.py,stream.py']"
0f0d5a6138b6a3edac20b150da318d5f637e4152,Sonny Jeon,2012-01-27,Streaming script argparse bugfix.,['stream.py']
b51e90253011e8628643e3fd37103f5192e726a5,Sonny Jeon,2012-01-28,"Program stop support (M0,M1*,M2,M30*), proper position retainment upon reset, misc minor updates.- Program stop support (M0,M1*,M2,M30*). *Optional stop to be done.*Pallet shuttle not supported.- Work position is set equal to machine position upon reset, asaccording to NIST RS274-NGC guidelines. G92 is disabled.- Renamed mc_set_current_position() to mc_set_coordinate_offset().- Fixed bug in plan_synchronize(). Would exit right before last step isfinished and caused issues with program stops. Now fixed.- Spindle now stops upon a run-time abort command.- Updated readme and misc upkeeping.","['config.h,gcode.c,gcode.h,main.c,motion_control.c,motion_control.h,nuts_bolts.c,nuts_bolts.h,planner.c,planner.h,print.c,print.h,protocol.c,protocol.h,readme.textile,serial.c,stepper.c']"
24f1e0231ee477d9a6a99130479f8227d8ea2bcb,Sonny Jeon,2012-01-31,printFloat rounding fix. Affected settings. Recommend using new build.printFloat was printing incorrectly and adding a value of 5 to everyfloat instead of 0.0005 when rounding to 3 decimal places. The printedsettings values do not accurately portray the actual stored value.Recommend using newly posted build.,['print.c']
567fbf93ed6b8fb4e305c420e1ae5387547ff047,Sonny Jeon,2012-02-11,"G54 work coordinate support (w/ G10,G92.1). Re-factored g-code parser with error checking. Minor compiler compatibility changes.- G54 work coordinate system support. Up to 6 work coordinate systems(G54-G59) available as a compile-time option.- G10 command added to set work coordinate offsets from machineposition.- G92/G92.1 position offsets and cancellation support. Properly followsNIST standard rules with other systems.- G53 absolute override now works correctly with new coordinate systems.- Revamped g-code parser with robust error checking. Providing userfeedback with bad commands. Follows NIST standards.- Planner module slightly changed to only expected position movementsin terms of machine coordinates only. This was to simplify coordinatesystem handling, which is done solely by the g-code parser.- Upon grbl system abort, machine position and work positions areretained, while G92 offsets are reset per NIST standards.- Compiler compatibility update for _delay_us().- Updated README.","['config.h,gcode.c,gcode.h,limits.c,main.c,motion_control.h,nuts_bolts.c,nuts_bolts.h,planner.c,planner.h,protocol.c,protocol.h,readme.textile,serial.h,spindle_control.c']"
fbed795f472d66b15b7de394e6e7add8b43b710d,Sonny Jeon,2012-02-11,Minor compiler compatibility update for _delay_us().,"['limits.c,nuts_bolts.c,nuts_bolts.h']"
bfb05fc1f20ca8ff3f4a7e4fcc37cd74e90481fe,Sonny Jeon,2012-02-11,Fix to enable spindle DDR ports.,['spindle_control.c']
e9b28279db89421c3588ee80a0d6c95d37067916,Sonny Jeon,2012-02-12,Spindle DDR pins init minor fix.,"['spindle_control.c,stepper.c,stepper.h']"
d6abf10d49c16f14a68ef213f749f11e7398e7cb,Sonny Jeon,2012-02-25,"Minor include related compile fix. Added experimental XON/XOFF flow control. Not officially supported!- A latency issue related to USB-to-serial converters on the Arduinodoes not allow for XON/XOFF flow control to work correctly on standardterminal programs. It seems that only specialized UI's or avoiding theUSB port all together solves this problem. However, XON/XOFF flowcontrol is added for advanced users only as a compile-time option. Thisfeature is officially *NOT* supported by grbl, but let us know of anysuccesses with it!","['config.h,nuts_bolts.h,serial.c']"
86cdae0060443e0878dcf5e07bcf7adc97dc563a,Sonny Jeon,2012-03-05,"Minor updates.- Updated makefile to be more universally compatible by not requiringgrep or ruby.- Edited XON/XOFF flow control usage, noting that FTDI-based Arduinosare known to work, but not Atmega8U2-based Arduino. Still officiallynot supported, but added for advanced users.- Minor edits.","['Makefile,config.h,gcode.c,limits.c,serial.c']"
d3be21693171ed597dd212176c6fb33d35cff622,Sonny Jeon,2012-03-10,Minor fix related to spindle_stop() crashing abort in certain cases.- Updated spindle_stop() to fix abort bug and to be more in line withv0.8.,"['config.h,gcode.c,main.c,serial.c,spindle_control.c']"
79e0fd594b4481fc74eac9c6669fef1a994c6b48,Sonny Jeon,2012-06-26,"Added step pulse delay after direction set (Compile-time option only). Updated read me.Added a compile-time only experimental feature that creates auser-specified time delay between a step pulse and a direction pin set(in config.h). This is for users with hardware-specific issues(opto-couplers) that need more than a few microseconds between events,which can lead to slowly progressing step drift after many manydirection changes. We suggest to try the hack/fix posted in the Wikibefore using this, as this experimental feature may cause Grbl to takea performance hit at high step rates and about complex curves.","['config.h,readme.textile,stepper.c']"
1720484d761509a824ced51a513bc589a36c0cf5,Sonny Jeon,2012-06-27,No changes. Github commit bug.,"['COPYING,Makefile,commands.txt,resources.txt,structure.txt,eeprom.h,gcode.c,gcode.h,limits.c,limits.h,main.c,motion_control.c,motion_control.h,nuts_bolts.c,nuts_bolts.h,planner.c,planner.h,print.c,print.h,protocol.c,protocol.h,stream.rb,trapezoid_simulator.rb,serial.c,serial.h,settings.c,settings.h,spindle_control.c,spindle_control.h,stepper.h']"
4d3c720bcc0cec06e9f108913fd5a5fc655ce5ec,Sonny Jeon,2012-09-19,"M30 minor bug fix.Order of operations was off. Now works as intended,",['gcode.c']
f5b1761406c48a8188e070b4d824ce93a19e320b,Elijah Insua,2012-09-21,Add support for overriding DEVICE and PROGRAMMERBy setting environment variables.example: PROGRAMMER=-c arduino -P /dev/tty.usbmodemfa131 make flash,['Makefile']
7eb85de821778b05ce987c258c3274d10b018997,Sonny Jeon,2012-09-21,Merge pull request #120 from tmpvar/configurable-makefileAdd support for overriding DEVICE and PROGRAMMER,['']
420c7c25842f49fc780c7ce3d8f7f00e6f3a4a62,Sonny Jeon,2012-09-21,"Added coolant control (M7*, M8, M9). Mist control can be enabled via config.h.- Added coolant control! Flood control (M8) functions on analog pin 0.Mist control (M7) is compile-time optional and is on analog pin 1. (Useonly if you have multiple coolants on your system). Based on work by@openpnp.- Fixed some variable assignments in spindle control.","['Makefile,config.h,coolant_control.c,coolant_control.h,gcode.c,main.c,spindle_control.c,spindle_control.h']"
4224ab4999bdcad9cff026ab584e17c4a2fe93ff,Sonny Jeon,2012-09-21,Minor prescalar optimization. Changed up some defines.,"['config.h,coolant_control.c,gcode.c,stepper.c']"
d30cb906f886e71987ce986effbd1c9368aca479,Sonny Jeon,2012-09-30,"Updated limit/homing routine. Works, but needs more TLC.- Added acceleration to the homing routine.- Homing now accounts for different step rates when moving multipleaxes without exceeding acceleration limits.- Homing now updates all internal positioning variables to machine zeroafter completion.- ""Poor-man's"" debounce delay added.- Updated the delay_us() function to perform faster and more accuratemicrosecond delays. Previously, the single increments would addnoticeable time drift for larger delays.- Fix a bug in the stepper.c prescalar calculations that was changed inthe last commit.- Other minor fixes.","['config.h,gcode.c,gcode.h,limits.c,motion_control.c,nuts_bolts.c,planner.c,planner.h,serial.c,stepper.c']"
ff82489da7773dd9a90e9a0e5bebcd3361411df2,Sonny Jeon,2012-10-08,"Limit pin internal pull-resistors enabled. Re-wrote read_double() function. Correctly changed all 'double's to 'float's.- Limit pin internal pull-resistors now enabled. Normal high operation.This will be the standard going forward.- Updated all of the 'double' variable types to 'float' to reflect whathappens when compiled for the Arduino. Also done for compatibilityreasons to @jgeisler0303 's Grbl simulator code.- G-code parser will now ignore 'E' exponent values, since they arereserved g-code characters for some machines. Thanks @csdexter!- The read_double() function was re-written and optimized for use inGrbl. The strtod() avr lib was removed.","['config.h,gcode.c,limits.c,main.c,motion_control.c,motion_control.h,nuts_bolts.c,nuts_bolts.h,planner.c,planner.h,print.c,print.h,protocol.c,settings.c,settings.h,stepper.c']"
4d8fd7f603a761ddf90fd0bb2445bdbf3e21b3ea,Sonny Jeon,2012-10-08,Updated version number to v0.8b to reflect changes.,['settings.h']
6506b7a338abf4302eab8d24a061e7ff80431567,Sonny Jeon,2012-10-08,Fixed an issue with leaving the limit switches during a homing cycle.,['limits.c']
4c6f5bec481177ab32086fefb03e6e83a1720b2f,Sonny Jeon,2012-10-09,"Improved homing cycle. New settings: homing enable/rates, debounce and step idle lock time.- Homing cycle will now cycle twice (spec more/less in config) toimprove repeatability and accuracy by decreasing overshoot.- New Grbl settings added: Enable/disable homing cycles, homing seekand feed rates, switch debounce delay, and stepper idle lock time.- Please note that these settings may change upon the next push, sincethere will be more added soon. Grbl *should* not re-write your oldsettings, just re-write the new ones. So, make sure you keep thesewritten down somewhere in case they get lost from a code bug.- Refactored settings migration to be a little smaller and managablegoing forward.","['config.h,gcode.c,limits.c,protocol.c,protocol.h,settings.c,settings.h,stepper.c']"
32963289fec414d718aa494dbfbb7c5532351685,Sonny Jeon,2012-10-10,Homing direction pin bits fixed. Lite refactoring of settings.,"['limits.c,settings.c,settings.h']"
d8ca4176bf7f5e410105d26200390903a6f5fe68,Sonny Jeon,2012-10-11,Homing stepper enable bit fix.,"['limits.c,print.c']"
9b4e1089058411b2b2889cdbc45a0c2a737b6320,Sonny Jeon,2012-10-11,"(2x) speed increase in printFloat() function. Decimal places setting added.- printFloat() function execution doubled in speed. This is a precursorto status reporting, since GUIs may query real-time position rapidly.- Decimal places added to settings (for now). This may disappear infuture pushes, but here for testing purposes.","['print.c,settings.c,settings.h']"
00701ff24e8213d41d591b6e28d8b5f2c69d5a37,Sonny Jeon,2012-10-12,Updated delay_us() function to accept long integers,"['config.h,nuts_bolts.c,nuts_bolts.h']"
34f6d2eb4b3e25aec008889451e6fd4276ee055b,Sonny Jeon,2012-10-13,"Minor updates, improvements, and bug fixes.- Allowed status_message function to be called by others. This is tocentralize all feedback into protocol.c.- Fixed a bug where line number words 'N' were causing the parser toerror out.- Allowed homing routine feed rates to move slower than theMINIMUM_STEP_RATE parameter in config.h.- Homing performs idle lock at the end of the routine.- Stepper idle lock time will now not disable the steppers when thevalue is set at 255. This is accomodate users who prefer to keep theiraxes enabled at all times.- Moved some defines around to where they need to be.","['gcode.c,limits.c,limits.h,planner.c,protocol.c,protocol.h,settings.c,settings.h,stepper.c,stepper.h']"
df5bb70b2515b8bc05ca7c90abf1b221f63aeafe,Sonny Jeon,2012-10-16,"Hard limits, homing direction, pull-off limits after homing, status reports in mm or inches, system alarm, and more.- Thank you statement added for Alden Hart of Synthetos.- Hard limits option added, which also works with homing by pulling offthe switches to help prevent unintended triggering. Hard limits use ainterrupt to sense a falling edge pin change and immediately go intoalarm mode, which stops everything and forces the user to issue a reset(Ctrl-x) or reboot.- Auto cycle start now a configuration option.- Alarm mode: A new method to kill all Grbl processes in the event ofsomething catastrophic or potentially catastropic. Just works with hardlimits for now, but will be expanded to include g-code errors (mostlikely) and other events.- Updated status reports to be configurable in inches or mm mode. Muchmore to do here, but this is the first step.- New settings: auto cycle start, hard limit enable, homing directionmask (which works the same as the stepper mask), homing pulloffdistance (or distance traveled from homed machine zero to preventaccidental limit trip).- Minor memory liberation and calculation speed ups.","['config.h,gcode.c,limits.c,main.c,motion_control.c,nuts_bolts.h,protocol.c,serial.c,settings.c,settings.h,stepper.c']"
39e11b696f3f67904e595e379b89b9734999c374,Sonny Jeon,2012-10-18,Hard limits code minor updates.- Fixed a bug that would not disable the steppers if a user issues asystem abort during a homing cycle.- Updated the hard limit interrupt to be more correct and to issue ashutdown for the right situations when the switch has been triggered.- Added a status message to indicate to the user what happened and whatto do upon a hard limit trigger.,"['config.h,limits.c,motion_control.c,nuts_bolts.h,protocol.c,protocol.h,serial.c']"
909feb7f79b67dc70563a546f339f132b4cf014f,Sonny Jeon,2012-10-21,"Re-organized status messages to be more coherent and centralized.- Reorganized all of the status message feedback from both the g-codeparser and settings modules to be centralized into two message modules:status feedback from executing a line and warnings for misc feedback.- Pulled out the printPgmString() messages in settings.c and placed itinto the new module. (settings_dump() not moved).- Some other minor edits. Renaming defines, comment updates, etc.","['config.h,gcode.c,protocol.c,protocol.h,serial.c,settings.c,settings.h']"
065ceceb342f1366fc61cdc900af292767a3728d,Sonny Jeon,2012-10-21,"New alarm method. Re(re)organized status messages.- Installed a new 'alarm' method to centralize motion kills acrossalarm or reset events. Right now, this is controlled by system abortand hard limits. But, in the future, a g-code parser error may callthis too as a safety feature.- Re(re)organized status messages to just print all errors, regardlessfrom where it was called. This centralizes them into one place.- Misc messages method installed for any user feedback that is not aconfirmation or error. Mainly so that there is a place to performwarnings and such.- New stuff installed and still made the flash size smaller by savingflash space from clearing out repeated '\r\n' pgmstrings.- Fixed a bug where hard limits message would print everytime a systemabort was sent.","['limits.c,motion_control.c,motion_control.h,protocol.c,protocol.h,serial.c,settings.c,settings.h,stepper.c']"
5d8c3dcbd70d9109bccf6cc0eb618bd0e577e10d,Sonny Jeon,2012-10-21,Added misc message to indicate how to exit ALARM mode.,"['protocol.c,protocol.h']"
e0a9054e32f6e00cf6931552b11b9f201e240bf0,Sonny Jeon,2012-11-01,"New report module. 6 persistent work coordinates. New G-codes and settings. README and minor bug updates(NOTE: This push is likely buggy so proceed with caution. Justuploading to let people know where we're going.)- New report.c module. Moved all feedback functions into this module tocentralize these processes. Includes realtime status reports, statusmessages, feedback messages.- Official support 6 work coordinate systems (G54-G59), which arepersistently held in EEPROM memory.- New g-code support: G28.1, G30.1 stores current machine position as ahome position into EEPROM. G10 L20 Px stores current machine positioninto work coordinates without needing to explicitly send XYZ words.- Homing performed with '$H' command. G28/G30 no longer start thehoming cycle. This is how it's supposed to be.- New settings: Stepper enable invert and n_arc correction installed.- Updated and changed up some limits and homing functionality. Pull-offtravel will now move after the homing cycle regardless of hard limitsenabled. Fixed direction of pull-off travel (went wrong way).- Started on designing an internal Grbl command protocol based on the'$' settings letter. Commands with non numeric characters after '$'will perform switch commands, homing cycle, jogging, printingparamters, etc. Much more to do here.- Updated README to reflect all of the new features.","['Makefile,config.h,gcode.c,limits.c,main.c,motion_control.c,nuts_bolts.h,protocol.c,protocol.h,readme.textile,report.c,report.h,serial.c,settings.c,settings.h,stepper.c,stepper.h']"
303cf59f5246b46d0775b31290c04b5712ff4b2c,Sonny Jeon,2012-11-01,"Added block delete, opt stop, single block mode. New parser state and parameter feedback. Overhauled '$' command.NOTE: Another incremental update. Likely buggy, still a ways to gobefore everything is installed, such as startup blocks.- Changed the '$' command to print help. '$$' now prints Grbl settings.The help now instructs the user of runtime commands, switch toggling,homing, etc. Jogging will be added to these in v0.9.- Added switches: block delete, opt stop, and single block mode.- Now can print the g-code parser state and persistent parameters(coord sys) to view what Grbl has internally.- Made the gc struct in the g-code parser global to be able to printthe states. Also moved coordinate system tracking from sys to gc struct.- Changed up the welcome flag and updated version to v0.8c.- Removed spindle speed from gcode parser. Not used.","['config.h,gcode.c,gcode.h,nuts_bolts.h,protocol.c,report.c,report.h,settings.c,settings.h,spindle_control.c,spindle_control.h']"
4c711a4af7a21b1005bd2ac59a423b021ae831fb,Sonny Jeon,2012-11-03,"New startup script setting. New dry run, check gcode switches. New system state variable. Lots of reorganizing.(All v0.8 features installed. Still likely buggy, but now thouroughtesting will need to start to squash them all. As soon as we're done,this will be pushed to master and v0.9 development will be started.Please report ANY issues to us so we can get this rolled out ASAP.)- User startup script! A user can now save one (up to 5 as compile-timeoption) block of g-code in EEPROM memory. This will be run everytimeGrbl resets. Mainly to be used as a way to set your preferences, likeG21, G54, etc.- New dry run and check g-code switches. Dry run moves ALL motions atrapids rate ignoring spindle, coolant, and dwell commands. For rapidphysical proofing of your code. The check g-code switch ignores allmotion and provides the user a way to check if there are any errors intheir program that Grbl may not like.- Program restart! (sort of). Program restart is typically an advancedfeature that allows users to restart a program mid-stream. The checkg-code switch can perform this feature by enabling the switch at thestart of the program, and disabling it at the desired point with someminimal changes.- New system state variable. This state variable tracks all of thedifferent state processes that Grbl performs, i.e. cycle start, feedhold, homing, etc. This is mainly for making managing of these taskeasier and more clear.- Position lost state variable. Only when homing is enabled, Grbl willrefuse to move until homing is completed and position is known. This ismainly for safety. Otherwise, it will let users fend for themselves.- Moved the default settings defines into config.h. The plan is toeventually create a set of config.h's for particular as-built machinesto help users from doing it themselves.- Moved around misc defines into .h files. And lots of other littlethings.","['config.h,gcode.c,gcode.h,limits.c,limits.h,main.c,motion_control.c,motion_control.h,nuts_bolts.c,nuts_bolts.h,planner.c,planner.h,print.c,protocol.c,protocol.h,readme.textile,report.c,report.h,serial.c,serial.h,settings.c,settings.h,spindle_control.c,stepper.c,stepper.h']"
8c0106c247134383dc47174ae005c9242e9be643,Sonny Jeon,2012-11-04,"Tweaks and minor bug fixes. Added purge buffer command.- Added a purge buffer (and lock) command. This is an advanced optionto clear any queued blocks in the buffer in the event of systemposition being lost or homed. These queued blocks will likely not movecorrectly if not purged. In typical use, the purging command releasesthe homing axes lock in case a user need to move the axes off theirhard limit switches, but position is not guaranteed. Homing is advisedimmediately after.- Created a system-wide sync current position function. Cleans up someof the repetitive tasks in various places in the code that do the samething.- Removed the clear all switches command '$S'. Not really needed andhelped clean up a sync call.- Other minor tweaks. Readme updated slightly..","['gcode.c,gcode.h,main.c,motion_control.c,nuts_bolts.c,nuts_bolts.h,planner.c,planner.h,protocol.c,readme.textile,report.c,report.h']"
9cabc915ef9096b470e236679db70834f6fc9e7a,Sonny Jeon,2012-11-04,"Runtime command pinned out! Re-organized coolant pins.- Pinned out cycle start(A2), feed hold(A1), and reset(A0) runtimecommands. These pins are held high with the internal pull-up resistorenabled. All you have to do is connect a normally-open switch to thepin and ground. That's it.- Moved the coolant control pins to A3 (and the optional mist controlto A4).- Moved all of the MASK defines into the config.h file to centralizethem.","['config.h,limits.h,protocol.c,report.c,stepper.h']"
c2b31a06ffce3371131a0fcb67cd221b7a89575c,Sonny Jeon,2012-11-05,"Tweaked dry run and check g-code switches. Now resets when toggled off.- To make managing the code easier and to help ensure a user startswith a fresh reset, the functionality of check g-code and dry run hasbeen changed to automatically perform a soft reset when toggled off.Position will not be lost, unless there is a cycle active. Feed holdbefore toggling off it needed.This is mainly a safety issue. If a user dry runs a program and killsit mid-program, and then restarts it thinking to run it as normal, theg-code modes that we're set may not be what they expect, and very badthings can happen.- NOTE: Grbl is at 83.5% of flash capacity. Not a lot of room left, butI think we can squeeze in some more!","['gcode.c,gcode.h,protocol.c']"
b3b454ee770d708cc0035c2768387cc21aedc1db,Hans Insulander,2012-11-05,Generate header dependencies and use them in Makefile,['Makefile']
8a09e2c9c4245a6b6cf0531faed2f831dd070f58,Hans Insulander,2012-11-05,Ignore dependency files,['.gitignore']
f41dd6927378c7a2600b2b177aadd59a2fc83ad3,Sonny Jeon,2012-11-05,"Tweaks and bug fixes. Increase to 3 startup blocks. Remove purge/added unlock command- Increased the number of startup blocks to 3 for no good reason otherthan it doesn't increase the flash size.- Removed the purge buffer command and replaced with an disable hominglock command.- Homing now blocks all g-code commands (not system commands) until thehoming cycle has been performed or the disable homing lock is sent.Homing is required upon startup or if Grbl loses it position. This isfor safety reasons.- Cleaned up some of the Grbl states and re-organized it to be littlemore cohesive.- Cleaned up the feedback and status messages to not use so much flashspace, as it's a premium now. - Check g-code and dry run switches how are mutually exclusive andcan't be enabled when the other is. And automatically resets Grbl whendisabled.- Some bug fixes and other minor tweaks.","['config.h,gcode.c,main.c,motion_control.c,nuts_bolts.h,protocol.c,report.c,report.h,settings.c']"
e2e794af451058217a78ade4b8846f8e23b30a0e,Sonny Jeon,2012-11-06,Merge pull request #132 from hin/header_dependenciesHeader dependencies,['']
5e7a4b3ba8a032aa6880d7eb8224a37819f0286c,Sonny Jeon,2012-11-07,"More tweaks. Removed dry run. Trimmed all messages to save flash space.- Removed the dry run switch. It was getting overly complicated forwhat it needed to do. In practice, single block mode and feed rateoverrides (coming in next release) does a much better job with dry runsthan 'dry run'.- Trimmed all of Grbl's messages from help, status, feedback tosettings. Saved 0.6KB+ of flash space that could be used for v0.9features.- Removed some settings inits when set. Will depend on user to powercycle to get some of these to reload.- Fixed a bug with settings version not re-writing old settings, whenit should. Thanks Alden!","['config.h,gcode.c,gcode.h,main.c,protocol.c,report.c,settings.c,settings.h']"
baf137882b653b0728502ddd489d73e4f9ac8e08,Sonny Jeon,2012-11-08,Sanguino compile patch@daapp : Sanguino compile serial USART path. Thanks!,"['serial.c,settings.c']"
00fd09189daf30be6bb2bc21233d0f7c2b0339f3,Sonny Jeon,2012-11-08,"Housekeeping.- Added some more notes to config.h.- Added the ability to override some of the #defines around Grbl inconfig.h, like planner buffer size, line buffer size, serialsend/receive buffers. Mainly to centralize the configurations to beable to port to different microcontrollers later.","['config.h,limits.c,limits.h,planner.h,protocol.h,serial.h,stepper.c,stepper.h']"
5844172af13e11b03c8b80f6d6ebf2b6b64ff181,Sonny Jeon,2012-11-09,Fixed homing cycle hanging after locating switches.,['motion_control.c']
978de77c2f6a4ca15625d95946650875d3cef53e,Sonny Jeon,2012-11-09,"Added note that D13 can't be used as input, pulled-high.","['config.h,motion_control.c']"
e6ad15b548c65bf64c5fc733329e0ed9ebfc0e27,Sonny Jeon,2012-11-10,Tweaks. Seek rate updates when set. CCW arc full circle fix.- Fixed a minor issue where the seek rates would not immediately beused and only would after a reset. Should update live now.- A full circle IJ offset CCW arc would not do anything. Fixed bug viaa simple if-then statement.- Radius mode tweaks to check for negative value in sqrt() rather thanisnan() it. Error report updated to indicate what actually happened.,"['gcode.c,gcode.h,motion_control.c,report.c,report.h']"
559feb97e23b783883c8aef549d3dc330f9171b9,Sonny Jeon,2012-11-14,"Re-factored system states and alarm management. Serial baud support greater than 57600.- Refactored system states to be more clear and concise. Alarm locksprocesses when position is unknown to indicate to user something hasgone wrong.- Changed mc_alarm to mc_reset, which now manages the system resetfunction. Centralizes it.- Renamed '$X' kill homing lock to kill alarm lock.- Created an alarm error reporting method to clear up what is an alarm:message vs a status error: message. For GUIs mainly. Alarm codes arenegative. Status codes are positive.- Serial baud support upto 115200. Previous baudrate calc was unstablefor 57600 and above.- Alarm state locks out all g-code blocks, including startup scripts,but allows user to access settings and internal commands. For example,to disable hard limits, if they are problematic.- Hard limits do not respond in an alarm state.- Fixed a problem with the hard limit interrupt during the homingcycle. The interrupt register is still active during the homing cycleand still signal the interrupt to trigger when re-enabled. Instead,just disabled the register.- Homing rate adjusted. All axes move at homing seek rate, regardlessof how many axes move at the same time. This is unlike how the steppermodule does it as a point to point rate.- New config.h settings to disable the homing rate adjustment and theforce homing upon powerup.- Reduced the number of startup lines back down to 2 from 3. Thisdiscourages users from placing motion block in there, which can be verydangerous.- Startup blocks now run only after an alarm-free reset or after ahoming cycle. Does not run when $X kill is called. For satefy reasons","['config.h,gcode.c,limits.c,main.c,motion_control.c,motion_control.h,nuts_bolts.c,nuts_bolts.h,protocol.c,report.c,report.h,serial.c,serial.h,settings.c']"
5dd6d90122dce991a99eab5aa3a5c991dd5c938a,Sonny Jeon,2012-11-15,"Added Grbl state in status report. Removed switch support.- Added Grbl state (Idle, Running, Queued, Hold, etc) to the real-timestatus reporting feature as feedback to the user of what Grbl is doing.Updated the help message to reflect this change.- Removed switches (dry run, block delete, single block mode). To keepGrbl simple and not muddled up from things that can easily be takencare of by an external interface, these were removed.- Check g-code mode was retained, but the command was moved to '$C'from '$S0'.","['config.h,gcode.c,gcode.h,motion_control.c,nuts_bolts.h,protocol.c,report.c,report.h']"
d85238cc9b70abc94fd4f07e720f8090468d383c,Sonny Jeon,2012-11-18,"Homing search sequence now compile-time option. New defaults.h file. Tidying up.- The homing sequence is now a compile-time option, where a user canchoose which axes(s) move in sequence during the search phase. Up to 3sequences. Works with the locating phase and the pull-off maneuver.- New defaults.h file to store user generated default settings fordifferent machines. Mainly to be used as a central repo, but each setmay be select to be compiled in as a config.h define.","['config.h,defaults.h,gcode.c,limits.c,motion_control.c,nuts_bolts.h']"
b3f553653078234f0e5f22ebeccd73d9bf5f8575,Sonny Jeon,2012-11-18,Updated readme,"['defaults.h,readme.textile']"
9e0ce55dbc3eb8267509e1084071e04fb5f15443,Sonny Jeon,2012-11-19,"Updated interface protocol. Fixed M2 bug.- Updated interface protocol to play nicer with interface programs. AllGrbl responses beginning with '$' signifies a setting. Bracketed '[]'responses are feedback messages containing either state, parameter, orgeneral messages. Chevron '<>' response are from the real-time statusmessages, i.e. position.- M2 Program end command was causing a system alarm. Fixed. Thanks@blinkenlight !","['defaults.h,planner.c,report.c,stepper.c']"
c712af23abe9e3752e6d7e14943cec25eaed1833,Sonny Jeon,2012-11-20,Merge v0.8 edge to master,['']
ce45a348db692acbaa3631bbe095af65e270f690,Sonny Jeon,2012-11-20,Merge error fix.,['nuts_bolts.h']
e4d8cf511e8db1366167c1a829c177f6e8ba2bd3,Sonny Jeon,2012-11-25,"G28/G30 post move bug fix.- Fixed a bug when after moving to a pre-defined position G28/G30, thenext move would go someplace unexpected. The g-code parser positionvector wasn't getting updated.",['gcode.c']
bba633101a54551917e58ca00f2d08bcc82c34b4,Sonny Jeon,2012-11-25,G28/G30 post move bug fix. Altered file permissions.,"['COPYING,Makefile,config.h,eeprom.c,eeprom.h,gcode.c,gcode.h,limits.c,limits.h,main.c,motion_control.c,motion_control.h,nuts_bolts.c,nuts_bolts.h,planner.c,planner.h,print.c,print.h,protocol.c,protocol.h,readme.textile,serial.c,serial.h,settings.h,spindle_control.c,spindle_control.h,stepper.c,stepper.h']"
9ba117c1bb46bdcc4e702b4e3439e29d71c900d5,Sonny Jeon,2012-12-08,"New stepper algorithm. Optimized planner.- Brand-new stepper algorithm. Based on the Pramod Ranade inverse timealgorithm, but modified to ensure step events are exact. Currentlylimited to about 15kHz step rates, much more to be done to enable 30kHzagain.- Removed Timer1. Stepper algorithm now uses Timer0 and Timer2.- Much improved step generation during accelerations. Smoother. Allowsmuch higher accelerations (and speeds) than before on the same machine.- Cleaner algorithm that is more easily portable to other CPU types.- Streamlined planner calculations. Removed accelerate_until andfinal_rate variables from block buffer since the new stepper algorithmis that much more accurate.- Improved planner efficiency by about 15-20% during worst casescenarios (arcs).- New config.h options to tune new stepper algorithm.","['config.h,defaults.h,nuts_bolts.h,planner.c,planner.h,settings.h,stepper.c']"
3082fdbb6d7e24527915ebc16d5dcf545bc2929c,Sonny Jeon,2012-12-10,"Planner execution time halved and bug fixes. Increased step rate limit to 30kHz.- Planner execute speed has been more than halved from 4ms to 1.9mswhen computing a plan for a single line segment during arc generation.This means that Grbl can now run through an arc (or complex curve)twice as fast as before without starving the buffer. For 0.1mm arcsegments, this means about the theoretical feed rate limit is about3000mm/min for arcs now.- Increased the Ranade timer frequency to 30kHz, as there doesn't seemto be any problems with increasing the frequency. This means that themaximum step frequency is now back at 30kHz.- Added Zen Toolworks 7x7 defaults.","['config.h,defaults.h,planner.c,report.c,stepper.c']"
b7b31df3af2d4d3119b5134e19a715d1f9f06c32,Sonny Jeon,2012-12-10,Planner bug fix.- Oops! Misplace an if-then statement. Should work as advertised now.(Hopefully),['planner.c']
4f273db8058f6c8a83fc9b7dac2ee0542b80dfd6,Sonny Jeon,2012-12-10,"(Another) Planner bug fix.- Oops again. Thought the new planner changes made things much better,but there was a bug. Improvements we on the order of 20% execution timereduction, rather than half. The increase to 30kHz Ranade timerfrequency also increased the overall overhead, so the total plannerchange? Zero. But, it's still better.",['planner.c']
2dc920a8e575faa47eb0ceed79efab7242f28605,Sonny Jeon,2012-12-11,Planner optimizations.- Improved planner execution speed by 5% or more. Re-factored most ofthe calculations in terms of the square of velocity. This removed a lotof sqrt() calculations for every planner_recalculate.,"['planner.c,planner.h,stepper.c']"
47bfe18327e88fed42fd4f58a5762123fec75077,Sonny Jeon,2012-12-11,"Added builds folder.In light of the downloads section in Github being removed, added abuilds folder for all of the .hex files. Hopefully these won't beremoved either.","['.gitignore,grbl_0_51_atmega168_16mhz_9600.hex,grbl_0_51_atmega328p_16mhz_9600.hex,grbl_v0_6b_atmega168_16mhz_9600.hex,grbl_v0_6b_atmega328p_16mhz_9600.hex,grbl_v0_7d_atmega328p_16mhz_9600.hex,grbl_v0_8a_edge_328p_16mhz_9600_build20120310.hex,grbl_v0_8c_atmega328p_16mhz_9600.hex,grbl_v0_9a_edge_328p_16mhz_9600_build20121210.hex']"
b297b8d788f798c0b720d19b4a4d9be05b66c44e,Sonny Jeon,2012-12-11,"Added builds folder.Because the Downloads section has been removed, added a builds folderfor users to download pre-compiled firmware without needing to compileit themselves.","['.gitignore,grbl_0_51_atmega168_16mhz_9600.hex,grbl_0_51_atmega328p_16mhz_9600.hex,grbl_v0_6b_atmega168_16mhz_9600.hex,grbl_v0_6b_atmega328p_16mhz_9600.hex,grbl_v0_7d_atmega328p_16mhz_9600.hex,grbl_v0_8a_edge_328p_16mhz_9600_build20120310.hex,grbl_v0_8c_atmega328p_16mhz_9600.hex,grbl_v0_9a_edge_328p_16mhz_9600_build20121210.hex']"
37549986df39bca65a6b88b5c9b32c1bf1e90960,Sonny Jeon,2012-12-12,Moved compiled builds to different repo.,"['grbl_0_51_atmega168_16mhz_9600.hex,grbl_0_51_atmega328p_16mhz_9600.hex,grbl_v0_6b_atmega168_16mhz_9600.hex,grbl_v0_6b_atmega328p_16mhz_9600.hex,grbl_v0_7d_atmega328p_16mhz_9600.hex,grbl_v0_8a_edge_328p_16mhz_9600_build20120310.hex,grbl_v0_8c_atmega328p_16mhz_9600.hex,grbl_v0_9a_edge_328p_16mhz_9600_build20121210.hex']"
add794481101f1dcec6b1f5b7cefbbb65403f626,Sonny Jeon,2012-12-12,Added download links to README.,"['grbl_0_51_atmega168_16mhz_9600.hex,grbl_0_51_atmega328p_16mhz_9600.hex,grbl_v0_6b_atmega168_16mhz_9600.hex,grbl_v0_6b_atmega328p_16mhz_9600.hex,grbl_v0_7d_atmega328p_16mhz_9600.hex,grbl_v0_8a_edge_328p_16mhz_9600_build20120310.hex,grbl_v0_8c_atmega328p_16mhz_9600.hex,grbl_v0_9a_edge_328p_16mhz_9600_build20121210.hex,readme.textile']"
b4072a3a5e29414e30b75802663f4d3c735a9f67,Sonny Jeon,2012-12-12,Changed README to markdown,['README.md']
e21d6a2fc4b82e10d76a29f9a6a71ed699c413c1,Sonny Jeon,2012-12-12,Update README.md,['README.md']
cc4df3e14b74350bf8344f4a27e1e54af86a5e14,Sonny Jeon,2012-12-14,"Acceleration independence installed. Initial re-work of planner for feedrate overrides.NOTE: This push is a work-in-progress and there are known bugs thatneed to be fixed, like homing acceleration being incompatible. Releasedfor testing. Settings will definitely be overwritten, as new settingswere needed.- Acceleration independence installed in planner. Each axis can nowhave different accelerations and Grbl will maximize the accelerationsdepending on the direction its moving. Very useful for users like onthe ShapeOko with vastly different Z-axis properties.- More planner optimizations and re-factoring. Slightly improved someof the older calculations, but new acceleration calculations offsetthese improvements. Overall no change in processing speed.- Removed planner nominal length checks. It was arguable whether or notthis improved planner efficiency, especially in the worst case scenarioof arcs.- Updated readme and changed to markdown format.","['.gitignore,README.md,limits.c,planner.c,planner.h,readme.textile,report.c,settings.c,settings.h']"
a1397f61c4862f95f85f12e5facc103b0d836f54,Sonny Jeon,2012-12-16,"Max velocity axes independence installed. Fixed intermittent slow trailing steps. Timer0 disable fix.- Maximum velocity for each axis is now configurable in settings. Allrapids/seek move at these maximums. All feed rates(including rapids)may be limited and scaled down so that no axis does not exceed theirlimits.- Moved around auto-cycle start. May change later, but mainly to ensurethe planner buffer is completely full before cycle starting a streamingprogram. Otherwise it should auto-start when there is a break in theserial stream.- Reverted old block->max_entry_speed_sqr calculations. Feedrateoverrides not close to ready at all.- Fixed intermittent slow trailing steps for some triangle velocityprofile moves. The acceleration tick counter updating was corrected tobe exact for that particular transition. Should be ok for normaltrapezoidal profiles.- Fixed the Timer0 disable after a step pulse falling edge. Thanks@blinkenlight!","['config.h,gcode.c,gcode.h,main.c,motion_control.c,planner.c,report.c,settings.c,settings.h,stepper.c']"
c8b53b9d0a341e978d6faa02359e409159f4a388,Sonny Jeon,2012-12-16,"Slow trailing steps fix. Added more defaults.- Fixed an issue (hopefully) with slow trailing steps after atriangular velocity profile move. Sets the trapezoid tick cycle counterto the correct value for an accurate reproduction of the decelerationcurve. Keeps it from arriving too early to the target position, whichcauses the slow trailing steps.- Added Zen Toolworks 7x7 to default settings.- Updated readme with new edge build.","['.gitignore,README.md,defaults.h,stepper.c']"
3dfffa622d53e7727600249123ddc0c7db4f8954,Sonny Jeon,2012-12-19,"Arc mm_per_segment removed, now in terms of tolerance. Stepper ramp counter variable type corrected.- Arc mm_per_segment parameter was removed and replaced with anarc_tolerance parameter, which scales all arc segments automatically toradius, such that the line segment error doesn't exceed the tolerance.Significantly improves arc performance through larger radius arc,because the segments are much longer and the planner buffer has more towork with.- Moved n_arc correction from the settings to config.h. Mathematicallythis doesn't need to be a setting anymore, as the default config valuewill work for all known CNC applications. The error does not accumulateas much anymore, since the small angle approximation used by the arcgeneration has been updated to a third-order approximation and how theline segment length scale with radius and tolerance now. Left inconfig.h for extraneous circumstances.- Corrected the st.ramp_count variable (acceleration tick counter) to a8-bit vs. 32-bit variable. Should make the stepper algorithm just atouch faster overall.","['config.h,defaults.h,motion_control.c,planner.c,report.c,settings.c,settings.h,stepper.c']"
5e7c25d4801d79a84e45b42da24b5f5f0db56426,Sonny Jeon,2012-12-21,"Updated README. Max step rate back at 30kHz. Acceleration minor bug fix.- Returned the max step rate to 30kHz. The new arc algorithm works usesso much less CPU overhead, because the segments are longer, that theplanner has no problem computing through them.- Fixed an issue with the acceleration independence scaling. Should nowwork with accelerations above 400mm/sec^2 or so.- Updated README","['README.md,config.h,motion_control.c,planner.c']"
e0f619b8c349d7286ab5ca5624942e8dc07486a9,Sonny Jeon,2012-12-21,Readme link to edge build 2012-12-21,['README.md']
53286744d539adaebd8e77bc42ef106e44047b5a,Sonny Jeon,2013-01-06,Minor changes.- Changed some names up and removed a plan_reset() function that isnever used.,"['config.h,planner.c,planner.h,stepper.c']"
4f459e473b6955393501611e3353a60f1c2a7ca6,Sonny Jeon,2013-01-06,Fixed bug with homing and polling at the same time. Updated readme.,"['README.md,limits.c,motion_control.c,report.c']"
7c6162b90a24fad8f3d769d6a1fabbc8aedc9db2,Alexander Danilov,2013-01-10,Replace some constants with N_AXIS.,"['gcode.c,gcode.h,limits.c,planner.c,report.c,settings.c']"
aad8b0468d265548eba4d1d8fdc79413202853d3,Sonny Jeon,2013-01-09,Merge pull request #160 from daapp/edgeReplace some constants with N_AXIS.,['']
5e76136dd37bec2c2db6b19b3d560e60a0d96dad,Jens Geisler,2013-01-17,relaunch ontop of latest grbl edgecode very messy but tested,"['HelloWorld.nc,Makefile,interrupt.c,interrupt.h,io.h,pgmspace.c,pgmspace.h,sleep.h,config.h,eeprom.c,gnuplot.plt,main.c,planner_inject_accessors.c,rename_execute_runtime.h,runtime.c,serial.c,sim.bat,simulator.c,simulator.h,delay.c,delay.h,floatunsisf.c']"
dd06268c3dc6e7a98435bf91c58fb058bb26deac,Sonny Jeon,2013-01-17,Merge pull request #112 from jgeisler0303/simulatorGrbl Simulator. Oh yeah.,['']
a5c2964a8f1cfb361ac49cec15e1490487c66f27,Silas Baronda,2013-01-17,Removing executable bit on the files,"['COPYING,Makefile,README.md,config.h,commands.txt,resources.txt,structure.txt,eeprom.c,eeprom.h,gcode.c,gcode.h,limits.c,limits.h,main.c,motion_control.c,motion_control.h,nuts_bolts.c,nuts_bolts.h,planner.c,planner.h,print.c,print.h,protocol.c,protocol.h,console,proxy,stream,stream.rb,trapezoid_simulator.rb,simple_stream.py,stream.py,serial.c,serial.h,settings.h,spindle_control.c,spindle_control.h,stepper.c,stepper.h']"
d0d07b7b0c2b052b3c860213da7cb24fae7fe96a,Elijah Insua,2013-01-18,"Fix sim makefile so it works on macThese changes include a path separator fix and the removal of --gc-sections which causes ld failures, and is not needed on a pc.This patch also changes how a compiler is selected.  The makefile will now select the system compiler , which should work fineunder mingw and linux.","['.gitignore,Makefile']"
8a1720e1a13998be705c0ae77800b08c432efe7c,Sonny Jeon,2013-01-18,Merge pull request #167 from tmpvar/simulator-macFix sim makefile so it works on mac,['']
97d18f0ffe76f7943b2b2cb907e3bcb12f910a89,Sonny Jeon,2013-01-18,Merge bug fixes from recent v0.8c push. Added readme for Grbl Sim.,"['README.md,limits.c,motion_control.c,report.c,README.md']"
b9bb0894b6acaadbfe77a14cd247c267feb05394,Sonny Jeon,2013-01-18,Merge pull request #169 from silasb/fix-execute-bit-on-filesRemoving executable bit on the files,['']
dba26eff918ee395e676bf59d43accd1feb19994,Jens Geisler,2013-02-20,implemented a mixture of Sonny's MATLAB and my previous grbl plannerontop of the edge plannerexamples run byte for byte identical old and new version,"['planner.c,interrupt.c,interrupt.h,stepper.c,stepper.h']"
87864cce19c36096f27eb5431c2bc2f4deba24f5,Jens Geisler,2013-02-20,added counter for planner steps,"['planner.c,planner.h,simulator.c']"
40d8b8bf66a8872b41320b7af9056436bbaea980,Sonny Jeon,2013-02-20,Update README.md,['README.md']
67608a501442256ad743d212a1f540e924fa71b5,Sonny Jeon,2013-02-20,Merge pull request #188 from jgeisler0303/new_plannerNew planner commits merge into dev branch.,['']
ea09ddba99bf739043161316bb3fa04c671113a0,Jens Geisler,2013-02-22,changed atomic access for updating the acceleration profilethe stepper interrupt is only halted when necessary and for the shortesttime possible (8% cycle time),"['Makefile,planner.c,planner.h,simulator.c,stepper.h']"
a85e1b80f7ccf8b58fa44c235cfa5d4a8bb47b9a,Sonny Jeon,2013-02-22,Push additional updates from @jgeisler0303,"['planner.c,planner.h,stepper.c']"
74bdc32332b9511643fbef7baa790a527449f708,Sonny Jeon,2013-02-22,Added some prelimary notes to new changes.,"['planner.c,planner.h']"
b75e95c88019051bddb93bb6192492fab4a650ae,bungao,2013-02-26,integrating soft limits,"['limits.c,motion_control.c,protocol.c,report.c,report.h,settings.c,settings.h']"
a0f430d18816a466a83fa523b7971522959e5353,Jens Geisler,2013-02-26,bugfix: uninitiallized curr_block->new_entry_speed_sqr lead to step lossin some cases,['planner.c']
7951b8329464058e97ad1debfafb6233796b7267,Sonny Jeon,2013-02-26,Merge pull request #193 from bungao/soft_limtsintegrating soft limits,['']
74b2af3c2f16d83f3e2d3371a23c5cc6b32cdfea,Sonny Jeon,2013-03-01,"Minor changes and added notes to soft limits routines.- Changed up mc_line to accept an array rather than individual x,y,zcoordinates. Makes some of the position data handling more effective,especially for a 4th-axis later on.- Changed up some soft limits variable names.","['gcode.c,motion_control.c,motion_control.h,report.c,settings.c,settings.h']"
b06643a2e07c4d9d80a5ec4aaa02b436c1522621,Sonny Jeon,2013-03-01,Bug fix to-do note on soft limit checks. Not yet completed.,['motion_control.c']
d376f03bd0706456a6e66f44ca27f6b0f4498d38,Bertus Kruger,2013-03-12,Update eeprom.cFunction eeprom_put_char's parameters did not align with the .h file.,['eeprom.c']
058cf3f13a3ebd1adb07db684db838467b2d8e36,Bertus Kruger,2013-03-12,"Update gcode.chome_select defined out of scope. Moved it outside the switch so the rest of the switch can see it properly.",['gcode.c']
7bb20a7505eb0b57af36265d0e7d45376d6986a7,Bertus Kruger,2013-03-13,Update eeprom.cChanged back,['eeprom.c']
5ecc661ec8adc61a9e4f9dec704f259450309394,Bertus Kruger,2013-03-13,Update eeprom.hFixed the function signature.,['eeprom.h']
8e01fed143c6fbd5239a93bedcdb64f2eb245102,Bertus Kruger,2013-03-13,Update gcode.cRemoved the home_select variable.,['gcode.c']
cdcb4263e8df0f6329658c36494e37347642b797,Sonny Jeon,2013-03-12,Merge pull request #200 from Protoneer/masterFixed small bug.,['']
aae1089051367091ed9551d4c5aa942d9298c855,Sonny Jeon,2013-03-12,Pushed minor changes. Thanks @Protoneer!,"['eeprom.h,gcode.c']"
f04489530a8375548337b89433a9016297f55f65,Bertus Kruger,2013-03-13,"Update nuts_bolts.cRemoved __floatunsisf and used normal casting on line 81. This makes it compatible with the Arduino IDE.",['nuts_bolts.c']
61f2bd1bc3502bc56ac05b635d3a0bf6c3555d13,Bertus Kruger,2013-03-13,"Update planner.cRemoved inline from all functions. If this is really needed is there another way that we can get around using it? (The Arduino IDE does not recognize it)",['planner.c']
e3cfa93d973f60b16faa3664c2dbb35e4976334a,Sonny Jeon,2013-03-19,G-code updates for G10 L2 and L20.- LinuxCNC's g-code definitions changed for G10. Updated to theirdescriptions.,['gcode.c']
96f7d9b78e1c6e81d17bf98c878da60327faa960,Sonny Jeon,2013-03-19,G-code updates for G10 L2 and L20- Updated g-codes G10 L2 and G10 L20 to the new descriptions onlinuxcnc.org,['gcode.c']
33c6659523484759b773253528580d8feaadc899,Sonny Jeon,2013-03-19,Update README.md,['README.md']
3c9c516a4770b3a7d7d63b4d51cbb5b28c1131fd,Sonny Jeon,2013-03-21,"Untested! Soft limits, max travel, homing changes, new settings.- WARNING: Completely untested. Will later when there is time. SettingsWILL be overwritten, as there are new settings.- Soft limits installed. Homing must be enabled for soft limits to workcorrectly. Errors out much like a hard limit, locking out everythingand bringing up the alarm mode. Only difference is it forces a feedhold before doing so. Position is not lost.- IMPORTANT: Homing had to be updated so that soft limits work betterwith less CPU overhead. When homing completes, all axes are assumed toexist in negative space. If your limit switch is other side, the homingcycle with set this axis location to the max travel value, rather thanzero.- Update mc_line() to accept an array, rather than individual variables.- Added an mc_auto_cycle_start() function handle this feature.Organization only.-","['config.h,defaults.h,gcode.c,limits.c,limits.h,main.c,motion_control.c,motion_control.h,nuts_bolts.h,planner.c,planner.h,protocol.c,report.c,report.h,settings.c,settings.h']"
49f703bb2c3ab8816ef7451b34cef078f31701fb,Sonny Jeon,2013-03-22,Update README.md,['README.md']
08baabc63cd74ba18ca633a58c482934c4b305cc,Sonny Jeon,2013-03-28,Minor updates to code and commenting.,"['gcode.c,limits.c,motion_control.c,stepper.c']"
1fa3dad20617b4673765d7846208807345aa82cd,Sonny Jeon,2013-04-05,Updates to edge/dev. Line buffer increased/planner buffer decreased. Line overflow feedback.- Increased g-code parser line buffer to 70 characters (from 50) toprevent some long arc commands from getting truncated.- Decreased planner buffer from 18 to 17 blocks to free up memory forline buffer.- Added a line buffer overflow feedback error (Thanks @BHSPitMonkey!),"['config.h,gcode.c,planner.h,protocol.c,protocol.h,report.c,report.h,stepper.c,stepper_new.c']"
ca563cf42366a861f94aa6df45b31e939d1513ed,Sonny Jeon,2013-04-05,"Increased g-code parser line buffer. Added line overflow feedback.- Increased g-code parser line buffer from 50 to 70 characters. Shouldfix most all issues with long arc statements, provided that they are 8digits(float) long only.- Added a line buffer overflow feedback error to let the user know whenit encounters this problem. Resets the line whenever this occurs.(Thanks @BHSPitMonkey!)","['config.h,protocol.c,protocol.h,report.c,report.h']"
fc5c497256a2d43f3e9192bcb541d598896ed513,Sonny Jeon,2013-04-05,Updated readme,['README.md']
d39abee37de5557f11f3ba9a2c41c8b5d6f5d615,0xPIT,2013-05-16,fix command line parameter for avr-size,['Makefile']
8c781e155c0893ffba9296399ca5e7fcd3d8248c,Elmo Mäntynen,2013-07-21,Make serial work with most chips by default,"['serial.c,serial.h']"
689bc6d4714610240f56c967859c20e5ffd6a204,Elmo Mäntynen,2013-07-21,"Added pin mapping list to docs, useful for porting",['pinmapping.txt']
72ef50b17df34a80083457f860b1922ebfde2e9d,Elmo Mäntynen,2013-07-21,Refactor config.h to allow defaults for chips/boards with different pin mappings,"['config.h,config_default_2560.h,config_default_328p.h']"
b2b5352e82d82ea7d9503e158857ec4aec98706d,Sonny Jeon,2013-08-19,Merge pull request #229 from 0xPIT/patch-1fix command line parameter for avr-size,['']
7a175bd2dbf7dd3521607f30031d8391377a89d3,Sonny Jeon,2013-08-19,"Push old dev_2 draft to work on other things.- **NON-FUNCTIONAL**- Contains an old draft of separating the stepper driver direct accessto the planner buffer. This is designed to keep the stepper and plannermodules independent and prevent overwriting or other complications. Inthis way, feedrate override should be able to be installed as well.- A number of planner optimizations are installed too.- Not sure where the bugs are. Either in the new planner optimizations,new stepper module updates, or in both. Or it just could be that theArduino AVR is choking with the new things it has to do.","['config.h,gcode.c,gcode.h,limits.c,main.c,motion_control.c,nuts_bolts.c,nuts_bolts.h,planner.c,planner.h,planner_old.c,planner_old.h,print.c,print.h,protocol.c,report.c,settings.c,stepper.c,stepper.h,stepper_new2.c,stepper_new_dual_ISR.c,stepper_new_time.c,stepper_old.c']"
b2a69c02cf9ecca36134ba1455b040978d1d2910,Sonny Jeon,2013-08-19,"Merge pull request #260 from elmom/masterThanks for the contribution! Looks good. Will update some of the semantics shortly, but the idea is solid.",['']
e24e67ffe274cbce2ffae506c4f12de73606dd7b,Sonny Jeon,2013-08-19,"Processor-independent pin mapping feature.- Cleaned up and organized pin mapping concept by @elmom.- pin_map.h allows for user-supplied pin mapping and port vectordefinitions in a centralized file. With more processor types, moredefinitions could be added.","['config.h,config_default_2560.h,config_default_328p.h,nuts_bolts.h,pin_map.h,serial.h']"
0894183991bca4c5d7c70de130c561c6d23f343b,Sonny Jeon,2013-08-20,Pin map definition cleanup.,"['config.h,pin_map.h,serial.c']"
24280f95a5b0c257b73a1755df376de44acff271,0xPIT,2013-08-25,remove mcu argument for avr-size in makefile as it is not present in GNU Binutils 2.22,['Makefile']
471a45a1b9dc08ea29517d2631dec077b8c104a9,Sonny Jeon,2013-08-25,Merge pull request #263 from 0xPIT/masterremove mcu argument for avr-size in makefile as it is not present in GNU...,['']
805f0f219ce077c44c15e2f1c9fa83ef10b436b4,Sonny Jeon,2013-10-09,"Protected buffer works! Vast improvements to planner efficiency.  Many things still broken with overhaul.Development push. Lots still broken.- Protected planner concept works! This is a critical precursor toenabling feedrate overrides in allowing the planner buffer and thestepper execution operate atomically. This is done through aintermediary segment buffer.- Still lots of work to be done, as this was a complete overhaul of theplanner and stepper subsystems. The code can be cleaned up quite a bit,re-enabling some of the broken features like feed holds, and finishingup some of the concepts- Pushed some of the fixes from the master and edge branch to here, asthis will likely replace the edge branch when done.","['Makefile,config.h,pinmapping.txt,nuts_bolts.h,pin_map.h,planner.c,planner.h,serial.c,stepper.c,stepper.h']"
8a10654b1cb694f4b24f7fd247acc345f3275d28,Sonny Jeon,2013-10-12,"New stepper subsystem bug fixes.- New stepper algorithm with the new optimized planner seems to beworking nearly twice as fast as the previous algorithm.- For one, the planner computation overhead is probably a fraction ofwhat it used to be with the worst case being about half still.- Secondly, anytime the planner plans back to the first executingblock, it no longer overwrites the block conditions and allows it tocomplete without lost steps. So no matter if the streams slows, theprotected planner should keep the steppers moving without risk of loststeps (although this still needs to be tested thoroughly and mayaudibly sound weird when this happens.)- It now seems that the bottleneck is the serial baudrate (which isgood!)",['stepper.c']
0cb5756b5310b8bf0cbc554393d14e86a0186c05,Sonny Jeon,2013-10-14,"Fine tuning of new stepper algorithm with protected planner. Adaptive step prediction for segment buffer.- Cleaned up the new stepper algorithm code with more commenting andbetter logic flow.- The new segment buffer now predicts the number of steps each segmentshould have to execute over about 8 milliseconds each (based on theACCELERATION_TICKS_PER_SECOND setting). So, for when the whole segmentbuffer is full, the stepper algorithm has roughly 40 milliseconds ofsteps queued before it needs to refilled by the main program.- Readjusted the max supported step rate back to 30kHz from the lowerdevelopment 20kHz. Everything still works amazing great and the testCNC machine still runs twice as fast with the new stepper algorithm andplanner.- Upped the standard serial baudrate to 115200 baud, as it is clearthat the bottleneck is the serial interface. Will now support this, aswell as the old 9600 baud, in new firmware builds.","['config.h,defaults.h,planner.c,stepper.c,stepper_new2.c,stepper_new_dual_ISR.c,stepper_new_time.c']"
3e92fef3b434e72bf31f913d03f12dacfd2ddf17,Rob Brown,2013-10-17,Update Pin Change Interrupts so it worksPCIE1 - Interrupt 8 on the Mega is attached to USART0 RX so when anyserial communication was transmitted it was triggering the ResetInterrupt,['pin_map.h']
9b426d0c9188adee1ffcfdeb87daeb13eee8c88e,Sonny Jeon,2013-10-17,Merge pull request #278 from EliteEng/masterUpdate Pin Change Interrupts on Mega 2560,['']
a2457c4d70b12c587592441df219ca0d9b4d5a23,Rob Brown,2013-10-18,Changed Stepper PinsChanged Stepper Pins so the Step Port Invert Mask matches the UNO,['pin_map.h']
fe032169527a521cc03cf753e4057c784d15e068,Sonny Jeon,2013-10-21,Merge pull request #279 from EliteEng/masterChanged Stepper Pins,['']
f7429ec79b621d1a4fb4486eac5bd03f6258589e,Sonny Jeon,2013-10-24,"Cleaned up stepper and planner code.- Added some compile-time error checking. Will add more in futurepushes to ensure settings are correct and within parameters that won'tbreak anything.- Pushed some master branch changes with MEGA pin settings.- Cleaned up planner code and comments to clarify some of the newchanges. Still much to do here.- Cleaned up the new stepper code. May need to abstract some of thesegment buffer more to fix the feed holds (and integrate homing intothe main stepper routine). With what's planned, this should make thestepper algorithm easier to attach other types of processes to it,where it is now tightly integrated with the planner buffer and nothingelse.","['README.md,config.h,pin_map.h,planner.c,planner.h,stepper.c']"
27297d444ba8480ee27327c6644c48485601e57d,Sonny Jeon,2013-10-29,Updated comments. Changed stepper variable names to be more understandable. Added step locking note.- Updated config comments and stepper code comments for the new changes.- Changed stepper algorithm variable names to be more understandable inwhat they actually do.- Added a stepper lock note in default.h per user request.- Started some code layout in handling feed holds and refactoring thehoming routine to use the main stepper algorithm instead of a seperateversion.,"['config.h,defaults.h,limits.c,protocol.c,stepper.c,stepper_old.c,stepper_v0_9.c']"
0ac6c8719613c14534c77e8cbbe85ed4912ea297,Sonny Jeon,2013-10-29,Planner function call fix. More clean up.,"['planner.c,protocol.c,stepper.c']"
4f9bcde40e3a7cfcc94721d8939ec93f8ceb858f,Sonny Jeon,2013-10-29,Merge branch 'dev_2' into devConflicts:README.mdgcode.cmotion_control.cplanner.cplanner.hprotocol.creport.csettings.csettings.hstepper.cstepper.h,"['Makefile,README.md,config.h,defaults.h,pinmapping.txt,eeprom.h,gcode.c,gcode.h,limits.c,limits.h,main.c,motion_control.c,motion_control.h,nuts_bolts.c,nuts_bolts.h,pin_map.h,planner.c,planner.h,planner_old.c,planner_old.h,print.c,print.h,protocol.c,protocol.h,report.c,report.h,serial.c,settings.c,settings.h,stepper.c,stepper.h,stepper_old.c,stepper_v0_9.c']"
4402a9f74a5c84a6c93557b6e468ff8f833e76ae,Sonny Jeon,2013-10-29,Merge branch 'dev_2' into devConflicts:	README.md	gcode.c	motion_control.c	planner.c	planner.h	protocol.c	report.c	settings.c	settings.h	stepper.c	stepper.h,['']
b8f0a2399e1aaf2c8e5c87d2ef9f02a46d73bab2,Sonny Jeon,2013-10-29,Merge fixes.,"['limits.c,motion_control.c,planner.c,report.c,report.h,stepper.c']"
2eb5acaa33758b33d6448204754b01fe4ad16520,Sonny Jeon,2013-10-29,Another merge fix.,['Makefile']
b36e30de2eab858b5840b49b62753c18844608f8,Sonny Jeon,2013-11-22,"Yet another major stepper algorithm and planner overhaul.- Overhauled the stepper algorithm and planner again. This timeconcentrating on the decoupling of the stepper ISR completely. It isnow dumb, relying on the segment generator to provide the number ofsteps to execute and how fast it needs to go. This freed up lots ofmemory as well because it made a lot tracked variables obsolete.- The segment generator now computes the velocity profile of theexecuting planner block on the fly in floating point math, instead ofallowing the stepper algorithm to govern accelerations in the previouscode. What this accomplishes is the ability and framework to (somewhat)easily install a different physics model for generating a velocityprofile, i.e. s-curves.- Made some more planner enhancements and increased efficiency a bit.- The changes also did not increase the compiled size of Grbl, butdecreased it slightly as well.- Cleaned up a lot of the commenting.- Still much to do, but this push works and still is missing feedholds(coming next.)","['planner_dist.c,planner_time_archive.c,planner_v0_9.c,planner_v0_9.h,stepper_dist.c,stepper_old.c,stepper_time.c,stepper_time_archive.c,stepper_v0_9.c,config.h,planner.c,planner.h,stepper.c,stepper.h,stepper_test.c']"
e8345fdb88c2dae2040320a24ea3888e556c142e,Travis Snoozy,2013-11-22,Add support for active-high limit switches,"['config.h,limits.c']"
cc3212d54a2bd4a734d7d4b68cdcab2460f384ff,Sonny Jeon,2013-11-23,Merge pull request #289 from Travis-Snoozy/masterAdd support for active-high limit switches,['']
2f6663a0b9d983ba857e400997f91a6fd93abe30,Sonny Jeon,2013-12-04,"Reinstated feed holds into new stepper algorithm and planner. Rough draft, but working.- Reinstated the feed hold feature with the new stepper algorithm andnew optimized planner. It works, but will be re-factored a bit soon toclean up the code.- At this point, feedrate overrides may need to be installed in thev1.0 version of grbl, while this version will likely be pushed to theedge branch soon and pushed to master after the bugs have been squashed.- Measured the overall performance of the new planner and stepperalgorithm on an oscilloscope. The new planner is about 4x faster thanbefore, where it is completing a plan in around 1ms. The stepperalgorithm itself is minutely faster, as it is a little lighter. Thetrade-off in the increased planner performance comes from the new stepsegment buffer. However, even in the worse case scenario, the stepsegment buffer generates a new segment with a typical 0.2 ms, and theworse case is 1ms upon a new block or replanning the active block.Added altogether, it’s argubly still twice as efficient as the old one.","['planner.c,planner.h,stepper.c']"
a87f25773cfe551509f1f82c9bd997ae33c87aa5,Sonny Jeon,2013-12-07,"Pushed limits active high option. Updated defaults.h. Misc bug fixes. Cleaned up codebase.- Pushed limit switch active high option (i.e. NC switches).- Updated defaults.h to be in-line with the new settings.- Refactored feed hold handling and step segment buffer to be moregeneralized in effort to make adding feedrate overrides easier in thefuture. Also made it a little more clean.- Fixed G18 plane select issue. Now ZX-plane, rather than XZ-plane, perright hand rule.- Cleaned some of the system settings by more accurately renaming someof the variables and removing old obsolete ones.- Declared serial.c rx_buffer_tail to be volatile. No effect, sinceavr-gcc automatically does this during compilation. Helps with portingwhen using other compilers.- Updated version number to v0.9b.- Updates to README.md","['README.md,planner_dist.c,planner_time_archive.c,planner_v0_9.c,planner_v0_9.h,stepper_dist.c,stepper_old.c,stepper_time.c,stepper_time_archive.c,stepper_v0_9.c,config.h,defaults.h,gcode.c,limits.c,planner.c,planner.h,report.c,serial.c,settings.c,settings.h,stepper.c,stepper_test.c']"
d00525d384aa5cba6399ebcccb0b1368b2c970f8,Sonny Jeon,2013-12-07,Pushed bug fixes. Updated readme.- G18 plane select fix from XZ-plane to ZX-plane per right hand rule.- Added volatile declaration for rx_buffer_tail in serial.c. No realeffect to operation as avr-gcc adds this upon compilation. Helps withporting issues when using a different compiler.,"['README.md,gcode.c,serial.c']"
b562845d9d20bd09426f8d20647ed334eeb7491f,Sonny Jeon,2013-12-07,"Deceleration to zero speed improvements. Update defaults.- A minor issue with deceleration ramps when close to zero velocity.Should be virtually unnoticeable for most CNC systems, but fixed inthis push and accurate to physics.- Updated some of the junction deviation defaults. Because the newstepper algorithm can easily maximize a CNC machine’s capabilities orsimply go much faster, this means the speed in which it entersjunctions has to be a little more constrained. Meaning that, we have toslow a little bit down more so that we don’t exceed the accelerationlimits of the stepper motors.","['defaults.h,stepper.c']"
bfa8ebcac1a3f9f12aee933dcf02bbb52bc42aa5,Edward,2013-12-10,added shapeoko2 profileshapeoko 2 uses 2mm GT2 belting and 20tooth pulleys,['defaults.h']
76e7445a85271c15421f12407d96bc0d5ecb3fef,Sonny Jeon,2013-12-10,Merge pull request #301 from shapeoko/masteradded shapeoko2 profile,['']
3054b2df774c8baa19d56421466c0f3c44c00041,Sonny Jeon,2013-12-10,"Revamped homing cycle. Axis limits and max travel bug fixes. Build info. Refactored config.h.- Revamped and improved homing cycle. Now tied directly into the mainplanner and stepper code, which enables much faster homing seek rates.Also dropped the compiled flash size by almost 1KB, meaning 1KB morefor other features.- Refactored config.h. Removed obsolete defines and configurationoptions. Moved lots of “advanced” options into the advanced area of thefile.- Updated defaults.h with the new homing cycle. Also updated theSherline 5400 defaults and added the ShapeOko2 defaults per usersubmissions.- Fixed a bug where the individual axes limits on velocity andacceleration were not working correctly. Caused by abs() returning aint, rather than a float. Corrected with fabs(). Duh.- Added build version/date to the Grbl welcome message to help indicatewhich version a user is operating on.- Max travel settings were not being defaulted into the settings EEPROMcorrectly. Fixed.- To stop a single axis during a multi-axes homing move, the stepperalgorithm now has a simple axis lock mask which inhibits the desiredaxes from moving. Meaning, if one of the limit switches engages beforethe other, we stop that one axes and keep moving the other.","['config.h,defaults.h,limits.c,nuts_bolts.h,planner.c,report.c,report.h,settings.c,settings.h,stepper.c']"
331a2cd0944cecce0112b9e7b652e2ca8b1920ee,Sonny Jeon,2013-12-10,Update README.md,['README.md']
eefc25be91615c7533bd95ea3d57ae8642759dad,Scott R Carlson,2013-12-27,Hard Limits configured for active high.Added the use of homing_dir_mask to homing_cycle,"['config.h,limits.c']"
8550d2c3f9f9316eae39648ec4f5fc34e1def5ef,Sonny Jeon,2013-12-27,Merge pull request #312 from scottrcarlson/devFixed homing_dir_mask functionality in the re-written homing_cycle.,['']
903b462b2e37b18a8f7884924109fecd66c69e27,Sonny Jeon,2013-12-29,Merge branch 'dev' of https://github.com/grbl/grbl into devConflicts:	limits.c,"['README.md,config.h,limits.c,limits.h,main.c,motion_control.c,motion_control.h,nuts_bolts.h,planner.c,planner.h,protocol.c,report.c,stepper.c,stepper.h']"
bfb8639606a469d107bf31358c3915fde9606371,Sonny Jeon,2013-12-29,Merge branch 'dev' of https://github.com/grbl/grbl into devConflicts:	limits.c,['']
5ab2bb7767730ee32960fd53793721ec27f91fd9,Sonny Jeon,2013-12-29,"Incomplete dev code push, but working. Lots of updates/fixes/improvements. Much still to polish.- Ugh. Github just erased my list of improvements and changes due to aconflict and forcing me to resolve it. Hope this goes through.- Major stepper algorithm change. Trashed the old v0.9 edgebranch-style stepper algorithm. It’s fine, but it was susceptible toaliasing noise when moving very slow or very fast. It also had a bit ofCPU overhead. It was written to solve a standing issue with v0.8master, where it couldn’t generate a smooth acceleration abocve10-15kHz. But, with new step segment buffer in v0.9c, it inadvertentlyfixed the acceleration problem with v0.8 stepper algorithm. So, whatdoes it mean for you? Smoother stepper pulses and likely higher stepfrequencies.- Stepper algorithm now uses Timer1 and Timer2, instead of Timer0 andTimer2. Timers 0 and 2 can be swapped if there is an issue.- With the old v0.8 stepper algorithm, the STEP_DELAY_PULSEconfiguration option is also back.- NEW! Hard limit software debouncing. Grbl now employs the AVR’swatchdog timer as a way to monitor the hard limit pins and checkingtheir states after a delay. This is a simple software debouncingtechnique and may help alleviate some of the false trigger some usershave been complaining about. BUT, this won’t fix electric noise issues!- Fixed an issue with the new homing cycle routine where it wasn’thonoring the acceleration and axis speed limits depending on the homingcycle mask. Now does. Also, updated the homing direction mask code tobe a little cleaner.- Moved the main part of the homing cycle control and execution tomotion_control.c, where it fits better.- Removed the STATE_INIT system state as it was redundant. Made thesystem states into bitflags so multiple system states can be checkedvia one if statement.- Reorganized the power-up routine to work with the new system states.",['stepper.c']
47cd40c8dce6fac545119508459a4f2f0610f9ee,Sonny Jeon,2013-12-30,"Incomplete push but working. Lots more stuff. More to come.- NEW! An active multi-axis step smoothing algorithm that automaticallyadjusts dependent on step frequency. This solves the long standingissue to aliasing when moving with multiple axes. Similar in scheme toSmoothieware, but more advanced in ensuring a more consistent CPUoverhead throughout all frequencies while maintaining step exactness.- Switched from Timer2 to Timer0 for the Step Port Reset Interrupt.Mainly to free up hardware PWM pins.- Seperated the direction and step pin assignments, so we can now movethem to seperate ports. This means that we can more easily support 4+axes in the future.- Added a setting for inverting the limit pins, as so many users haverequest. Better late than never.- Bug fix related to EEPROM calls when in cycle. The EEPROM would killthe stepper motion. Now protocol mandates that the system be either inIDLE or ALARM to access or change any settings.- Bug fix related to resuming the cycle after a spindle or dwellcommand if auto start has been disabled. This fix is somewhat temporaryor more of a patch. Doesn’t work with a straight call-responsestreaming protocol, but works fine with serial buffer pre-fillingstreaming that most clients use.- Renamed the pin_map.h to cpu_map.h to more accurately describe whatthe file is.- Pushed an auto start bug fix upon re-initialization.- Much more polishing to do!","['config.h,cpu_map.h,defaults.h,limits.c,limits.h,main.c,motion_control.c,nuts_bolts.h,planner.c,protocol.c,report.c,settings.c,settings.h,stepper.c']"
15a803e36fa40d89e0f5b2afbb8e93ad14e41acd,Sonny Jeon,2013-12-30,Merge pull request #201 from Protoneer/masterMade a few changes to make the code compatible with the Arduino IDE. Sorry about the tardiness!,['']
f10bad43b2c5b2324e3b2ebf74b58640078107f5,Sonny Jeon,2013-12-30,"Minor bug fixes: Homing travel calculations. Cycle resuming after spindle and dwell commands.- Homing travel calculations fixed. It was computing the min travelrather than max.- Auto-start disable and pausing after spindle or dwell commands.Related to plan_synchronize() function call. Now fixed, but still needto work on the system state.- Pushed a fix to make this branch more Arduino IDE compatible. Removedextern call in nuts_bolts.c- Updated the stepper configuration option of enabling or disabling thenew Adaptive Multi-Axis Step Smoothing Algorithm. Now works either way.- Updated some copyright info.","['config.h,coolant_control.c,coolant_control.h,cpu_map.h,defaults.h,gcode.c,gcode.h,limits.c,limits.h,main.c,motion_control.c,motion_control.h,nuts_bolts.c,nuts_bolts.h,planner.c,planner.h,print.c,print.h,protocol.c,protocol.h,report.c,report.h,serial.c,serial.h,settings.c,settings.h,spindle_control.c,spindle_control.h,stepper.c,stepper.h']"
c0381799eb9f4e809350c4f3e3c059c0dab849b1,Rob Brown,2014-01-02,PWM Spindle Control and Invert Spindle & Coolant PinsPWM Spindle Control and Invert Spindle & Coolant Pins,"['coolant_control.c,cpu_map.h,gcode.c,gcode.h,spindle_control.c,spindle_control.h']"
4f987d2a5e2ebdfd4c0d7c1472b3c036fe473742,Sonny Jeon,2014-01-02,Update README.md,['README.md']
f8dd8fa54d21c17b9aaddb5836b6a8d73d59640d,Sonny Jeon,2014-01-02,"Fix for M7/8/9 modal group checks. Updated AMASS frequency cutoffs and code cleaned.- Updated Grbl version to 0.9c and build number.- G-code parser was missing modal group violation checks for M7/8/9commands. Added them.- Updated the Adaptive Multi-Axis Step Smoothing (AMASS) cutofffrequencies so that the trade between the 16-bit Timer1 accuracy andthe level step smoothing are somewhat better balanced. (Smoothing isn’tfree, but a higher accuracy timer would provide high cutofffrequencies.)","['gcode.c,gcode.h,settings.h,stepper.c']"
ce5f94d6759406987297125b892be447bd388919,Rob Brown,2014-01-03,Update spindle_control.cUpdated spindle_control.c due to compile error.,['spindle_control.c']
e7cd94e2bc7640137567e0cabd89c871fd22d8bf,Sonny Jeon,2014-01-02,Merge pull request #318 from EliteEng/devPWM Spindle Control and Invert Spindle & Coolant Pins,['']
1c4097352dd089d6c445db491e76cc5dc9d4b6f7,Rob Brown,2014-01-03,Update to fix compile errorUpdate to fix compile error,"['spindle_control.c,spindle_control.h']"
0104cad56a7323d13f7637d7d77f9daba8e7bef0,Sonny Jeon,2014-01-03,Merge pull request #322 from EliteEng/devUpdate to fix compile error,['']
8b5f30685108fa6b0e196f50c26a11670f68a1a5,Sonny Jeon,2014-01-04,"Cleaned up variable spindle output (PWM). Code and config comments.- Variable spindle speed output as a configuration option. Thanks@EliteEng! When enabled, the Z-limit (D11) and spindle enable(D12) pinsswitch to allow access to the hardware PWM output on pin D11.Otherwise, everything should work as it does.- Removed option for inverting the spindle and coolant enable pins.This is a safety hazard, especially for the spindle. When Grblinitializes, all pins are momentarily low until it finishes booting. Ifan invert is enabled, this means the spindles can be energized brieflyduring this time. If users need signal inversion, it’s recommended tojust wire in an inversion circuit instead.- Cleared out references to spindle variable output in terms of stepsignal. This isn’t complete and requires more deliberation beforeinstalling.- Cleared up and cleaned up some code and config comments.","['config.h,coolant_control.c,cpu_map.h,limits.c,spindle_control.c,spindle_control.h']"
1baff785f5f6db116baa9cbe61d8183d1003b5f1,Sonny Jeon,2014-01-04,Variable spindle output. Resolved conflicts in last push.Resolve conflicts.,['']
3c3382ff7557a8dff61505b0020f50fdb77d1190,Sonny Jeon,2014-01-05,"New build info feature. (per @Analogreality request)- New build info feature. Hidden command ‘$I’ will print the build infofor your Grbl firmware. Users may also write an identifying messagewithin it via ‘$I=‘ with up to 32 characters. (no more, or else it willbreak).- Adjusted the max number of startup lines to 3. Majority of peoplewill only need one.- Fixed a compile error with spindle_control.c. A rogue #endif wascausing problems.","['config.h,protocol.c,report.c,report.h,settings.c,settings.h,spindle_control.c']"
7a85ab896d1640138f9612b6635299075e6f64d2,Sonny Jeon,2014-01-05,Updates to some stepper algorithm commenting,"['protocol.c,stepper.c']"
cc9afdc195da0b2e71eda71ea24ddbd14378ceb1,Sonny Jeon,2014-01-10,"Lots of re-organization and cleaning-up. Some bug fixes.- Added a new source and header file called system. These files containthe system commands and variables, as well as all of the system headersand standard libraries Grbl uses. Centralizing some of the code.- Re-organized the include headers throughout the source code.- ENABLE_M7 define was missing from config.h. Now there.- SPINDLE_MAX_RPM and SPINDLE_MIN_RPM now defined in config.h. Nouncommenting to prevent user issues. Minimum spindle RPM now providesthe lower, near 0V, scale adjustment, i.e. some spindles can go reallyslow so why use up our 256 voltage bins for them?- Remove some persistent variables from coolant and spindle control.They were redundant.- Removed a VARIABLE_SPINDLE define in cpu_map.h that shouldn’t havebeen there.- Changed the DEFAULT_ARC_TOLERANCE to 0.002mm to improve arc tracing.Before we had issues with performance, no longer.- Fixed a bug with the hard limits and the software debounce featureenabled. The invert limit pin setting wasn’t honored.- Fixed a bug with the homing direction mask. Now is like it used tobe. At least for now.- Re-organized main.c to serve as only as the reset/initializationroutine. Makes things a little bit clearer in terms of executionprocedures.- Re-organized protocol.c as the overall master control unit forexecution procedures. Not quite there yet, but starting to make alittle more sense in how things are run.- Removed updating of old settings records. So many new settings havebeen added that it’s not worth adding the code to migrate old usersettings.- Tweaked spindle_control.c a bit and made it more clear and consistentwith other parts of Grbl.- Tweaked the stepper disable bit code in stepper.c. Requires lessflash memory.","['Makefile,config.h,coolant_control.c,coolant_control.h,cpu_map.h,defaults.h,gcode.c,gcode.h,limits.c,limits.h,main.c,motion_control.c,motion_control.h,nuts_bolts.c,nuts_bolts.h,planner.c,planner.h,print.c,protocol.c,protocol.h,report.c,serial.c,serial.h,settings.c,settings.h,spindle_control.c,spindle_control.h,stepper.c,stepper.h,system.c,system.h']"
3bb92b2530ac7875b65316a0674dac28d5099763,Sonny Jeon,2014-01-14,Update README.md,['README.md']
cdb6de3f4b947e8cd6ee20920780b9a9977b1224,Sonny Jeon,2014-01-15,Update README.md,['README.md']
783100db7dd715696af6d4058a52490d30fb9ff8,michmerr,2014-01-22,Make sure that cycle_start state is set before simulating steps.,['simulator.c']
59e906f7e898178245d8b4f99302837073ba9b2d,michmerr,2014-01-28,Simplify setting of STATE_CYCLE and ISR interval.Set sys.state to STATE_CYCLE directly instead of calling back tost_wakeup().Convert get_step_time() to a constant and rename it to ISR_INTERVAL.,"['simulator.c,simulator.h']"
443f01de77b81dcda68003afb06dd55546987549,Jens Geisler,2014-01-28,Merge pull request #337 from michmerr/edgeMake sure that cycle_start state is set before simulating steps.,['']
c3e4ca73019e00caa26c5b0509252b4633286fd5,Sonny Jeon,2014-02-02,Update README.md,['README.md']
6fdb35a7dad3e4ef027260aa30aef1fb0e55c554,Robert Grzesek,2014-02-06,Initial line number reporting,"['gcode.c,limits.c,motion_control.c,motion_control.h,planner.c,planner.h,report.c']"
cd71a90ce8a770e0030ed6c9bac805b89724e275,Robert Grzesek,2014-02-06,Made line number reporting optional via config.h,"['config.h,planner.c,planner.h,report.c']"
50fbc6e2972acadbe5db944ddf33d12a8d94f4a0,Sonny Jeon,2014-02-09,"Refactoring and lots of bug fixes. Updated homing cycle.WARNING: There are still some bugs to be worked out. Please use cautionif you test this firmware.- Feed holds work much better, but there are still some failureconditions that need to be worked out. This is the being worked oncurrently and a fix is planned to be pushed next.- Homing cycle refactoring: Slight adjustment of the homing cycle toallow for limit pins to be shared by different axes, as long as theshared limit pins are not homed on the same cycle. Also, removed theLOCATE_CYCLE portion of the homing cycle configuration. It wasredundant.- Limit pin sharing: (See above). To clear up one or two limit pins forother IO, limit pins can now be shared. For example, the Z-limit can beshared with either X or Y limit pins, because it’s on a separate homingcycle. Hard limit will still work exactly as before.- Spindle pin output fixed. The pins weren’t getting initializedcorrectly.- Fixed a cycle issue where streaming was working almost like a singleblock mode. This was caused by a problem with the spindle_run() andcoolant_run() commands and issuing an unintended planner buffer sync.- Refactored the cycle_start, feed_hold, and other runtime routinesinto the runtime command module, where they should be handled hereonly. These were redundant.- Moved some function calls around into more appropriate source codemodules.- Fixed the reporting of spindle state.","['README.md,config.h,coolant_control.c,cpu_map.h,gcode.c,gcode.h,limits.c,limits.h,main.c,motion_control.c,motion_control.h,planner.c,planner.h,protocol.c,protocol.h,report.c,spindle_control.c,stepper.c,stepper.h,system.c']"
3df61e0ec5f7cb0b4c09a847558ecf14a8697802,Sonny Jeon,2014-02-15,"Homing and feed hold bug fixes.WARNING: Bugs may still exist. This branch is a work in progress andwill be pushed to the edge branch when at beta stability. Use at yourown risk.- Homing freezing issue fixed. Had to do with the cycle stop flag beingset incorrectly after the homing cycles and before the pull-offmaneuver. Now resets the stepper motors before this can happen.- Fixed an issue with a rare feed hold failure. Had to do with feedhold ending exactly at the end of a block. The runtime protocol nowsets the QUEUED and IDLE states appropriately when this occurs. Stillneed to clean this code up however, as it’s patched rather than writtenwell.- Updated version build via $I command.- Forgot to comment on a new feature for the last commit. Since stepsare integers and millimeters traveled are floats, the old step segmentgenerator ignored the step fraction differences in generating thesegment velocities. Didn’t see like it would be much of a big deal, butthere were instances that this would be a problem, especially for veryslow feed rates. The stepper algorithm now micro-adjusts the segmentvelocities based on the step fractions not executed from the previoussegment. This ensures that Grbl generates the velocity profiles EXACTLYand noticeably improves overall acceleration performance.","['limits.c,protocol.c,settings.h,spindle_control.c,stepper.c']"
2307563d8a097780507b2ec12b3fa1d6556f89ab,Robert Grzesek,2014-02-18,Merge commit 'cd71a90ce8a770e0030ed6c9bac805b89724e275' into devConflicts:	limits.c	motion_control.c	report.c,['']
b332d6edbba7b147fba7be4779a68a44ad9c5df1,Sonny Jeon,2014-02-19,Commenting updates. Minor bug fix with exit of soft limit event.,"['limits.c,motion_control.c,stepper.c,system.c,system.h']"
9c95c1439f0fc2dde534d47ab1110062c44c42aa,Sonny Jeon,2014-02-19,Merge pull request #356 from robgrz/devLine number reporting as compile-time option.,['']
1fd45791a52cda924683d88311c108908c51b598,Sonny Jeon,2014-02-19,"Minor updates to line number feature.- Changed line number integer types from unsigned to signed int32.G-code mandates values cannot exceed 99999. Negative values can be usedto indicate certain modes.- Homing cycle line number changed to -1, as an indicator.- Fixed a reporting define for the spindle states that was broken bythe last merge.","['config.h,gcode.c,limits.c,motion_control.c,motion_control.h,planner.c,planner.h,report.c']"
0a46dfe0b91d58c8b40cf12252ac67516458bf00,Robert Grzesek,2014-02-25,Minimal probing cycle working.  Supports both G38.2 for error and G38.3 when no errors are desired.,"['cpu_map.h,gcode.c,gcode.h,motion_control.c,motion_control.h,report.c,report.h,stepper.c,system.c,system.h']"
8f8d8e2887f69b86990b8cf71bc7505a071ae831,Sonny Jeon,2014-02-26,"Added grbl planner Matlab simulator for test reference. Updated line number compile-time option.- Added a grbl planner simulation tool that was written in Matlab andPython. It was used to visualize the inner workings of the planner as aprogram is streamed to it. The simulation assumes that the plannerbuffer is empty, then filled, and kept filled. This is mainly for usersto see how the planner works.- Updated some of the compile-time ifdefs when enabling line numbers.The leaving the un-used line numbers in the function calls eats anon-neglible amount of flash memory. So the new if-defs remove them.","['config.h,grbl_sim.m,matlab.gcode,matlab_convert.py,test.gcode,gcode.c,limits.c,motion_control.c,motion_control.h,planner.c,planner.h']"
387a1b9f849ca47b4958ab777e9c03e904fd735b,Sonny Jeon,2014-02-27,Merge pull request #362 from robgrz/devMinimal probing cycle working.  Supports both G38.2 for error and G38.3 ...,['']
4d7ca76f6ce2bd71151451633a3b9b0791d460fc,Sonny Jeon,2014-02-27,Probe cycle line numbers ifdef fixes to get it to compile.- Updated some of the ifdefs when disabling line numbers feature.Getting messy with this compile-time option. This will likely getcleaned up later.- This is just a push to get the new probing code to compile. Testingand optimization of the code will soon follow and be pushed next.,"['gcode.c,motion_control.c,motion_control.h']"
76ab1b6a4282ec09df7b2c1dd534b83e61b1251c,Sonny Jeon,2014-02-28,"G38.2 probe feature rough draft installed. Working but needs testing.- G38.2 straight probe now supported. Rough draft. May be tweaked moreas testing ramps up.- G38.2 requires at least one axis word. Multiple axis words work too.When commanded, the probe cycle will move at the last ‘F’ feed ratespecified in a straight line.- During a probe cycle: If the probe pin goes low (normal high), Grblwill record that immediate position and engage a feed hold. Meaningthat the CNC machine will move a little past the probe switch point, sokeep federates low to stop sooner. Once stopped, Grbl will issue a moveto go back to the recorded probe trigger point.- During a probe cycle: If the probe switch does not engage by the timethe machine has traveled to its target coordinates, Grbl will issue anALARM and the user will be forced to reset Grbl. (Currently G38.3 probewithout error isn’t supported, but would be easy to implement later.)- After a successful probe, Grbl will send a feedback messagecontaining the recorded probe coordinates in the machine coordinatesystem. This is as the g-code standard on probe parameters specifies.- The recorded probe parameters are retained in Grbl memory and can beviewed with the ‘$#’ print parameters command. Upon a power-cycle, nota soft-reset, Grbl will re-zero these values.- Moved ‘$#’ command to require IDLE or ALARM mode, because it accessesEEPROM to fetch the coordinate system offsets.- Updated the Grbl version to v0.9d.- The probe cycle is subject to change upon testing or user-feedback.","['Makefile,cpu_map.h,gcode.c,gcode.h,limits.c,main.c,motion_control.c,motion_control.h,probe.c,probe.h,protocol.c,report.c,report.h,settings.h,stepper.c,system.c,system.h']"
3d053d800c81f57d9e6292d99f19a67277b3571b,henols,2014-03-07,Probing command gets stuck in hold if several g38.2 are submittedEx.G0 X0 Y0 Z0G38.2 Z-10 F100G10 L20 P0 Z0G0 Z2G38.2 Z-1 F50G10 L20 P0 Z0G0 Z2G0 X0 Y0G38.2 Z-1 F100G0 Z2,['motion_control.c']
2168bb1cf97703206e549b3ca2694db96289f77f,Sonny Jeon,2014-03-07,Merge pull request #368 from henols/devProbing command gets stuck in hold if several g38.2 are submitted,['']
8c103d09eb5e7be5211c3156558725926253b5a7,Martin Stingl,2014-03-10,Corrected units of default acceleration values,"['defaults.h,planner.c']"
4bb233393cd6d277eba9b17dcb932bfd9f216570,Sonny Jeon,2014-03-10,Merge pull request #372 from martinstingl/masterCorrected units of default acceleration values,['']
d3bf28f025251e4e721565f1afd5e76af647c52c,henols,2014-03-11,Probing command gets stuck in hold if several g38.2 are submittedEx.G0 X0 Y0 Z0G38.2 Z-10 F100G10 L20 P0 Z0G0 Z2G38.2 Z-1 F50G10 L20 P0 Z0G0 Z2G0 X0 Y0G38.2 Z-1 F100G0 Z2,['motion_control.c']
60dd609b7956037369d5591bee33b778a6614efd,Rob Brown,2014-03-11,Added Probing to Mega2560 and fixed Shapeoko2 compile error,"['cpu_map.h,defaults.h']"
531005540876e9fedcc50ef7edef9aafa3690406,Sonny Jeon,2014-03-13,Merge pull request #373 from EliteEng/devAdded Probing to Mega2560 and fixed Shapeoko2 compile error,['']
06432c9de9bd76552b715b9b72fdc07957b91e8a,Sonny Jeon,2014-03-13,Comment corrections and function call update.,"['defaults.h,gcode.c']"
9a83dd01711d5c04bb4df3482231421d40ecb552,Sonny Jeon,2014-03-14,Update README.md,['README.md']
94489c3c41c04c549599eb4b5f27d5677c34e578,Paul Kaplan,2014-04-14,updated shapeoko2 defaults,['defaults.h']
2194fe58fe7037fcaf7efdfe734d01384f928efa,Sonny Jeon,2014-04-28,Merge pull request #391 from paulkaplan/masterUpdate Shapeoko 2 defaults,['']
da92ddcb0b75484ddff4c0eab5bd9f4c386300ae,Sonny Jeon,2014-05-18,MIT-licensing change,"['COPYING,Makefile,README.md,config.h,coolant_control.c,coolant_control.h,defaults.h,eeprom.h,gcode.c,gcode.h,limits.c,limits.h,main.c,motion_control.c,motion_control.h,nuts_bolts.c,nuts_bolts.h,pin_map.h,planner.c,print.c,print.h,protocol.c,protocol.h,report.c,report.h,serial.c,serial.h,settings.c,settings.h,spindle_control.c,spindle_control.h,stepper.c,stepper.h']"
dcb4f6fc1bb795a271a55f15e2b5e82980ebdd70,Sonny Jeon,2014-05-18,MIT-licensing change.,"['planner.h,simple_stream.py,stream.py']"
1922887c9b18b00dcb1fda6ded73205e9aba6808,Jens Geisler,2014-05-18,Merge pull request #408 from chamnit/masterMIT-Licensing change.,['']
532c359a11c71827895085e9355ba01dbad439fb,Sonny Jeon,2014-05-25,"Major g-code parser overhaul. 100%* compliant. Other related updates.- Completely overhauled the g-code parser. It’s now 100%* compliant. (*may have some bugs). Being compliant, here are some of the majordifferences.- SMALLER and JUST AS FAST! A number of optimizations were found thatsped things up and allowed for the more thorough error-checking to beinstalled without a speed hit. Trimmed a lot of ‘fat’ in the parser andstill was able to make it significantly smaller than it was.- No default feed rate setting! Removed completely! This doesn’t existin the g-code standard. So, it now errors out whenever it’s undefinedfor motions that require it (G1/2/3/38.2).- Any g-code parser error expunges the ENTIRE block. This means allinformation is lost and not passed on to the running state. Before someof the states would remain, which could have led to some problems.- If the g-code block passes all of the error-checks, the g-code stateis updated and all motions are executed according to the order ofexecution.- Changes in spindle speed, when already running, will update theoutput pin accordingly. This fixes a bug, where it wouldn’t update thespeed.- Update g-code parser error reporting. Errors now return detailedinformation of what exact went wrong. The most common errors return ashort text description. For less common errors, the parser reports‘Invalid gcode ID:20’, where 20 is a error ID. A list of error code IDsand their descriptions will be documented for user reference elsewhereto save flash space.- Other notable changes:- Added a print integer routine for uint8 variables. This savedsignificant flash space by switching from a heavier universal printinteger routine.- Saved some flash space with our own short hypotenuse calculation- Some arc computation flash and memory optimizations.","['config.h,coolant_control.c,coolant_control.h,defaults.h,gcode.c,gcode.h,motion_control.c,motion_control.h,nuts_bolts.c,nuts_bolts.h,print.c,print.h,probe.c,probe.h,protocol.c,report.c,report.h,settings.c,settings.h,spindle_control.c,spindle_control.h,system.c']"
9439e4397578828e9a42f638c7e5b00db334f9b8,Sonny Jeon,2014-05-29,Fixed spindle/coolant/dwell state check.,"['coolant_control.c,motion_control.c,settings.h,spindle_control.c']"
8ed8005f6cc11d998b0a3546fc6d64e978d8277b,Sonny Jeon,2014-05-31,"Various minor g-code parser fixes.- Updated the mantissa calculation that checks for non-integer valuesand GXX.X commands that aren’t supported. There was a potential uint8overflow issue.- Fixed g-code parser bug related to not using the correct modalstruct. G10 P0 not selecting the current coordinate system when aG55-59 is issued in the same line.- Fixed g-code parser bug related to not using the correct modalstruct. Target position locations were not computed correctly whenG90/91 distance modes were changed in the same line. It was using theprevious state, rather than the current block.",['gcode.c']
79e0e45826641077fbd5771a139a3fafaf1927e5,Sonny Jeon,2014-05-31,Arc error-checking update.- Updated offset-mode arc error-checking to EMC2’s version: The oldNIST definition required the radii to the current location and targetlocation to differ no more than 0.002mm. This proved to be problematicand probably why LinuxCNC(EMC2) updated it to be 0.005mm AND 0.1%radius OR 0.5mm.,"['gcode.c,settings.h']"
015d5fa19105f90694ca46986fa264893bc7155a,Krzysztof Foltman,2014-06-26,"Fixed atomic access to flags in sys.execute.This seems to fix the bug that caused Grbl to hang during some operations,especially jogging.","['limits.c,motion_control.c,nuts_bolts.h,probe.c,protocol.c,serial.c,system.c']"
1ef5a4547900c94f89d5958f403094340b154cfd,Sonny Jeon,2014-07-02,"Minor bug fixes and updates. Line number tracking.- Line number tracking was getting truncated at 255, since it was usingwrong variable type. Fixed it with a trunc().- Increased the max number line allowed by Grbl to 9999999 from theg-code standard 99999. The latter seems to be an arbitrary number, sowe are allowing larger ones for at least one known use case scenario.- Created a new test directory to contain some testing g-code to proofthe firmware. Only got started with one test case so far. More will beinserted as needed.- Some other commenting updates to clarify certain aspects of the code.","['gcode.c,nuts_bolts.c,protocol.c,test.py']"
92d6c2bca51e4fce0e0fb7cc7239a219e5b56141,Sonny Jeon,2014-07-03,"G-code parser G0/G1 bug fix.- Although stated as invalid in the NIST g-code standard, most g-codeparsers, including linuxcnc, allow G0 and G1 to be commanded withoutaxis words present. For example, something like ‘G1 F100.0’ to presetthe motion mode and feed rate without a motion commanded. Older CNCcontrollers actually required this for feed rate settings. This updateshould now allow this type of behavior.",['gcode.c']
f4f7d7d05e56aca28aa0d45d8e57526949b5d9d6,Sonny Jeon,2014-07-03,"G18 reporting bug fix.- G18 wasn’t getting reported back to the user correctly, even thoughit has been set internally. Fixed the reporting code to reflect thisaccurately.",['report.c']
67a87b46780d9883c1ea1ca86613df07ee98a37d,Sonny Jeon,2014-07-03,Update README.md,['README.md']
8c9f3bca659f53790f25008f88c3ae9d53a86d57,ashelly,2014-07-04,Total rework of simulator for dev branch.  Create separate thread for interrupt processes.  Tick-accurate simulation of timers.  Non-blocking character input for running in realtime mode. Decouple hardware sim from grbl code as much as possible. Expanded command line options. Provisions for cross-platform solution.,"['.gitignore,config.h,coolant_control.c,gcode.c,serial.c,.gitignore,Makefile,interrupt.c,interrupt.h,io.c,io.h,wdt.h,config.h,eeprom.c,eeprom.h,kbhit.c,kbhit.h,main.c,planner_inject_accessors.c,platform.h,platform_LINUX.c,platform_WINDOWS.c,platform_linux.h,platform_windows.h,rename_execute_runtime.h,rename_main.h,serial.c,serial_hooks.h,sim.sh,simulator.c,simulator.h,spindle_control.c,stepper.c']"
d3322ccded270c7a2eca1050dadf5abd269d7f3a,ashelly,2014-07-04,reduce diffs with dev branch,"['coolant_control.c,gcode.c,serial.c,Makefile,kbhit.c,serial.c,spindle_control.c,stepper.c']"
ed417220e1854be9fdda36b7ffb4b3033f7b2492,Sonny Jeon,2014-07-04,"Realtime rate reporting. Updated decimal places.- Added a new optional compile-time feature for ‘realtime’ (within50ms) feed rate reporting. When querying for a status report, a newdata value will state the current operating rate. It’s only beta at themoment and has some kinks to work out.- Updated the code for printing floating point values to N decimalplaces. Generalized the main floating point print code to accept a newdecimal places value and created a set of handler functions to printcertain floating point value types used in Grbl, like position, rates,coordinate offsets, etc. All of these have different decimalrequirements and change when printed in mm or inches mode.- Number of decimal places for the different value types can bere-defined in config.h, but there shouldn’t be a need for this, asthese are physically limited.- Removed the decimal places settings, as this was now obsoleted by thenew decimal places code.- The new decimal places code also saves almost 300kB in flash space,as it’s more efficient.","['config.h,eeprom.h,gcode.c,print.c,print.h,report.c,settings.c,settings.h,stepper.c,stepper.h']"
82075627b3b26511c0ce9f585335b677dcc81ae9,Adam Shelly,2014-07-04,minor tweaks for mingw.,"['Makefile,platform_WINDOWS.c']"
df2fd6095b454a7371e03b2ce6462b0d85785c5e,ashelly,2014-07-04,Don't need kbhit.h,['kbhit.h']
aa95cb65bd0abbdba47491a923c58de0e68b91fd,ashelly,2014-07-05,Update readme.md,['README.md']
1b66c9c304829346a7e441ed90b93b212bf49002,ashelly,2014-07-05,formatting,['README.md']
e455faaeef61b4b094d4e2b63725cb3e31a1a603,Sonny Jeon,2014-07-05,"New G43.1/G49 gcodes. Not working yet!!- Pushed this uncompleted code to merge a conflicting pull request.- New G43.1 and G49 g-codes to be installed. The beginnings of it arein place. These g-codes are intended to be used in conjunction withprobing and allow GUIs to set tool length offsets without Grbl needingto store a tool table.- G43.1 is defined as a dynamic tool length offset that is not storedin memory. Rather, when commanded, these are applied to the workcoordinates until a reset or disabled by G49. This works much like G92.","['gcode.c,gcode.h']"
21850ce985d441786add36434fa19ef9f2bc51bc,Sonny Jeon,2014-07-05,Merge grbl-sim updates for v0.9.- Removed some conflicting code in the main Grbl firmware source.- Temporary patch for coolant and spindle control with streamingapplied.,['']
57eb8600891431a7240f781afe976fe18fbdad33,Sonny Jeon,2014-07-05,Merge branch 'ashelly-sim-update' into dev,['']
dab453572928762c672c91cdc86665dfacfd96a9,Sonny Jeon,2014-07-06,"G43.1/G49 tool length offset installed. Minor bug fix.- Minor bug fix that caused G92.1 not to work. The mantissa of G92.1was not computed correctly due to floating point round-off errors andthe use of trunc(). Fixed it by changing the computation with round().- Installed tool length offsets with G43.1 and G49! True tool lengthoffsets via G43 are not supported, because these require us to storetool data that we don’t have space for. But we’ve come up with a goodsolution for users that need this. Instead we are strictly using thedynamic version G43.1 via linuxcnc.org. Visit their website for moredetails on the command.- G43.1 operates by requiring an axis word and value to offset theconfigured tool length axis, which can be configured for any axis(default Z-axis) in config.h. For example, ```G43.1 Z0.5``` will offsetthe work coordinates from Z0.0 to Z-0.5.- G49 will cancel the last tool length offset value and reset it tozero.- Tweaked the ‘$#’ parameters report. `Probe` is now `PRB` and a newvalue `TLO` states the tool length offset value.","['config.h,gcode.c,report.c,report.h']"
145cea2dd092a2c9b58ba6905693498f79b317e6,Sonny Jeon,2014-07-06,Syntax fix for gcode.c- Whoops! Missed a bracket and it wasn’t compiling. Now fixed.- Updated the unsupported gcodes listed at the end of the gcode.c file.,['gcode.c']
a20d3e9855c371d4508811bd24159ed636518090,Sonny Jeon,2014-07-06,Merge pull request #436 from kfoltman/devFixed atomic access to flags in sys.execute.,['']
87c5703200c1d85c4196130a7a2fd434bb1de644,Sonny Jeon,2014-07-06,"Isolate atomic bit flag for execution.- Denoted bit_true_atomic only for sys.execute bit settings. All otherbit_true type calls are for local variables only and don’t need atomicaccess. Still looking into other ways of setting these flags withoutrequiring atomic access, but this is a patch for now.","['gcode.c,limits.c,motion_control.c,nuts_bolts.h,protocol.c,serial.c,stepper.c']"
a35262d56e8185348dfef0576bf23c6792fcc101,Sonny Jeon,2014-07-06,"Version and build update.- Incremented from v0.9e to v0.9f due to the new g-codes, velocityreporting option, decimal printing refactoring, grbl-sim updates, andG0/G1 bug fix.- Settings version was also incremented since settings.decimal_placesis now gone.",['settings.h']
6c22cb37c21875e8c40cc95f61d8945d0083dd3b,Sonny Jeon,2014-07-09,Added test g-code programs.,"['SO2_helloworld.nc,braid_cut2d.nc']"
23ed7b6d4b24e2b5d865072b84426667e6555138,Sonny Jeon,2014-07-09,Merge branch 'dev' into edgeConflicts:	sim/simulator.c	sim/simulator.h,['']
9b37637ae6e2973eb04cdd2e951305134d17048a,ashelly,2014-07-10,"Bug fixes for timers, added some wdt support for limit debounce.- Typo in timer def,- Handle 8 bit timers correctly,- Don't skip TOP count in CTC mode- added SREG for atomic bit operations","['config.h,Makefile,interrupt.c,interrupt.h,io.h,wdt.h,simulator.c']"
c7039b3512bf182e3f44dce8f6f559b1e2862c93,ashelly,2014-07-10,Restore changes made only for testing.,"['config.h,Makefile']"
7d0df8ac4a48b8329e8c1626bd87e8fdfd8a2992,Sonny Jeon,2014-07-11,Merge pull request #441 from ashelly/edge-simfixFixes for simulator in alternate configurations.,['']
1969f8b057f967c678a2c10b10f3bbd768c5b4c0,Sonny Jeon,2014-07-11,Updated README,"['README.md,gcode.c']"
ac7db2c8b2274bd5aaf1fab8439304369f5e236a,Sonny Jeon,2014-07-12,Updated README,['README.md']
89df0f28c8da962b84955a6e34c1903e83c144ea,Sonny Jeon,2014-07-12,Update README.md,['README.md']
48dc1902a7e0ed85f1726ebf9a2703e950797694,Sonny Jeon,2014-07-12,Update README.md,['README.md']
1c74be06258380e79486188c9d6289f3759d72fc,Sonny Jeon,2014-07-12,Update README.md,['README.md']
3aeb5d3d06d0b7852990595603008277855becd2,Sonny Jeon,2014-07-17,Update README.md,['README.md']
71f333ddca8ab18be5fbc49c731984f0b8d2670e,Sonny Jeon,2014-07-26,"Settings refactoring. Bug fixes. Misc new features.This is likely the last major change to the v0.9 code base before pushto master. Only two minor things remain on the agenda (CoreXY support,force clear EEPROM, and an extremely low federate bug).- NEW! Grbl is now compile-able and may be flashed directly through theArduino IDE. Only minor changes were required for this compatibility.See the Wiki to learn how to do it.- New status reporting mask to turn on and off what Grbl sends back.This includes machine coordinates, work coordinates, serial RX bufferusage, and planner buffer usage. Expandable to more information on userrequest, but that’s it for now.- Settings have been completely renumbered to allow for future newsettings to be installed without having to constantly reshuffle andrenumber all of the settings every time.- All settings masks have been standardized to mean bit 0 = X, bit 1 =Y, and bit 2 = Z, to reduce confusion on how they work. The invertmasks used by the internal Grbl system were updated to accommodate thischange as well.- New invert probe pin setting, which does what it sounds like.- Fixed a probing cycle bug, where it would freeze intermittently, andremoved some redundant code.- Homing may now be set to the origin wherever the limit switches are.Traditionally machine coordinates should always be in negative space,but when limit switches on are on the opposite side, the machinecoordinate would be set to -max_travel for the axis. Now you can alwaysmake it [0,0,0] via a compile-time option in config.h. (Soft limitsroutine was updated to account for this as well.) - Probe coordinate message immediately after a probing cycle may nowbe turned off via a compile-time option in config.h. By default theprobing location is always reported.- Reduced the N_ARC_CORRECTION default value to reflect the changes inhow circles are generated by an arc tolerance, rather than a fixed arcsegment setting.- Increased the incoming line buffer limit from 70 to 80 characters.Had some extra memory space to invest into this.- Fixed a bug where tool number T was not being tracked and reportedcorrectly.- Added a print free memory function for debugging purposes. Not usedotherwise.- Realtime rate report should now work during feed holds, but it hasn’tbeen tested yet.- Updated the streaming scripts with MIT-license and added the simplestreaming to the main stream.py script to allow for settings to be sent.- Some minor code refactoring to improve flash efficiency. Reduced theflash by several hundred KB, which was re-invested in some of these newfeatures.","['README.md,config.h,defaults.h,gcode.c,gcode.h,limits.c,motion_control.c,nuts_bolts.c,nuts_bolts.h,planner.c,planner.h,print.c,print.h,probe.c,protocol.c,protocol.h,report.c,console,proxy,stream,stream.rb,trapezoid_simulator.rb,simple_stream.py,stream.py,serial.c,serial.h,settings.c,settings.h,spindle_control.c,stepper.c,system.c,8x_gear_test.nc,braid_cut2d.nc,kikigey89.settings']"
299c09d1776923728d28c936cf454424d15a7dcf,Sonny Jeon,2014-07-26,Updates to allow Arduino IDE direct compiling.- Only minor changes were required to make the Arduino IDE compile allof the Grbl’s source code (correctly using the C-compiler). Tested inWindows and Mac and with the normal USB upload and with a programmer.,"['README.md,serial.c']"
06832148a8d7c3253829e7da83cdcc6e2704e71c,Sonny Jeon,2014-07-27,"Added build info feedback in help- `$I` prints the Grbl build info and version number. NOTE: `$I=xxx`stores an additional 30 character string into EEPROM, which will beprinted with the build info the next time it’s run. This is foridentification purposes for users that have more than one system usingGrbl.",['report.c']
3081be8e7646328fea7c5e85529526184d395fd0,Sonny Jeon,2014-07-28,Update README.md,['README.md']
a396adf60e54295f0f156b2aead130ec74a4deb3,Sonny Jeon,2014-07-28,Compile in Atmel Studio fix.,['config.h']
5c0d311d92884a6600eb0c910fc9d6d3b9e9074c,Sonny Jeon,2014-08-01,"Minor bug fixes.- Bug fix for step and direction invert masks not immediately being ineffect. Now regenerates the masks when a user changes this setting.- Bug fix for probing cycle. G-code standard mandates that there is anerror if the probe is already triggered when the cycle is commanded.However, Grbl may have motions to pull off a previous probing cycle inqueue and can falsely lead to errors. To fix this, the triggered checkis performed within the probing cycle itself, right after the plannerbuffer is synced. If there is an error, it will now alarm out as aprobe fail.","['gcode.c,motion_control.c,nuts_bolts.h,report.h,settings.c,settings.h,stepper.c,stepper.h,braid_cut2d.nc']"
4c97bfc929ee85e6b2adfab2bf0d738995853d61,Sonny Jeon,2014-08-01,Update README.md,['README.md']
469399fcd5b2c38d1df95ba3e05311098cbe2f79,Sonny Jeon,2014-08-03,"Probing cycle and view build info bug fixes.- Probing cycle would drop into a QUEUED state, if multiple G38.2 aresent. It would not honor the auto cycle start flags. To fix, the autocycle start state is saved at the beginning of the probing cycle andrestored at the end, since the feed hold it uses to stop a triggeredprobe will disable the auto start flag. For now it’s a patch, ratherthan a permanent fix.- protocol_buffer_synchronize() also has a failure case. Auto cyclestart does not get executed when the system is waiting in here, so ifit’s in a QUEUED state already, it won’t resume. Patched here, but notfully resolved.- Fixed a problem with the “view build info” command. The EEPROM writewould do weird things and corrupt the EEPROM. Not sure exactly whatcaused it, but it’s likely a compiler problem with an improperlydefined EEPROM address. It didn’t have enough room to store a fullstring. To fix, the build info EEPROM range was increased and the maxnumber of STARTUP_BLOCKS was reduced to 2 from 3.- Lastly, when a $I view build info is used for the first time, itwould normally show an EEPROM read error, since it wasn’t cleared orwasn’t therein the first place. It will now not show that error. Apatch rather than a permanent fix again.","['config.h,motion_control.c,protocol.c,settings.c,settings.h,system.c']"
aa314776e01d90bf2c2b2d79f3263f0b985f2ef5,Sonny Jeon,2014-08-03,Update README.md,['README.md']
d55f6b938cd54a95e14d94e2ad7730d1aeb772a4,Sonny Jeon,2014-08-04,"Fixed probe position sync error.- Restored probe position syncing. Had removed a pull-off motion aftera probe cycle completes, but ended up de-synchronizing the g-codeparser and probing cycle positions. Putting the pull-off motion backfixed the problem.",['motion_control.c']
b33c2dd842de324238df002835cf941e936dcae3,Sonny Jeon,2014-08-04,Update README.md,['README.md']
955a9f3cf8b50fc6bdc11d2530543024398a64aa,Sonny Jeon,2014-08-04,Allow '$$' in check mode.- Now allows the ‘$$’ view Grbl settings while in check mode- Updated the version build date,"['settings.h,system.c']"
9b9abf1b2f109b705ec4caf1ce31c4e8675d2262,Sonny Jeon,2014-08-05,"Fixed bug related to very very low feed rates.- A very very low feed rate command like `G1 X100 F0.01`  would causesome floating-point round-off error and freeze Grbl into an infiniteloop. To fix it, introduced a MINIMUM_FEED_RATE parameter in config.hto ensure motions always complete.- MINIMUM_FEED_RATE is set at 1.0 mm/min by default. It’s recommendedthat no rates are below this value, but 0.1mm/min may be ok in somesituations.","['config.h,planner.c,settings.h,stepper.c']"
de5fa07d8a4f39fc6aec91c133280dca00bb303c,Sonny Jeon,2014-08-05,Update README.md,['README.md']
fc0c4f4332190642652bcf8cadc8f3e07a1bf6e9,Sonny Jeon,2014-08-07,Updated licensing,"['COPYING,README.md,config.h,coolant_control.c,coolant_control.h,cpu_map.h,defaults.h,commands.txt,pinmapping.txt,resources.txt,structure.txt,eeprom.h,gcode.c,gcode.h,limits.c,limits.h,main.c,motion_control.c,motion_control.h,nuts_bolts.c,nuts_bolts.h,planner.c,planner.h,print.c,print.h,probe.c,probe.h,protocol.c,protocol.h,report.c,report.h,serial.c,serial.h,settings.c,settings.h,spindle_control.c,spindle_control.h,stepper.c,stepper.h,system.c,system.h,grbl_sim.m,matlab.gcode,matlab_convert.py,test.gcode']"
48faf81c4015ab728a586b51ab25da69ada4d6f2,Sonny Jeon,2014-08-07,Moved Grbl Sim to its own repo.,"['.gitignore,HelloWorld.nc,Makefile,README.md,interrupt.c,interrupt.h,io.c,io.h,pgmspace.c,pgmspace.h,sleep.h,wdt.h,config.h,eeprom.c,eeprom.h,gnuplot.plt,main.c,planner_inject_accessors.c,platform.h,platform_LINUX.c,platform_WINDOWS.c,platform_linux.h,platform_windows.h,rename_main.h,serial.c,serial_hooks.h,sim.bat,sim.sh,simulator.c,simulator.h,delay.c,delay.h,floatunsisf.c']"
796e13677869d169a276435041d077610a0f69e7,Sonny Jeon,2014-08-08,XON/XOFF flow control variable typo.,['serial.c']
6fdf10ba066bbdd7e1d1d971a22caf33f19bb4dc,Sonny Jeon,2014-08-13,"G28/30 bug fix. Block '$$' during cycle. SO2 defaults.- A G28/30 bug would cause it to move to machine coordinate [0,0,0] ifno axis words were sent. It was a typo in the new g-code parser. Fixedand slightly re-written to be more consistent with the program flow.- Updated the ShapeOko2 defaults based on testing on the real machine.A little conservative, but it might change again after some moretesting.- Now blocks ‘$$’ command during a motion, because the printout takestoo long and can starve the segment buffer.","['defaults.h,gcode.c,serial.c,settings.h,system.c']"
86e7c9764cc3ac7236308e39daaea150d01191b3,Sonny Jeon,2014-08-13,Update README.md,['README.md']
6af010fe6309a8b8304a5c0210e2ff2ec4171411,Sonny Jeon,2014-08-13,"Added EEPROM force clear.- When updating from v0.8, the settings will wipe the startup lines andbuild info locations so that it won’t use whatever is already there inthe EEPROM. Parameters (coord offsets) are retained. They should be okduring an upgrade.","['settings.c,settings.h']"
b0e9a315fe39a1efcd0f2f172cd69f1a83f8f631,Sonny Jeon,2014-08-17,"Final minor updates for master release.- Updated ShapeOko2 defaults based on machine testing of the basicmodel provided by Inventables. (or close to it.) Should be prettyconservative but much faster than before. For example, X and Y axes areset at (10x) faster at 5000mm/min. It can run much faster than this,but this seems like a safe speed for everyone.- Updated README for master release.- Added some new settings methods for clearing the EEPROM when changingversions. Needs some more work, but it should ok for master release.Should work on it more for the next version.","['README.md,defaults.h,settings.c,settings.h']"
73307429365de93e57dc81f1a63e8c87f9d372c6,Sonny Jeon,2014-08-17,Merge branch 'master' into edge,['']
f298cd925db3c8cce5c8a74fd6f26249773b422d,Sonny Jeon,2014-08-17,Updated bitly link to master firmware,['README.md']
9ff7433e2d25c34763d9ef18a1270f6cb3ca2a97,Sonny Jeon,2014-08-17,Update README.md,['README.md']
359e6a89e395d975a87416c3d276096e0e442a87,Sonny Jeon,2014-08-18,Update README.md,['README.md']
ec48571cbe6942e104356a564941bdc93850c20c,Sonny Jeon,2014-08-22,WPos report bug fix when MPos disabled.,"['Makefile,report.c']"
6ad9806584689913dec50304417f5edb655e56b7,Sonny Jeon,2014-08-22,Updated build date.,"['report.c,settings.h']"
fea70d2055a857124044d9859e16696bc57ec766,Sonny Jeon,2014-08-22,Update README.md,['README.md']
622113b1798fe5a7e51d8a7d22d4c7693110ef51,BinaryConstruct,2014-08-24,Add defaults for OX CNC,['defaults.h']
615093ccd2a9bd63f1ecd29c464f032000f5e626,Sonny Jeon,2014-08-24,Merge pull request #472 from BinaryConstruct/edgeAdd defaults for OX CNC,['']
2d1292949986a942f892ba7b5e839d06da57ad0b,Sonny Jeon,2014-09-05,Merge branch 'master' of https://github.com/grbl/grblConflicts:	README.md,"['README.md,config.h,cpu_map.h,defaults.h,settings.c,settings.h,HSM_test.nc,braid_cut2d.nc']"
92ac0f958b61be3afbb388fb60696a71bdb2dba3,Sonny Jeon,2014-09-05,Updated README.md,['']
5edf078065de9a5af058f75f17c822e3944698db,Sonny Jeon,2014-09-05,"Minor bug fix and CPU pin map update.- Sometime I HATE github. This push is just here to be able to describethe last two pushes today that had a merging conflict and lost all ofthe commit comments before.- Setting $10 would cause $11 to be the same value. Missed a breakstatement in the switch-case. Oops! Now fixed.- CPU pin map for the future versions of Grbl introduced, but not yetfinalized. Still working on it and it’s subject to change.- Added a new high-speed machining test g-code routine written by ToddFleming. Mills a pocket at 15,000mm/min. Do not use when connected toyour machine! You’ve been warned!",['cpu_map.h']
4f68edbba2312c9a4b8f9fe28ef508dd50f3f35b,ashelly,2014-09-08,Alarm if limits engaged on homing,['motion_control.c']
f78eebcebf00319ac2901a6b54430e78d800e837,Elijah Insua,2014-09-14,add MOTION_MODE_PROBE_NO_ERROR,['gcode.h']
0f7806938d0325da15faffc7c23fe1e5ed8d0319,Elijah Insua,2014-09-14,"install G38.{3,4,5}","['gcode.c,motion_control.c,probe.c,system.h']"
b89d194466e7f69d7d184a5f8c0df794b8b41682,Elijah Insua,2014-09-14,utilize MOTION_MODE_PROBE_NO_ERROR,['gcode.c']
fd0db24199738a0a0dfac9ddf03acee521f18896,Markus Schulz,2014-09-17,If variable spindle is defined print S value via $G command.,['report.c']
5b97a79b6d74fa99fe32246f20ce5f275e1279c4,ashelly,2014-09-17,No false alarm if other bits in port are set.,['motion_control.c']
322feba52feedd4600f4cde72ef10ea5aa235738,Sonny Jeon,2014-09-20,"Minor settings number overflow bug fix.- The `x` in `$x=val` would overflow when a value larger than 255 wasentered and passed to Grbl. This resulted with unintended parametersbeing set by the overflow value. To fix, simply check for values largerthan 255 and error out.",['system.c']
d630d4a4cc33690dea3c756cad1813e3d2ca2ac0,Sonny Jeon,2014-09-20,Merge pull request #493 from alpharesearch/edgeIf variable spindle is defined print S value via $G command.,['']
041109410ad6593050ec2e0b1b0d366e236bb80a,Sonny Jeon,2014-09-20,Merge pull request #494 from ashelly/homing-alarmAlarm if limits engaged on homing start.,['']
39cf82294439c7e7b1599b9f919d27290ed7a5cc,Sonny Jeon,2014-09-20,Edit hard limit check at start of homing cycle,"['gcode.h,limits.c,motion_control.c']"
5406fa939a1fd669fd58b5509e7a9a46ee975d47,Elijah Insua,2014-09-22,cleanup global var and push probe mode into probe_get_state,"['gcode.c,gcode.h,motion_control.c,motion_control.h,probe.c,probe.h,system.h']"
5c07acd9fae3f231f59a363cd721f3b41c6bc34e,Elijah Insua,2014-09-22,test only for & PROBE_ACTIVE,['motion_control.c']
b920838109c89941776dd266d8a6e804a8634ea2,Elijah Insua,2014-09-22,bump mantissa to uint16_t to enable G38.5,['gcode.c']
3392a8b2c89ce28967af52ee365d38c97ef925c3,Elijah Insua,2014-09-22,add/install probe_errors_enabled in mc_probe_cycle,"['motion_control.c,probe.c,probe.h']"
5f1eece67deeb06dc6cdbb969af575edda054066,Elijah Insua,2014-09-22,"hop over probe pull-off sequence after probe missand while ""no errors"" is enabled (G38.3, G38.5)",['motion_control.c']
0beacbbb1117f361c7367e2a2b24fdf135ebdd34,Elijah Insua,2014-09-22,"add probe_finalize to keep things DRYthis allows the PRB report to be valid when in ""no errors"" mode and the probe fails","['motion_control.c,probe.c,probe.h']"
297f4d1dd6a3e89b3715b904a8e0209799aaa510,Elijah Insua,2014-09-22,report probe_succeeded with probe status,"['motion_control.c,probe.c,probe.h,report.c,system.h']"
15071385f79bbbe3e8b5146f83eb2877662bee6d,Sonny Jeon,2014-09-25,Merge pull request #491 from tmpvar/G38.2+G38.2+,['']
7e67395463b7fedbd0ac2e03aef2e84875d8dcbc,Sonny Jeon,2014-10-01,"Updated variable spindle and new probing. Minor bug fixes.- Minor bug fix for variable spindle PWM output. Values smaller thanthe minimum RPM for the spindle would overflow the PWM value. ThanksRob!- Created an optional minimum spindle PWM low-mark value as acompile-time option. This is for special circumstances when the PWM hasto be at a certain level to be read by the spindle controller.- Refactored the new probing commands (G38.3, G38.4, G38.5) code towork better with the rest of Grbl’s systems.- Refactored mc_probe() and mc_arc() to accept the mode of the command,i.e. clockwise vs counter, toward vs away, etc. This is to make thesefunctions independent of gcode state variables.- Removed the pull off motion in the probing cycle. This is not anofficial operation and was added for user simplicity, but wrongly didso. So bye bye.- Created a configure probe invert mask function to handle thedifferent probe pin setting and probing cycle modes with a single mask. - Minor bug fix with reporting motion modes via $G. G38.2 wasn’tshowing up. It now does, along with the other new probing commands.- Refactored some of the new pin configurations for the future of Grbl.-","['config.h,cpu_map.h,gcode.c,gcode.h,motion_control.c,motion_control.h,probe.c,probe.h,report.c,spindle_control.c,system.h']"
5459faf5514e34bd5efdf29f2181f80a7846ee9e,Sonny Jeon,2014-10-28,Update README.md,['README.md']
e30d65052e0ba677cd4a2f646e863ae8bafb1923,Sonny Jeon,2014-10-28,Update README.md,['README.md']
e0e105a1436a87329085ed72e50c8cdb975527aa,Sonny Jeon,2014-10-29,Update README.md,['README.md']
429163a0339970b3afe0d7fbf246ee767a93466f,Sonny Jeon,2014-11-05,Update README.md,['README.md']
9be7b3d9304a0968e238b5ef2ab8e2292aa5e351,Sonny Jeon,2015-01-14,"Lot of refactoring for the future. CoreXY support.- Rudimentary CoreXY kinematics support. Didn’t test, but homing andfeed holds should work. See config.h. Please report successes andissues as we find bugs.- G40 (disable cutter comp) is now “supported”. Meaning that Grbl willno longer issue an error when typically sent in g-code program header.- Refactored coolant and spindle state setting into separate functionsfor future features.- Configuration option for fixing homing behavior when there are twolimit switches on the same axis sharing an input pin.- Created a new “grbl.h” that will eventually be used as the maininclude file for Grbl. Also will help simply uploading through theArduino IDE- Separated out the alarms execution flags from the realtime (used becalled runtime) execution flag variable. Now reports exactly whatcaused the alarm. Expandable for new alarms later on.- Refactored the homing cycle to support CoreXY.- Applied @EliteEng updates to Mega2560 support. Some pins werereconfigured.- Created a central step to position and vice versa function. Neededfor non-traditional cartesian machines. Should make it easier later.- Removed the new CPU map for the Uno. No longer going to used. Therewill be only one configuration to keep things uniform.","['config.h,coolant_control.c,coolant_control.h,cpu_map.h,defaults.h,gcode.c,gcode.h,grbl.h,limits.c,limits.h,main.c,motion_control.c,motion_control.h,nuts_bolts.c,nuts_bolts.h,planner.c,planner.h,print.c,print.h,probe.c,probe.h,protocol.c,protocol.h,report.c,report.h,serial.c,serial.h,settings.c,settings.h,spindle_control.c,spindle_control.h,stepper.c,stepper.h,system.c,system.h,8x_gear_test.nc,HSM_test.nc,SO2_helloworld.nc,braid_cut2d.nc,grbl_sim.m,matlab.gcode,matlab_convert.py,test.gcode,kikigey89.settings,test.py']"
bf37ab7e7be6b6f44a86bf03c223113f46facc7a,Sonny Jeon,2015-01-17,"Fully configurable pins for NO or NC switches.- All pins, which include limits, control command, and probe pins, cannow all be configured to trigger as active-low or active-high andwhether the pin has its internal pull-up resistor enabled. This shouldallow for just about all types of NO and NC switch configurations.- The probe pin invert setting hasn’t been added to the Grbl settings,like the others, and will have to wait until v1.0. But for now, it’savailable as a compile-time option in config.h.- Fixed a variable spindle bug.","['config.h,cpu_map.h,defaults.h,limits.c,main.c,planner.c,probe.c,settings.h,spindle_control.c,system.c']"
a358c6de0bbd55463d0914b2d23dfbfd12624b78,Sonny Jeon,2015-02-04,"Rare planner bug fix and added simulator defaults.- Planner bug when moving along a diagonal back and forth on the samepath. Rare for the fact that most CAM programs don’t program this typeof motion, neither does jogging. Fixed in this update.- Added grbl_sim defaults for testing purposes.","['defaults.h,planner.c,settings.h,system.c']"
23c1e154aae3232deb9bacafca293a8cc154c26e,Sonny Jeon,2015-02-06,"Limit/control pin state reporting option- As a setup feature, users can compile-in input pin status reporting.Doesn’t do anything special, just prints the binary for the port. 0’sand 1’s indicate low and high signals on the pins. It’s a bit crypticright now, but it’s just a start.- Added a max step rate check when writing step/mm and max ratesettings. Should help avoid people misdiagnosing problems associatedwith going over the 30kHz step rate limit. Right now not enabled. Takesup over 100k of flash. Need that room for other things right now.","['config.h,report.c,report.h,settings.c']"
3b468f602b031a7f353fb7a5c986d829d1d14a52,Sonny Jeon,2015-02-10,Bug fix for certain motions. Re-org of includes.- Critical bug fix for diagonal motions that continue on the samedirection or return in the exact opposite direction. This issue couldcause Grbl to crash intermittently due to a numerical round-off error.Grbl versions prior to v0.9g shouldn’t have this issue.- Reorganized all of the includes used by Grbl. Centralized it into asingle “grbl.h” include. This will help simplify the compiling anduploading process through the Arduino IDE.- Added an example .INO file for users to simply open and run whencompiling and uploading through the IDE. More to come later.,"['config.h,coolant_control.c,Grbl.ino,gcode.c,grbl.h,limits.c,main.c,motion_control.c,motion_control.h,nuts_bolts.c,planner.c,print.c,probe.c,protocol.c,report.c,serial.c,settings.c,settings.h,spindle_control.c,stepper.c,system.c,system.h']"
b237ad566ad25a1503e14fa5f487c34f88bec01f,Sonny Jeon,2015-02-10,File re-organization. New Makefile.- Re-organized source code files into a ‘grbl’ directory to lessen onestep in compiling Grbl through the Arduino IDE.- Added an ‘examples’ directory with an upload .INO sketch to furthersimplify compiling and uploading Grbl via the Arduino IDE.- Updated the Makefile with regard to the source code no longer beingin the root directory. All files generated by compiling is placed in aseparate ‘build’ directory to keep things tidy. The makefile shouldoperate in the same way as it did before.,"['Makefile,README.md,Grbl.ino,config.h,coolant_control.c,coolant_control.h,cpu_map.h,defaults.h,eeprom.c,eeprom.h,grblUpload.ino,license.txt,gcode.c,gcode.h,grbl.h,limits.c,limits.h,main.c,motion_control.c,motion_control.h,nuts_bolts.c,nuts_bolts.h,planner.c,planner.h,print.c,print.h,probe.c,probe.h,protocol.c,protocol.h,report.c,report.h,serial.c,serial.h,settings.c,settings.h,spindle_control.c,spindle_control.h,stepper.c,stepper.h,system.c,system.h']"
20c7750dabf3491df373b94b6527c1544a7e5716,Sonny Jeon,2015-02-10,Git fix for empty directory. Makefile updated.- ‘build’ directory was not being synced by git because it was empty.Added a .gitignore file in the ‘build’ directory to force git to syncit but keep it empty.- Updated the Makefile to not erase the .gitignore.,"['Makefile,.gitignore']"
4bdc20ffb94f70eaf99ad2c19d96f6c951f191c5,Sonny Jeon,2015-02-11,"Overhauled state machine. New safety door feature.- Overhauled the state machine and cleaned up its overall operation.This involved creating a new ‘suspend’ state for what all externalcommands, except real-time commands, are ignored. All hold type statesenter this suspend state.- Removed ‘auto cycle start’ setting from Grbl. This was not used byusers in its intended way and is somewhat redundant, as GUI manage thecycle start by streaming. It also muddled up how Grbl should interprethow and when to execute a g-code block. Removing it made everythingmuch much simpler.- Fixed a program pause bug when used with other buffer_sync commands.- New safety door feature for OEMs. Immediately forces a feed hold andthen de-energizes the machine. Resuming is blocked until the door isclosed. When it is, it re-energizes the system and then resumes on thenormal toolpath.- Safety door input pin is optional and uses the feed hold pin on A1.Enabled by config.h define.- Spindle and coolant re-energizing upon a safety door resume has aprogrammable delay time to allow for complete spin up to rpm andturning on the coolant before resuming motion.- Safety door-style feed holds can be used instead of regular feed hold(doesn’t de-energize the machine) with a ‘@‘ character. If the safetydoor input pin is not enabled, the system can be resumed at any time.","['config.h,cpu_map.h,gcode.c,limits.c,main.c,motion_control.c,probe.c,protocol.c,report.c,report.h,serial.c,settings.c,settings.h,stepper.c,system.c,system.h']"
fe16b7db5ca79e814b34db24117ad68ca8773fed,Rob Brown,2015-02-13,Safety Door Update for Mega2560,['cpu_map.h']
9f7f2709912de5633ba50630fe4a523960177885,Martin Poelstra,2015-02-13,Fix EXEC_ALARM_* flags: soft limit would lead to hard limit error.,['system.h']
cff926f86159575ca29c75ec8571727a6a2e7049,Martin Poelstra,2015-02-13,"Fix generating header dependencies, merge with 'normal' compile, force recompile when files are removed.",['Makefile']
56c4bfc7b97a8c9304f405f15d3639702f03ef18,Martin Poelstra,2015-02-13,"Fix function signature of print_uint32_base10(), necessary for compiling simulator.",['print.c']
5017d998ce1290bb3983611832f328f8771a0ae0,Sonny Jeon,2015-02-13,"Merge pull request #594 from poelstra/fix_sim_buildFix function signature of print_uint32_base10(), necessary for compiling simulator.",['']
a10b0ab43bd63e05b656210f66b3f64bec50a151,Sonny Jeon,2015-02-13,Merge pull request #592 from poelstra/fix_softlimitFix EXEC_ALARM_* flags: soft limit would lead to hard limit error.,['']
025caffb2b86b870308d6ee6d866fd404215f68d,Sonny Jeon,2015-02-13,Merge pull request #591 from EliteEng/edgeSafety Door Update for Mega2560,['']
565519c1449173d8a91b5b39decbb2f8a1487ff2,Sonny Jeon,2015-02-13,Doc re-org. New Grbl Logos!,"['Grbl Logo 150px.png,Grbl Logo 320px.png,Grbl Logo 640px.png,Grbl Logo.pdf,Grbl Logo.svg,simple_stream.py,stream.py,config.h']"
5a547dbb3396dff01d2fd4f8fdfa7255a6a3be44,Sonny Jeon,2015-02-13,Update README.md,['README.md']
fd02c3a47ec4eab48ffd87ac1720e81ca03c0cfb,Sonny Jeon,2015-02-13,Updated README with new logo sized for github.,"['README.md,Grbl Logo 250px.png']"
d36d3519ef40423893e201ca216cae72ba7dd437,Sonny Jeon,2015-02-13,"Merge pull request #593 from poelstra/fix_makefile_depsFix generating header dependencies, merge with 'normal' compile, force r...",['']
8c9fc7943e6a0240677e4531a5bd84b7dfe6a36c,Sonny Jeon,2015-02-15,"Homing alarm upon no switch. Licensing update.- Homing cycle failure reports alarm feedback when the homing cycle isexited via a reset, interrupted by a safety door switch, or does notfind the limit switch.- Homing cycle bug fix when not finding the limit switch. It would justidle before, but now will exit with an alarm.- Licensing update. Corrected licensing according to lawyerrecommendations. Removed references to other Grbl versions.","['COPYING,config.h,coolant_control.c,coolant_control.h,cpu_map.h,defaults.h,eeprom.h,gcode.c,gcode.h,grbl.h,limits.c,limits.h,main.c,motion_control.c,motion_control.h,nuts_bolts.c,nuts_bolts.h,planner.c,planner.h,print.c,print.h,probe.c,probe.h,protocol.c,protocol.h,report.c,report.h,serial.c,serial.h,settings.c,settings.h,spindle_control.c,spindle_control.h,stepper.c,stepper.h,system.c,system.h']"
d034dc21817059a0ec2e679207ebf532212932d9,Sonny Jeon,2015-02-15,Improved homing limit search handling.- Instead of a single overall max travel for a search distance for thehoming limit switches. The homing cycle now applies the max travel ofeach axis to the search target. Generally makes more sense this way andsaved more than a 100bytes of flash too.,"['README.md,grbl.h,limits.c']"
c7db1c4546665174adad0664b73d6792a2a6dfb1,Sonny Jeon,2015-02-23,"New configuration options.- New configuration option at compile-time: - Force alarm upon power-up or hard reset. When homing is enabled,this is already the default behavior. This simply forces this all ofthe time. - GUI reporting mode. Removes most human-readable strings that GUIsdon’t need. This saves nearly 2KB in flash space that can be used forother features. - Hard limit force state check: In the hard limit pin change ISR, Grblby default sets the hard limit alarm upon any pin change to guaranteethe alarm is set. If this option is set, it’ll check the state withinthe ISR, but can’t guarantee the pin will be read correctly if theswitch is bouncing. This option makes hard limit behavior a little lessannoying if you have a good buffered switch circuit that removesbouncing and electronic noise.- Software debounce bug fix. It was reading the pin incorrectly for thesetting.- Re-factored some of the ‘$’ settings code.","['config.h,grbl.h,limits.c,main.c,report.c,system.c']"
d4ae8f94aff41a8b8a70e7bf0ee1387334fa354d,Sonny Jeon,2015-02-23,"Fixed config.h to Grbl release defaults.- REPORT_GUI_MODE was accidentally enabled, when it shouldn’t have.",['config.h']
85b0c7a8b48e68fe0c4a5e8b2d8cb24a0789a231,Sonny Jeon,2015-02-25,"G91.1 support. Fixed a config.h option.- G91.1 support added. This g-code sets the arc IJK distance mode toincremental, which is the default already. This simply  helps reduceparsing errors with certain CAM programs that output this command.- Max step rate checks weren’t being compiled in if the option wasenabled. Fixed now.- Alarm codes were not displaying correctly when GUI reporting mode wasenabled. Due to unsigned int problem. Changed codes to positive valuessince they aren’t shared with other codes.","['README.md,gcode.c,gcode.h,report.c,report.h,settings.c']"
76730176da0ddee2f31aea3e28e2df54342629c9,Sonny Jeon,2015-03-04,"Arduino IDE compatibility and minor homing fixes- Added an include in the right spot, if a user tries to compile andupload Grbl through the Arduino IDE with the old way.- Fixed a minor bug with homing max travel calculations. It was causingsimultaneous axes homing to move slow than it did before.","['README.md,config.h,grbl.h,limits.c,protocol.c']"
e832595e6df3836b0666a0223e766e44e43c2a2b,Sonny Jeon,2015-03-07,Another homing cycle fix.- The homing cycle should be working again. Reverted it back to how itwas about a month ago before I started to fiddle with it. Turns outthat my past self knew what he was doing.,"['grbl.h,limits.c']"
24ce518fdac4e25b0e16d63d739d74b2313f9137,Sungeun Jeon,2015-03-14,"Cleaned-up limit pin reporting and comments.- Cleaned up the limit pin state reporting option to display only thestate per axis, rather than the whole port. It’s organized by an XYZorder, 0(low)-1(high), and generally looks like `Lim:001`.- Separated the control pin state reporting from limit state reportingas a new compile option. This stayed the same in terms of showing theentire port in binary, since it’s not anticipated that this will beused much, if at all.- Updated some of the gcode source comments regarding supported g-codes.","['config.h,gcode.c,gcode.h,grbl.h,report.c']"
3d06897e47449c374866d70dd9db7774e1915249,Sungeun Jeon,2015-03-15,Updated README.- Also altered the G38.X reporting to save some bytes.,"['README.md,gcode.h,grbl.h,report.c']"
46c943f13ddf42dde5a9584c21865e963cdd2f90,Sungeun Jeon,2015-03-15,Merge branch 'edge',['']
b3140351c896f8b3eb70b40d495932ee1eebe46f,Sonny Jeon,2015-03-15,Create README.md,['README.md']
87cf6c888b83c65db5d8b60ca91644837d624a8a,Sungeun Jeon,2015-03-15,Updated README,['README.md']
b1afeb4547f9cd9ff47de5029f4902539de94111,Sonny Jeon,2015-03-16,Update README.md,['README.md']
353df7b0a0f79dd5e71c791deeaab8b6309fce57,Sonny Jeon,2015-03-26,Update README.md,['README.md']
4841dff712c16ccb6b3a3f68cfafb15c4fcc3a3c,Sonny Jeon,2015-03-27,Update README.md,['README.md']
ed29d8a1229afdaa53195805d73b8fb898793ff2,Sungeun Jeon,2015-03-27,"New compile options and inverse time bug fix.- Apparently inverse time motion were not working for quite some time.Goes to show how many people actually use it. The calculation was badand is now fixed in this update. It should now work correctly.- `;` comment type is now supported. This is standard on LinuxCNC andcommon on 3d printers. It was previously not supported due to notexisting in the NIST standard, which is out-dated.- New compile-option to ECHO the line received. This should help usersexperiencing very weird problems and help diagnose if there issomething amiss in the communication to Grbl.- New compile-option to use the spindle direction pin D13 as a spindleenable pin with PWM spindle speed on D11. This feature has beenrequested often from the laser cutter community. Since spindledirection isn’t really of much use, it seemed like good good trade.Note that M4 spindle enable counter-clock-wise support is removed forobvious reasons, while M3 and M5 still work.","['config.h,cpu_map.h,gcode.c,grbl.h,planner.c,protocol.c,report.c,report.h,spindle_control.c']"
234195e721a58d4e46f21b63afcf1e5990570de0,Sungeun Jeon,2015-03-27,Compile-option for inverting spindle enable.- Installed a compile-option for inverting the spindle enable pin forcertain electronics boards users have reported needing this.,"['config.h,spindle_control.c']"
4c20a2173fc99b6fffd4f73d93bc32dc2ed49753,Sonny Jeon,2015-03-29,"Commit history, logo license, full-arc fix.- Commit history added to repo, as an easier way for people to see viewthe changes over time.- Grbl logo copyright license added. All rights reserved with regardsto the Grbl logo.- G2/3 full circles would sometime not execute. The problem was due tonumerical round-off of a trig calculation. Added a machine epsilondefine to help detect and correct for this problem. Tested and shouldnot effect general operation of arcs.","['README.md,commit_log_v0.7.txt,commit_log_v0.8c.txt,commit_log_v0.9g.txt,commit_log_v0.9i.txt,COPYING,Grbl Logo 150px.png,Grbl Logo 250px.png,Grbl Logo 320px.png,Grbl Logo 640px.png,Grbl Logo.pdf,Grbl Logo.svg,config.h,grbl.h,motion_control.c']"
f5e7436a0284047dcf372ecd5ee963780874d0da,Sonny Jeon,2015-03-29,Fix for limit pin reporting compile-option- The limit pin reporting wasn’t working correctly due to calling thewrong similarly-named function. Verified to be working now.,['report.c']
664854b9dfc50da847b73cd96e64450b4bfee518,Sonny Jeon,2015-05-17,"Critical M0/2/30 fix. Homing updates.- Critical fix for M0 program pause. Due to its recent change, it wouldcause Grbl to suspend but wouldn’t notify the user of why Grbl was notdoing anything. The state would show IDLE and a cycle start wouldresume it. Grbl now enters a HOLD state to better indicate the statechange.- Critical fix for M2 and M30 program end. As with M0, the statepreviously would show IDLE while suspended. Grbl now does not suspendupon program end and leaves job control to the GUI. Grbl simply reportsa `[Pgm End]` as a feedback message and resets certain g-code modes.- M2/30 g-code reseting fix. Previously Grbl would soft-reset after anM2/30, but this was not complaint to the (linuxcnc) g-code standard. Itsimply resets [G1,G17,G90,G94,G40,G54,M5,M9,M48] and keeps all othermodes the same.- M0/M2/M30 check-mode fix. It now does not suspend the machine duringcheck-mode.- Minor bug fix related to commands similar to G90.1, but not G90.1,not reporting an unsupported command.- Homing cycle refactoring. To help reduce the chance of usersmisunderstanding their limit switch wiring, Grbl only moves a shortdistance for the locate cycles only. In addition, the homing cyclepulls-off the limit switch by the pull-off distance to re-engage andlocate home. This should improve its accuracy.- HOMING_FORCE_ORIGIN now sets the origin to the pull-off location,rather than where the limit switch was triggered.- Updated default junction deviation to 0.01mm. Recent tests showedthat this improves Grbl’s cornering behavior a bit.- Added the ShapeOko3 defaults.- Added new feedback message `[Pgm End]` for M2/30 notification.- Limit pin reporting is now a $10 status report option. Requested byOEMs to help simplify support troubleshooting.","['commit_log_v0.9i.txt,config.h,defaults.h,gcode.c,grbl.h,limits.c,report.c,report.h,settings.h,stepper.c,system.h']"
25cdeb830b5e52d90ae9e34aa4696be58338c193,ashelly,2015-05-22,"Splitting Cpu map into separate files.Makes comparison, addition of new ones easier","['cpu_map.h,cpu_map_atmega2560.h,cpu_map_atmega328p.h']"
6558a71fb1fbeec26da98e467bb84343cd14cb50,ashelly,2015-05-22,Fixing up comment blocks in headers,"['cpu_map.h,cpu_map_atmega2560.h,cpu_map_atmega328p.h']"
2beaeeb42baa8ffa142e1181edec4a21ddcc02e1,Sonny Jeon,2015-05-22,Merge pull request #700 from ashelly/header-splitHeader split,['']
b58e8455c94649ccc58f35093f167b9324a2d238,ashelly,2015-05-22,Moving defaults to individual files in subdirectory,"['defaults.h,defaults_generic.h,defaults_oxcnc.h,defaults_shapeoko.h,defaults_shapeoko2.h,defaults_shapeoko3.h,defaults_sherline.h,defaults_simulator.h,defaults_zen_toolworks_7x7.h']"
e704862f11311ac23ba4b36ad2d614980ce0f9fb,Sonny Jeon,2015-05-22,Merge pull request #702 from ashelly/default-splitMoving defaults to individual files in subdirectory,['']
f85c481dedfaac5a5c2ad1c419c0689709cebadc,Sonny Jeon,2015-05-23,"Homing and limit updates. Minor bug fixes.- Updated new homing cycle to error out when a pull-off motion detectsthe limit is still active.- Created a limits_get_state() function to centralize it. It reportsstate as a bit-wise booleans according to axis numbering.- Updated the print uint8 functions. Generalized it to allow both base2and base10 printouts, while allowing base2 prints with N_AXIS digitsfor limit state status reports. Doing this saved about 100bytes offlash as well.- Applied CoreXY status reporting bug fix by @phd0. Thanks!","['commit_log_v0.9i.txt,defaults.h,grbl.h,limits.c,limits.h,motion_control.c,print.c,print.h,report.c,system.c']"
993c83d1c86f1006d0b681d125bd35dc9238b226,Sonny Jeon,2015-05-23,"Moved cpu_map.- Moved cpu_map files to a cpu_map directory, like the defaults fileorganization.","['cpu_map_atmega2560.h,cpu_map_atmega328p.h,commit_log_v0.9i.txt,cpu_map.h']"
0eb8bca3d9920ae7a08ace6f9fdceec432617620,Sonny Jeon,2015-05-23,CoreXY planner bug fix.- CoreXY motions were moving to the negative value of the intendedtarget. Now fixed.,['planner.c']
d13f741f7dce56c02c9b77374e1319ab286ecc64,Sonny Jeon,2015-05-26,Merge pull request #706 from grbl/edgeMerge edge branch.,['']
8a84f8987d629bc8f44dcfdcb448e0531dc77e9e,Sonny Jeon,2015-05-26,Updated README,"['README.md,config.h']"
558e1a2dfc554e6ede75a578f524b05a365e0077,Michel Pollet,2015-05-27,"Rename Grbl to grblOtherwise compilation fails on linux, or other case sensitive systemsSigned-off-by: Michel Pollet <buserror@gmail.com>","['cpu_map_atmega2560.h,cpu_map_atmega328p.h']"
39a047a35feddc822d4842d92a3b4f25540bb09c,Sonny Jeon,2015-05-27,Merge pull request #710 from buserror/fix-directory-case-sensitivityRename Grbl to grbl,['']
d0919142c53c9bdd8e44c69292262ca5fce02ae6,Sonny Jeon,2015-05-27,Added X-Carve defaults.- Added X-Carve 500mm and 1000mm default files.- Tweaked all default files. Removed obsolete AUTO_START and updatedsome JUNCTION_DEVIATION defaults after testing showed these needed tobe reduced slightly.,"['defaults_x_carve_1000mm.h,defaults_x_carve_500mm.h,defaults.h,defaults_generic.h,defaults_oxcnc.h,defaults_shapeoko.h,defaults_shapeoko2.h,defaults_sherline.h,defaults_simulator.h,defaults_zen_toolworks_7x7.h']"
2e8ed41b11048a2e17ea894f76de28b77bfc4654,Sonny Jeon,2015-05-27,Another git case-sensitive folder fix.- I’m now officially annoyed.,"['defaults_x_carve_1000mm.h,defaults_x_carve_500mm.h']"
e14cff3ddcf04bfd0502b47fd7b521991deca0b5,Sonny Jeon,2015-05-29,"Added G61 exact path support.- G61 exact path is the Grbl default path control mode, so it’s nowadded as a supported g-code.","['README.md,commit_log_v0.9i.txt,gcode.c,gcode.h,grbl.h']"
185de028361969e165df82620659711186d07279,Sonny Jeon,2015-06-18,Added restore settings defaults command.- New restore setting defaults command. Only wipes ‘$$’ setting inEEPROM and reloads them based on the defaults used when Grbl wascompiled. Used with a `$RST` commandNOTE: `$RST` is intentionally not listed in the Grbl ‘$’ help message.,"['Makefile,commit_log_v0.9i.txt,grbl.h,report.c,report.h,settings.h,system.c']"
e6db56451118718fb9ef83624cda6e6ab0ab6ea5,Sonny Jeon,2015-06-18,Updated README,"['README.md,commit_log_v0.9i.txt']"
81505e6a8111dd0fcbd4c8c0e88b5c65de5b4904,Sonny Jeon,2015-06-20,"New EEPROM restore functions.- Tweaked the previous EEPROM restore implementation and added newfunctionality.- `$RST=$` restores the `$$` grbl settings back to firmware defaults,which are set when compiled.- `$RST=#` restores the `$#` parameters in EEPROM. At times it’s usefulto clear these and start over, rather than manually writing each entry.-`$RST=*` wipe all of the data in EEPROM that Grbl uses and restoresthem to defaults. This includes `$$` settings, `$#` parameters, `$N`startup lines, and `$i` build info string.NOTE: This doesn’t write zeros throughout the EEPROM. It only writeswhere Grbl looks for data. For a complete wipe, please use the ArduinoIDE’s EEPROM clear example.- Refactored the restore and wipe functions in settings.c toaccommodate the new commands.","['README.md,commit_log_v0.9i.txt,grbl.h,settings.c,settings.h,system.c']"
cc38ae2471c756d3c02b11fff82166fa80d80823,Sonny Jeon,2015-06-25,Restore parameters minor bug fix.- `$RST=#` was not wiping the G30 positions from EEPROM. Minor but nowfixed.,"['README.md,commit_log_v0.9i.txt,settings.c']"
0427fd5b9f960c8122bfaf0732211bb43a8deb2b,Sonny Jeon,2015-07-17,"Version bump to v0.9j- Version bump requested by OEMs to easily determine whether thefirmware supports the new EEPROM reset feature. Other than that, nosignificant changes.","['README.md,commit_log_v0.9i.txt,config.h,grbl.h']"
3a68c22fabf03aa35f92a33338aeabb92e617c47,Sonny Jeon,2015-08-14,Individual control pin invert compile-option.- Control pins may be individually inverted through aCONTROL_INVERT_MASK macro. This mask is define in the cpu_map.h file.,"['commit_log_v0.9i.txt,config.h,cpu_map_atmega2560.h,cpu_map_atmega328p.h,grbl.h,system.c']"
90ad129ad262bd6e785cf11b8387a1c376cdd11a,Sonny Jeon,2015-08-16,Update README.md,['README.md']
b3a53a46835c13fcd3c29997134f7ded72d28047,Sonny Jeon,2015-08-27,"v1.0 Beta Release.- Tons of new stuff in this release, which is fairly stable and welltested. However, much more is coming soon!- Real-time parking motion with safety door. When this compile optionis enabled, an opened safety door will cause Grbl to automatically feedhold, retract, de-energize the spindle/coolant, and parks near Z max.After the door is closed and resume is commanded, this reverses and theprogram continues as if nothing happened. This is also highlyconfigurable. See config.h for details.- New spindle max and min rpm ‘$’ settings! This has been requestedoften. Grbl will output 5V when commanded to turn on the spindle at itsmax rpm, and 0.02V with min rpm. The voltage and the rpm range arelinear to each other. This should help users tweak their settings toget close to true rpm’s.- If the new max rpm ‘$’ setting is set = 0 or less than min rpm, thespindle speed PWM pin will act like a regular on/off spindle enablepin. On pin D11.- BEWARE: Your old EEPROM settings will be wiped! The new spindle rpmsettings require a new settings version, so Grbl will automaticallywipe and restore the EEPROM with the new defaults.- Control pin can now be inverted individually with aCONTROL_INVERT_MASK in the cpu_map header file. Not typical for usersto need this, but handy to have.- Fixed bug when Grbl receive too many characters in a line andoverflows. Previously it would respond with an error per overflowcharacter and another acknowledge upon an EOL character. This broke thestreaming protocol. Now fixed to only respond with an error after anEOL character.- Fixed a bug with the safety door during an ALARM mode. You now can’thome or unlock the axes until the safety door has been closed. This isfor safety reasons (obviously.)- Tweaked some the Mega2560 cpu_map settings . Increased segment buffersize and fixed the spindle PWM settings to output at a higher PWMfrequency.- Generalized the delay function used by G4 delay for use by parkingmotion. Allows non-blocking status reports and real-time control duringre-energizing of the spindle and coolant.- Added spindle rpm max and min defaults to default.h files.- Added a new print float for rpm values.","['README.md,config.h,coolant_control.c,cpu_map_atmega2560.h,cpu_map_atmega328p.h,defaults_generic.h,defaults_oxcnc.h,defaults_shapeoko.h,defaults_shapeoko2.h,defaults_shapeoko3.h,defaults_sherline.h,defaults_simulator.h,defaults_x_carve_1000mm.h,defaults_x_carve_500mm.h,defaults_zen_toolworks_7x7.h,grbl.h,limits.c,motion_control.c,motion_control.h,nuts_bolts.c,nuts_bolts.h,planner.c,planner.h,print.c,print.h,protocol.c,protocol.h,report.c,report.h,settings.c,settings.h,spindle_control.c,stepper.c,stepper.h,system.c,system.h']"
9152d1429c32b29b1b784084a9ea498156c13d7f,Sonny Jeon,2015-08-27,Update README,"['README.md,commit_log_v0.9i.txt']"
9575199183aaaee541b3065c10f1047cc856833d,Sonny Jeon,2015-08-29,Optional line number reporting bug fix.- Fixed a bug where it would not compile when USE_LINE_NUMBERS wasenabled.,"['commit_log_v0.9i.txt,config.h,grbl.h,motion_control.c,motion_control.h']"
965e337405b58e1fd7248b8f7a84d4cf570686dd,Sonny Jeon,2015-09-05,Parking motion bug fix.- Parking motion would intermittently complete the queued tool pathupon resuming in certain scenarios. Now fixed.,"['commit_log_v0.9i.txt,gcode.c,grbl.h,limits.c,stepper.c']"
dade712f0e5eaa15f3703aa58bea3dc3a64056fd,Sonny Jeon,2015-09-24,"Updated G28/G30 intermediate motion behavior.- G28 and G30’s behavior has been updated from the old NIST g-codestandard to LinuxCNC’s. Previously when an intermediate motion wasprogrammed, the NIST standard would move all axes to the final G28/30stored coordinates. LinuxCNC states it only moves the axes specified inthe command.  For example, suppose G28’s stored position is (x,y,z) = (1,2,3) forsimplicity, and we want to do an automated z-axis tool retraction andthen park at the x,y location. `G28 G91 Z5` will first move the Z axis5mm(or inches) up, then move Z to position 3 in machine coordinates.Next, the command `G28 G91 X0 Y0` would skip the intermediate movesince distance is zero, but then move only the x and y axes to machinecoordinates 1 and 2, respectively. The z-axis wouldn’t move in thiscase, since it wasn’t specified.This change is intended to make Grbl more LinuxCNC compatible whilemaking commands, like the shown tool retraction, much easier toimplement.","['README.md,commit_log_v0.9i.txt,gcode.c,grbl.h']"
d226555810cc95a10971f57f685483d1a81af79f,Sonny Jeon,2015-09-30,"Minor bug fixes.- G38.x was not printing correctly in the $G g-code state reports. Nowfixed.- Potential bug regarding volatile variables inside a struct. It hasnever been a problem in v0.9, but ran into this during v1.0development. Just to be safe, the fixes are applied here.- Updated pre-built firmwares with these two bug fixes.","['README.md,commit_log_v0.9i.txt,gcode.c,grbl.h,limits.c,main.c,motion_control.c,probe.c,protocol.c,report.c,serial.c,stepper.c,system.c,system.h']"
b9c3461932402019f69e37a98c142474f33080e2,Sonny Jeon,2015-09-30,"Bug fixes.- G38.x was not printing correctly in the $G g-code state reports. Nowfixed.- When investigating the above issue, it was noticed that G38.xwouldn’t show at all, but instead a G0 would be printed. This wasunlike the v0.9j master build. It turned out volatile variables do notlike to be defined inside a C struct. These are undefined on how to behandled. Once pulled out, all weird issues went away.- Also changed two ‘sizeof()’ statements in the mc_probe() andprobe_state_monitor() functions to be more robust later on.- Updated the commit logs to individual files for each minor release.Forgot to update the generating script to account for this.",['']
5eee10845bd1ea825f71228ab7131d068bba5fa6,Sonny Jeon,2015-11-09,"Pin state reporting of all pins. Flash optimization.- New pin state realtime reporting feature. Instead of `Lim:000` forlimit state reports, the new feature shows `Pin:000|0|0000`, orsomething similar. The `|` delimited fields indicate xyz limits, probe,and control pin states, where 0 is always not triggered, and 1 istriggered. Invert masks ARE accounted for.  Each field may be enabled or disabled via the `$10` status reportsetting. The probe and control pin flags are bits 5 and 6, respectively.- Remove the now deprecated `REPORT_CONTROL_PIN_STATE` option inconfig.h- The old limit pin reports `Lim:000` may be re-enabled by commentingout `REPORT_ALL_PIN_STATES` in config.h.- Incremented the version letter (v1.0c) to indicate the change inreporting style.- Replaced all bit_true_atomic and bit_false_atomic macros withfunction calls. This saved a couple hundred bytes of flash.","['README.md,commit_log_v1.0b.txt,config.h,gcode.c,grbl.h,limits.c,motion_control.c,nuts_bolts.h,probe.c,protocol.c,report.c,serial.c,settings.h,stepper.c,system.c,system.h']"
111d28dc9a6ff00259f16c68302052980c5323e1,Sonny Jeon,2016-03-04,"Applied master branch bug fixes.- Planner was under-estimating maximum speeds through straightjunctions in certain cases. The calculations have been updated to bemore accurate.- Strange sizeof() bug in the most recent releases. Manifested as analarm upon a power up even when homing was disabled. Fixed by declaringsizeof() with struct types, rather than variable names, even thoughthey were validated to give the same value.- Spindle speed zero should disable the spindle. Now fixed.- New configuration option for inverting certain limit pins. Handy formixed NO and NC switch machines. See config.h for details.","['commit_log_v1.0c.txt,config.h,gcode.c,grbl.h,limits.c,main.c,planner.c,spindle_control.c,stepper.c']"
81adc202cd98f288ca4bcfbef4f71e31ce5c104c,Sonny Jeon,2016-03-11,"Soft limit error bug fix.- Soft limit errors were stuck in a feed hold without notifying theuser why it was in a hold. When resumed, the soft limit error wouldkick in. Issue should be fixed to behave as intended. To automaticallyhold and issue a soft limit alarm once the machine has come to a stop.","['commit_log_v1.0c.txt,grbl.h,limits.c,main.c,protocol.c,system.h']"
5bfc3a194507f7c977da0221820fc6e4aaf952b8,Sonny Jeon,2016-03-19,"No variable spindle and spindle speed fix.- Soft limit errors were stuck in a feed hold without notifying theuser why it was in a hold. When resumed, the soft limit error wouldkick in. Issue should be fixed to behave as intended to automaticallyhold and issue a soft limit alarm once the machine has come to a stop.","['commit_log_v1.0c.txt,grbl.h,spindle_control.c']"
0746a5a1d705a5b4ee14c2026d9aef5ff877f971,Sonny Jeon,2016-03-30,"Organizational updates. Mega2560 support moved.- Mega2560 support has been moved to the Grbl-Mega[project](http://github.com/gnea/grbl-Mega/) to clean up the code andmake future developments easier with increased flash and RAM. All newdevelopments between the 328p and Mega2560 will be synced when it makessense to.- OEM single file compile configuration option. Before OEMs needed toalter three files. Provided a way to just alter the config.h file tocontain everything for a particular Grbl build. See config.h for moredetails.- Removed defaults and cpu_map directories and reverted back todefaults.h and cpu_map.h to contain all definitions. This should helpreduce some headaches and the previous implementation inadvertentlycreated. Also, it makes the single file config.h possible.- Moved (and tweaked) the invert control pin mask define and placedinto config.h, rather than in the cpu_map.h file. Makes more sensethere.","['README.md,commit_log_v1.0c.txt,config.h,cpu_map.h,cpu_map_atmega2560.h,cpu_map_atmega328p.h,defaults.h,defaults_generic.h,defaults_oxcnc.h,defaults_shapeoko.h,defaults_shapeoko2.h,defaults_shapeoko3.h,defaults_sherline.h,defaults_simulator.h,defaults_x_carve_1000mm.h,defaults_x_carve_500mm.h,defaults_zen_toolworks_7x7.h,grbl.h,spindle_control.c,system.c']"
12f48a008a2432df99771ff3223ba3f98578acc1,chamnit,2016-09-21,"Grbl v1.0e huge beta release. Overrides and new reporting.- Feature: Realtime feed, rapid, and spindle speed overrides. Thesealter the running machine state within tens of milliseconds!    - Feed override: 100%, +/-10%, +/-1% commands with values 1-200% ofprogrammed feed    - Rapid override: 100%, 50%, 25% rapid rate commands    - Spindle speed override: 100%, +/-10%, +/-1% commands with values50-200% of programmed speed    - Override values have configurable limits and increments inconfig.h.- Feature: Realtime toggle overrides for spindle stop, flood coolant,and optionally mist coolant    - Spindle stop: Enables and disables spindle during a feed hold.Automatically restores last spindles state.    - Flood and mist coolant: Immediately toggles coolant state untilnext toggle or g-code coolant command.- Feature: Jogging mode! Incremental and absolute modes supported.    - Grbl accepts jogging-specific commands like $J=X100F50. An axisword and feed rate are required. G20/21 and G90/G91 commands areaccepted.    - Jog motions can be canceled at any time by a feed hold `!`command. The buffer is automatically flushed. (No resetting required).    - Jog motions do not alter the g-code parser state so GUIs don’thave to track what they changed and correct it.- Feature: Laser mode setting. Allows Grbl to execute continuousmotions with spindle speed and state changes.- Feature: Significantly improved status reports. Overhauled to cram inmore meaningful data and still make it smaller on average.    - All available data is now sent by default, but does not appear ifit doesn’t change or is not active.    - Machine position(MPos) or work position(WPos) is reported but notboth at the same time. Instead, the work coordinate offsets (WCO)aresent intermittently whenever it changes or refreshes after 10-30 statusreports. Position vectors are easily computed by WPos  = MPos - WCO.    - All data has changed in some way. Details of changes are in themarkdown documents and wiki.- Feature: 16 new realtime commands to control overrides. All inextended-ASCII character space.    - While they are not easily typeable and requires a GUI, they can’tbe accidentally triggered by some latent character in the g-codeprogram and have tons of room for expansion.- Feature: New substates for HOLD and SAFETY DOOR. A `:x` is appendedto the state, where `x` is an integer and indicates a substate.    - For example, each integer of a door state describes in what phasethe machine is in during parking. Substates are detailed in thedocumentation.- Feature: With the alarm codes, homing and probe alarms have beenexpanded with more codes to provide more exact feedback on what causedthe alarm.- Feature: New hard limit check upon power-up or reset. If detected, afeedback message to check the limit switches sent immediately after thewelcome message.    - May be disabled in config.h.- OEM feature: Enable/disable `$RST=` individual commands based ondesired behavior in config.h.- OEM feature: Configurable EEPROM wipe to prevent certain data frombeing deleted during firmware upgrade to a new settings version or`RST=*` command.- OEM feature: Enable/disable the `$I=` build info write string withexternal EEPROM write example sketch.    - This prevents a user from altering the build info string inEEPROM. This requires the vendor to write the string to EEPROM viaexternal means. An Arduino example sketch is provided to accomplishthis. This would be useful for contain product data that isretrievable.- Tweak: All feedback has been drastically trimmed to free up flashspace for the v1.0 release.    - The `$` help message is just one string, listing availablecommands.    - The `$$` settings printout no longer includes descriptions. Onlythe setting values. (Sorry it’s this or remove overrides!)    - Grbl `error:` and `ALARM:` responses now only contain codes. Nodescriptions. All codes are explained in documentation.    - Grbl’s old feedback style may be restored via a config.h, butkeep in mind that it will likely not fit into the Arduino’s flash space.- Tweak: Grbl now forces a buffer sync or stop motion whenever a g-codecommand needs to update and write a value to EEPROM or changes the workcoordinate offset.    - This addresses two old issues in all prior Grbl versions. First,an EEPROM write requires interrupts to be disabled, including stepperand serial comm. Steps can be lost and data can be corrupted. Second,the work position may not be correlated to the actual machine position,since machine position is derived from the actual current executionstate, while work position is based on the g-code parser offset state.They are usually not in sync and the parser state is several motionsbehind. This forced sync ensures work and machine positions are alwayscorrect.    - This behavior can be disabled through a config.h option, but it’snot recommended to do so.- Tweak: To make status reports standardized, users can no longerchange what is reported via status report mask, except for onlytoggling machine or work positions.    - All other data fields are included in the report and can only bedisabled through the config.h file. It’s not recommended to alter this,because GUIs will be expecting this data to be present and may not becompatible.- Tweak: Homing cycle and parking motion no longer report a negativeline number in a status report. These will now not report a line numberat all.- Tweak: New `[Restoring spindle]` message when restoring from aspindle stop override. Provides feedback what Grbl is doing while thespindle is powering up and a 4.0 second delay is enforced.- Tweak: Override values are reset to 100% upon M2/30. This behaviorcan be disabled in config.h- Tweak: The planner buffer size has been reduced from 18 to 16 to freeup RAM for tracking and controlling overrides.- Tweak: TX buffer size has been increased from 64 to 90 bytes toimprove status reporting and overall performance.- Tweak: Removed the MOTION CANCEL state. It was redundant and didn’taffect Grbl’s overall operation by doing so.- Tweak: Grbl’s serial buffer increased by +1 internally, such that 128bytes means 128, not 127 due to the ring buffer implementation. Longoverdue.- Tweak: Altered sys.alarm variable to be set by alarm codes, ratherthan bit flags. Simplified how it worked overall.- Tweak: Planner buffer and serial RX buffer usage has been combined inthe status reports.- Tweak: Pin state reporting has been refactored to report only thepins “triggered” and nothing when not “triggered”.- Tweak: Current machine rate or speed is now included in every report.- Tweak: The work coordinate offset (WCO) and override states only needto be refreshed intermittently or reported when they change. Therefresh rates may be altered for each in the config.h file withdifferent idle and busy rates to lessen Grbl’s load during a job.- Tweak: For temporary compatibility to existing GUIs until they areupdated, an option to revert back to the old style status reports isavailable in config.h, but not recommended for long term use.- Tweak: Removed old limit pin state reporting option from config.h inlieu of new status report that includes them.- Tweak: Updated the defaults.h file to include laser mode, alteredstatus report mask, and fix an issue with a missing invert probe pindefault.- Refactor: Changed how planner line data is generated and passed tothe planner and onto the step generator. By making it a structvariable, this saved significant flash space.- Refactor: Major re-factoring of the planner to incorporate overridevalues and allow for re-calculations fast enough to immediately takeeffect during operation. No small feat.- Refactor: Re-factored the step segment generator for re-computing newoverride states.- Refactor: Re-factored spindle_control.c to accommodate the spindlespeed overrides and laser mode.- Refactor: Re-factored parts of the codebase for a new jogging mode.Still under development though and slated to be part of the officialv1.0 release. Hang tight.- Refactor: Created functions for computing a unit vector and valuelimiting based on axis maximums to free up more flash.- Refactor: The spindle PWM is now set directly inside of the stepperISR as it loads new step segments.- Refactor: Moved machine travel checks out of soft limits functioninto its own since jogging uses this too.- Refactor: Removed coolant_stop() and combined withcoolant_set_state().- Refactor: The serial RX ISR forks off extended ASCII values toquickly assess the new override realtime commands.- Refactor: Altered some names of the step control flags.- Refactor: Improved efficiency of the serial RX get buffer countfunction.- Refactor: Saved significant flash by removing and combining printfunctions. Namely the uint8 base10 and base2 functions.- Refactor: Moved the probe state check in the main stepper ISR toimprove its efficiency.- Refactor: Single character printPgmStrings() went converted to directserial_write() commands to save significant flash space.- Documentation: Detailed Markdown documents on error codes, alarmcodes, messages, new real-time commands, new status reports, and howjogging works. More to come later and will be posted on the Wiki aswell.- Documentation: CSV files for quick importing of Grbl error and alarmcodes.- Bug Fix: Applied v0.9 master fixes to CoreXY homing.- Bug Fix: The print float function would cause Grbl to crash if avalue was 1e6 or greater. Increased the buffer by 3 bytes to helpprevent this in the future.- Bug Fix: Build info and startup string EEPROM restoring was notwriting the checksum value.- Bug Fix: Corrected an issue with safety door restoring the properspindle and coolant state. It worked before, but breaks with laser modethat can continually change spindle state per planner block.- Bug Fix: Move system position and probe position arrays out of thesystem_t struct. Ran into some compiling errors that were hard to trackdown as to why. Moving them out fixed it.","['COPYING,Makefile,README.md,alarm_codes.csv,error_codes.csv,error_codes.md,jogging.md,realtime_cmds.md,report.md,config.h,coolant_control.c,coolant_control.h,cpu_map.h,defaults.h,grblWrite_BuildInfo.ino,license.txt,gcode.c,gcode.h,grbl.h,jog.c,jog.h,limits.c,limits.h,main.c,motion_control.c,motion_control.h,nuts_bolts.c,nuts_bolts.h,planner.c,planner.h,print.c,print.h,probe.c,probe.h,protocol.c,protocol.h,report.c,report.h,serial.c,serial.h,settings.c,settings.h,spindle_control.c,spindle_control.h,stepper.c,stepper.h,system.c,system.h']"
228066f9274800d52882ea796e5898bcd637f2de,winder,2016-09-22,Add locale to code CSVs.,"['alarm_codes_en_US.csv,error_codes_en_US.csv']"
968e97f9ef86e6bda7d72529d810e32d7f5404f6,Sonny Jeon,2016-09-22,Merge pull request #1 from winder/devAdd locale to code CSVs.,['']
e51e691eebf605c7edd8c989c0d8669a90eca50a,Sonny Jeon,2016-09-22,"Increment to v1.1a, minor compile bug fix, tweaked communication protocol, more docs.- Incremented to v1.1a, rather than keep 1.0e. This is because thereare existing v1.0 installations. Don’t want to confuse people further.- Certain version of the Arduino IDE did not like the `inline` in thefunction header. Removed from spindle_control files to fix the problem.- Tweaked the communication protocol slightly. Added message typeindicators for all `[]`bracketed feedback messages. It’s beenproblematic for GUI dev to try to determine the context of a messageand how it should be handled. These indictors should help tremendouslyto remove context all together.- Also altered how `$N` startup lines are presented when executed. Theynow start with an open chevron ‘>’ followed by the line and an ‘:ok’ toindicate it executed. The ‘ok’ is on the same line intentionally so itdoesn’t mess up a streaming protocol counter.- Managed to save a 100+KB from refactoring parts of report.c. (ThanksVasilis!) Freed up room to alter the protocol a little.- Wrote a markdown document on interface messaging to make it clear howit’s intended to work. See interface.md in /doc/markdown- Started to pull in some Wiki pages from the old grbl site andbeginning to update them for v1.1.- Created new commit log for v1.1.","['commit_log_v1.1.txt,error_codes.md,interface.md,interface_notes.md,settings.md,realtime_cmds.md,report.md,grbl.h,print.c,print.h,report.c,report.h,spindle_control.c,spindle_control.h,system.c']"
c0f61e4aac2250c9585dd50a648e4ee4d0f439d9,Sonny Jeon,2016-09-24,Serial RX count bug fix. Settings codes CSV. More documentation.- Reverted back the serial RX count function to how it was. Thevariable type was unsigned and cause an integer underflow whenever thecalculation produced a negative number. The old way was the correct way.- Lots of minor edits to the code CSVs and markdown documents.- Expanded on explaining feedback messages and startup line executionfeedback.- Created a new settings codes CSV to help GUIs import the values andmeanings.,"['alarm_codes_en_US.csv,error_codes_en_US.csv,setting_codes_en_US.csv,commit_log_v1.1.txt,change_summary.md,error_codes.md,interface.md,realtime_cmds.md,serial.c']"
b04faaf0d324db2875606bb4d308bcd5c3eaff3d,Sonny Jeon,2016-09-25,"Addressed much larger flash size with avr-gcc v4.9.2. Refactored reports to save 160KB.- The newest Arduino IDE 1.6.12 has recently updated to avr-gcc v4.9.2.Unfortunately, it produces a compiled size almost 0.7KB to 1KB largerthan prior versions! This can easily cause the base build to exceed theArduino Duemilanove/Nano flash limit of 30.5KB. The Arduino Uno seemsto be ok still with its 31.5KB flash limit.- Makefile `-flto` compile flag added to cut down on the horrible flashsize when using the new avr-gcc. (Edit Makefile and remove comment onCOMPILE definition). This brings it in-line with what the IDE produces.- Functionalized repetitive tasks in report.c to try to reduce overallflash size. Successfully cut down about 160bytes.- Removed printFloat_SettingValue() and printFloat_RPMValue()functions. These aren’t required and can be replaced with a direct callto printFloat() because they don’t require a unit conversion check.","['Makefile,commit_log_v1.1.txt,grbl.h,print.c,print.h,report.c']"
d21e06a2011ee040815fb12e239a4f431616da7b,Sonny Jeon,2016-09-26,"v1.1b: Tweaked Bf reports, jogging doc, saved another 160 bytes, minor bug fixes- Increment to v1.1b due to status report tweak.- Tweaked the buffer state status reports to show bytes and blocksavailable, rather than in use. This does not require knowing the buffersizes beforehand. It’s implicit.- Also, since buffer states are not used by most devs (afterinquiries), it is no longer enabled by default and a status mask optionwas added for this.- Fixed some typos and updated for the report tweak in thedocumentation.- Wrote a joystick implementation concept in the jogging markdowndocument. Outlines how to get a low-latency feel to a joystick (andother input devices).- Removed XON/XOFF support. It’s not used by anyone because of itsinherent problems. Remains in older versions for reference.- Added a compile option on how to handle the probe position during acheck mode.- Fixed a jogging bug. If G93 is the modal state before a joggingmotion, the feed rate did not get calculated correctly. Fixed the issue.- Refactored some code to save another 160+ bytes. Included an improvedfloat vector comparison macro and reducing a few large and repetitivefunction calls.- Fixed a probing bug (existing in v0.9 too) where the target positionswere not set correct and error handling was improper.","['commit_log_v1.1.txt,change_summary.md,interface.md,jogging.md,config.h,defaults.h,gcode.c,gcode.h,grbl.h,motion_control.c,motion_control.h,nuts_bolts.h,planner.c,planner.h,report.c,serial.c,serial.h,settings.h']"
669735bea96497100c6e7a09c5190c93a01c52f4,Sonny Jeon,2016-09-27,Update README and clarifications in jogging document.,"['README.md,commit_log_v1.1.txt,jogging.md']"
bf5fc48074f743f03cfd31e42738de0f511313a4,Sonny Jeon,2016-09-27,"Refactored g-code parser. Saved 60bytes flash and some ram. Edited Readme.- Freed up another 60 bytes of flash and 12-24 bytes of stack RAM byusing the pre-allocated IJK arc offset vector that is guaranteed to benot in use. Only G10 and G28/30 require fetching from EEPROM andretaining extra data. Both commands use axis words, which rules outG2/3 arcs using IJK offsets existing in same block. Not ideal, butevery byte helps.- Edited README.","['README.md,commit_log_v1.1.txt,gcode.c,grbl.h']"
e2e2bb5242f05730a94c503be22cb26feb5fd6af,Sonny Jeon,2016-09-28,"New jog cancel real-time command. Parser typo fix from last push.- Added a new jog cancel real-time command. Rather than depending on afeed hold to cancel a jogging motion, this realtime command can be usedinstead. The main advantage is if a feed hold is used, you canaccidentally hold the machine right when Grbl returns to IDLE aftercompleting a jog. And the GUI doesn’t have to worry about tracking thiseither.- Fixed a typo in the g-code parser edits from the last push. Wascausing the G10 set coordinate system command to not work correctly.- Updated the documentation with the jog cancel command.","['commit_log_v1.1.txt,jogging.md,realtime_cmds.md,config.h,gcode.c,grbl.h,protocol.c,report.c,serial.c,system.c']"
d1037268c863e2c4657941205eb547354cb34427,Sonny Jeon,2016-10-11,"v1.1c: New sleep mode. Laser mode and other bug fixes.- New $SLP sleep mode that will disable spindle, coolant, and stepperenable pins. Allows users to disable their steppers without having toalter their settings. A reset is required to exit and re-initializes inalarm state.- Laser mode wasn’t updating the spindle PWM correctly (effectedspindle speed overrides) and not checking for modal states either.Fixed both issues.- While in laser mode, parking motions are ignored, since the power offdelay with the retract motion would burn the material. It will justturn off and not move. A restore immediately powers up and resumes. Nodelays.- Changing rpm max and min settings did not update the spindle PWMcalculations. Now fixed.- Increased default planner buffer from 16 to 17 block. It seems to bestable, but need to monitor this carefully.- Removed software debounce routine for limit pins. Obsolete.- Fixed a couple parking motion bugs. One related to restoringincorrectly and the other the parking rate wasn’t compatible with theplanner structs.- Fixed a bug caused by refactoring the critical alarms in a recentpush. Soft limits weren’t invoking a critical alarm.- Updated the documentation with the new sleep feature and added somemore details to the change summary.","['README.md,commit_log_v1.1.txt,change_summary.md,interface.md,config.h,cpu_map.h,gcode.c,grbl.h,limits.c,motion_control.c,planner.h,protocol.c,report.c,report.h,serial.c,settings.c,spindle_control.c,stepper.c,system.c,system.h']"
6ab3cfbe7da3fd73508bb3e8422e45bcf5ae9def,Sonny Jeon,2016-10-12,Spindle speed bug fix.- Spindle speed updating wasn’t working in the g-code parser due tosome borked up logic on my part. Fixed it and should be operating asintended for both normal and laser spindle modes.- Elaborated a little more on the new sleep mode in the documentation.,"['commit_log_v1.1.txt,interface.md,gcode.c,grbl.h']"
a0e96eb11abdbf06dce6c8d4bcc22fc0b33d545e,chamnit,2016-10-12,"Added settings documentation. Very minor bug fix to step direction handling.- Added v1.1 settings documentation to the markdown folder.- Fixed a very minor bug in the step direction handling upon wakeup.The direction mask would temporarily go back to default mask for abouta millisecond when moving in the same non-default direction. It did noteffect Grbl behavior before, but fixed for consistency.","['commit_log_v1.1.txt,realtime_cmds.md,settings.md,stepper.c']"
62d16af28569a899bb904992b9d25faba75bca57,chamnit,2016-10-12,Merge branch 'dev' into edge,['']
c8ac98d6e00c5c82efe4efffd07480d95ba6e660,Will Winder,2016-10-17,"Modify code CSV format. (#10)- Wrap value in quotes to avoid issue with embedded commas. This occurs  in one of the alarm codes.- Change header row format to allow same parsing code as data rows.","['alarm_codes_en_US.csv,error_codes_en_US.csv,setting_codes_en_US.csv']"
ed790c9fa298b77529ec87b917d19f249cff976b,Sonny Jeon,2016-10-17,"v1.1d: Tweaked interface a bit. Added realtime spindle speed and build option data. Minor bug fixes.- Increment to v1.1d due to interface tweaks.- Based on GUI dev feedback, the toggle overrides report was removedand replace with showing “accessory state”. This shows a character if aparticular accessory is enabled, like the spindle or flood coolant.These can be directly altered by the toggle overrides, so when theyexecute, a GUI will be able to observe the state altering as feedback.- Altered the real-time feed rate to show real-time spindle speed aswell. It was an over-sight on my part. It’s needed because it’s hard toknow what the current spindle speed is when overrides are altering it.Especially during something like a laser cutting job when its importantto know how spindle speed overrides are effecting things.- Real-time spindle speed is not shown if VARIABLE_SPINDLE is disabled.The old real-time feed rate data field will show instead.- Compile-time option data is now included in another messageimmediately following the build info version string, starting with`[OPT:`. A character code follows the data type name with eachindicating a particular option enabled or disabled. This will helpimmensely with debugging Grbl as well as help GUIs know exactly howGrbl was compiled.- These interface changes are detailed in the updated documentation.- Reduced the default planner buffer size from 17 to 16. Needed to freeup some memory…- For increasing the serial TX buffer size from 90 to 104 bytes. Theaddition of real-time spindle speeds and accessory enable data requireda bigger buffer. This is to ensure Grbl is performing at optimal levels.- Refactored parts of the spindle and coolant control code to make itmore consistent to each other and how it was called. It was a littlemessy. The changes made it easier to track what each function call wasdoing based on what was calling it.- Created a couple of new get_state functions for the spindle andcoolant. These are called by the accessory state report to lookdirectly at the pin state, rather than track how it was set. Thisguarantees that the state is reported correctly.- Updated the g-code parser, parking motion, sleep mode, and spindlestop calls to refactored spindle and coolant code.- Added a compile-time option to enable homing individual axes, ratherthan having only the main homing cycle. The actual use case for this ispretty rare. It’s not recommended you enable this, unless you have aspecific application for it. Otherwise, just alter the homing cycleitself.- Refactored the printFloat() function to not show a decimal point ifthere are no trailing values after it. For example, `1.` now shows `1`.- Fixed an issue regarding spindle speed overrides no being applied toblocks without motions.- Removed the toggle_ovr_mask system variable and replaced withspindle_stop_ovr system variable. Coolant toggles don’t need to betracked.- Updated README","['Makefile,README.md,build_option_codes_en_US.csv,commit_log_v1.1.txt,change_summary.md,interface.md,settings.md,config.h,coolant_control.c,coolant_control.h,cpu_map.h,gcode.c,grbl.h,main.c,motion_control.c,motion_control.h,planner.h,print.c,protocol.c,report.c,serial.h,spindle_control.c,spindle_control.h,stepper.c,system.c,system.h']"
8b76a39d5dfd31cc5e62ac6083118068354a472a,Sonny Jeon,2016-10-18,"Improved option for v0.9 GUI compatibility.- Addressed an issue with backward compatibility with Grbl v0.9-styleGUIs.- It still may not work due to new data and states coming back fromGrbl v1.1. Regardless, DO NOT TRY TO USE THE COMPATIBILITY MODE UNTILTHERE IS A REALLY GOOD REASON TO.- v0.9 GUI compatibility mode will be removed in future versions.You’ve been warned. It’s highly recommended for GUIs to update to thenew v1.1 interface.- Compability mode will only fit on an Arduino Uno due to sizeincreases.- Removed the REPORT_GUI_MODE compile option since it’s part of thev1.1 interface standard.- Updated the documentation to better describe the compatibility modebuild option.","['build_option_codes_en_US.csv,commit_log_v1.1.txt,interface.md,config.h,grbl.h,report.c,settings.h']"
8e638f0054c90ca171e0ea205d13f1c5a96c226f,Will Winder,2016-10-22,"Minor VARIABLE_SPINDLE feature toggle refactoring (#16)* Modify code CSV format.- Wrap value in quotes to avoid issue with embedded commas. This occurs  in one of the alarm codes.- Change header row format to allow same parsing code as data rows.* VARIABLE_SPINDLE feature flag experiment.- Use a macro for 'spindle_set_speed' and 'spindle_sync' to reduce the  number of required VARIABLE_SPINDLE checks.","['gcode.c,protocol.c,spindle_control.c,spindle_control.h']"
498dd625728aa6c0e49847bfa98b7720c6f7c763,Sonny Jeon,2016-10-23,"Spindle speed close to minimum fix.- When spindle speed is close to the minimum rpm, the PWM value wouldbe zero or lower than allowed. The computation error was caused bysetting the minimum PWM value to zero, when it should have been 1.- Added a compiler check for minimum PWM to be greater than zero.- Moved some of the spindle PWM macros to a more appropriate place inthe cpu_map.h.","['commit_log_v1.1.txt,config.h,cpu_map.h,grbl.h,report.c,spindle_control.c']"
f8ca08ad66896b1dfcea5c5e06f0444c6d8955e4,Sonny Jeon,2016-10-24,"Minor re-factoring. Fix an issue with parking and spindle restore.- Altered the report counters to be count down, rather than count up.Simplified some of the logic.- Fixed an issue with parking restore. The spindle state would disablethen reenable.- Clarified some of the config.h descriptions.- Moved the compile-time checks from config.h to grbl.h. They don’tbelong in the config.h file.- Refactored the initialization of the system variables in main.c.System position and probe position were undefined when power cycled,but were zero anyway. Added clear vector code to make it explicit.","['commit_log_v1.1.txt,config.h,coolant_control.c,grbl.h,main.c,protocol.c,report.c,spindle_control.c,system.c,system.h']"
a6f643151581cbcd40ffc515f9b05c9944282bea,chamnit,2016-10-25,Resolved parking accessory handling issue.- Yikes. Totally borked the last parking “fix”. Testing shows that allaccessories are now properly handled when retracting and restoring. Itwas caused by not accounting for the planner re-factoring correctly inthe parking code.,"['commit_log_v1.1.txt,grbl.h,planner.h,protocol.c']"
3854d200bb68fcf3ca40467c89d786fcd405284d,chamnit,2016-10-25,"Mandate all probe cycles ignore feed overrides.- For repeatability reasons, all G38.x probe cycles ignore feed rateoverrides and move at their programmed speed.- The mandate can be removed with a new config.h option.- Updated the documentation to reflect the change.","['build_option_codes_en_US.csv,commit_log_v1.1.txt,interface.md,config.h,gcode.c,report.c']"
cb916a996a3da6531f02e668722414e6f77fab58,Sonny Jeon,2016-10-26,"Add high-frequency spindle output option. Minor parking motion re-factoring.- Some laser controllers were reported to need a very high PWMfrequency. Added a line to enable this in cpu_map.h, if needed.- Cleaned up some of the parking code. Mostly just editing the comments.- Moved the accessory state resetting after the initial parkingretract. Should ensure the accessory state is properly handled upon anaborted parking restore. Not certain if this was a problem beforethough. Just to be sure.","['commit_log_v1.1.txt,cpu_map.h,grbl.h,protocol.c']"
e8b717604b094ff5d4fb747f2f19065b8fd004cd,Sonny Jeon,2016-10-27,"Spindle speed overrides behavior tweak. New experimental laser dynamic power mode.- Spindle speed overrides now update immediately if they are changedwhile in a HOLD state. Previously, they would update after exiting theHOLD, which isn’t correct.- New experimental dynamic laser power mode that adjusts laser powerbased on current machine speed. Enabled by uncommentingLASER_CONSTANT_POWER_PER_RATE in config.h  - It assumes the programmed rate is the intended power/rate for themotion.  - Feed rate overrides (FRO) do not effect the power/rate. Meaningthat spindle PWM will automatically lower with lower FRO and increasewith higher FRO to keep it the same.  - Spindle speed overrides (SSO) will directly increase and decreasethe power/rate. So 150% SSO will increase the PWM output by 150% forthe same speed.  - The combination of FRO and SSO behaviors should allow for subtleand highly flexible tuning of how the laser cutter is operating inreal-time and during the job.- Re-factored planner block rapid rate handling for the dynamic laserpower feature. Should have had no effect on how Grbl operates.","['commit_log_v1.1.txt,config.h,grbl.h,planner.c,planner.h,protocol.c,spindle_control.c,stepper.c']"
6e3fb6bd13e3c8a0b5ecfe26bdf5b36c8f4e7f82,Sonny Jeon,2016-11-04,"Improved constant laser power per rate mode. Re-factored for flash size. Minor bug fixes.- NOTE: This commit has largely been untested.- Constant laser power per rate mode has been improved. Altered itsimplementation to be more responsive and accurate.- Based on LaserWeb dev feedback, only G1, G2, and G3 moves operatewith constant laser power mode. Meaning that G0, G38.x, and $J joggingmotions operate without it and will keep a constant power output. Thiswas specifically requested as a way to focus the laser by keeping thelaser on when not moving. Operationally, this shouldn’t alter how thelaser mode operates.- Re-factored parts of the g-code parser and g-code state reports tosave a few hundred bytes of flash. What was done makes the code a bitmore unreadable (bad), but the flash space was in dire need. So, I’mwilling to live with it for now.- Fixed a problem with $G g-code state reports. Showed `M0` programpause during a run state. Now fixed to show nothing during a run state.Also, `M30` program end was shown as `M2`. This was also corrected.- Improved spindle stop override responsiveness by removing theenforced spindle restoring delay. It’s not needed for a feature that isuser controlled.- Fixed a bug with G2/3 arcs in inverse time mode.- Updated the interface.md document to make it more clear how WPos: orMPos: can be calculated from WCO:. Some GUI devs have failed to catchthis in the documentation.","['README.md,commit_log_v1.1.txt,interface.md,gcode.c,gcode.h,grbl.h,motion_control.c,planner.h,protocol.c,report.c,spindle_control.c,stepper.c']"
1161056bf25ff13a9031746127233d911aef54ea,Sonny Jeon,2016-11-04,Fixed a g-code parser issue caused by last commit.- G-code parser refactoring in the last commit wasn’t tested. Found andfixed issues with G28.1/30.1 and G38.x probe commands. They were notbeing accepted due to a borked mantissa check.,"['commit_log_v1.1.txt,gcode.c']"
998f23b9ce047b03154d773b8aa0ff2b0527146c,Sonny Jeon,2016-11-12,"PWM calculation correction.- The PWM calculation was a little bit off and has been corrected.- Edited the unused settings strings to be smaller and just show whatthe settings are, rather than include units. May include this in themaster build, if it fits.- The minimum spindle PWM define in config.h needed to be update forcpu map compatibilty.","['commit_log_v1.1.txt,config.h,grbl.h,report.c,spindle_control.c']"
b753c542c7f708a5b86b73e87328615223c5c8be,Sonny Jeon,2016-12-03,"v1.1e: New laser features. G-code parser refactoring. CoreXY homing fix.- Increment to v1.1e due to new laser features.- After several discussions with some prominent laser people, a fewtweaks to the new laser mode has been installed.- LASER: M3 behaves in a constant power mode.- LASER: M4 behaves in a dynamic power mode, where the laser power isautomatically adjusted based on how fast Grbl is moving relative to theprogrammed feed rate. This is the same as the  CONSTANT_POWER_PER_RATEconfig.h option in the last version. NOTE: When not in motion in M4,Grbl automatically turns off the laser. Again, it only operates whilemoving!- LASER: Only G1, G2, and G3 motion modes will turn on the laser. So,this means that G0, G80 motion modes will always keep the laserdisabled. No matter if M3/M4 are active!- LASER: A spindle stop override is automatically invoked when a laseris put in a feed hold. This behavior may be disabled by a config.hoption.- Lots of little tweaks to the g-code parser to help streamline it abit. It should no effect how it operates. Generally just added a parserflag to track and execute certain scenarios a little more clearly.- Jog motions now allow line numbers to be passed to it and will bedisplayed in the status reports.- Fixed a CoreXY homing bug.- Fixed an issue when $13 is changed, WCO isn’t sent immediately.- Altered how spindle PWM is set in the stepper ISR. Updated on a stepsegment basis now. May need to change this back if there are anyoddities from doing this.- Updated some documentation. Clarified why M0 no longer showing up in$G and why a `1.` floating point values are shown with no decimals,like so `1`.","['commit_log_v1.1.txt,change_summary.md,interface.md,jogging.md,config.h,gcode.c,gcode.h,grbl.h,jog.c,jog.h,motion_control.c,motion_control.h,planner.c,protocol.c,report.c,settings.c,spindle_control.c,stepper.c']"
94083e8314d99c147f8632d2c203414da1bf48e6,chamnit,2016-12-04,Fixed unintended laser mode pausing. Updated documentation. Min SS OVR lowered to 10%.- [laser] Tested a working version and pushed the wrong one for thelast! 20161203 was pausing upon every spindle speed change. That’s notright. Fixed so nearly all motions are passed through and does not stop.- Minimum spindle speed override lower from 50% to 10%. Lasers coulduse the lower speeds.- Fixed a very minor bug related to G80 error checking. Allowed noerror with non-modal motions with axis words. Not correct and fixed.- Fixed a compile error when disabling VARIABLE_SPINDLE- [doc] Updated some obsolete documentation.- [doc] Started a “Laser Mode” document that summarizes how Grbl’s newlaser mode works.,"['commit_log_v1.1.txt,change_summary.md,laser_mode.md,realtime_cmds.md,settings.md,config.h,gcode.c,gcode.h,grbl.h,stepper.c']"
490d3f1220a32b7723533f31a192faec1066119a,Sonny Jeon,2016-12-08,"Removed classic GUI interface. Fixed typo with line number support.- [config] Permanently removed classic GUI interface support. Thisunintentionally created a problem where some users/GUI devs used thiscompatibility mode and did not update to the new interface. So, therewere two interfaces in use, rather than just one like it was intended.This removal should help everyone by forcing all GUIs to update andupdated GUI not having to support yet another interface.- Fixed typo with line number support in jog mode.","['commit_log_v1.1.txt,config.h,grbl.h,jog.c,report.c,settings.h']"
54985b30a33ba58cb30b4f40830827c7a2247470,Sonny Jeon,2016-12-09,Update README.md,['README.md']
8f9605c65a685b3ccbc58b4d4d31c21a3cff7884,Sonny Jeon,2016-12-09,Update README.md,['README.md']
4d10c3062c37b8a096c2a6b5649bb3a7e00edca4,Sonny Jeon,2016-12-09,Update README.md,['README.md']
91d6de90bdb75c9a73efb6c2acc4c5d3d1314f8b,Sonny Jeon,2016-12-10,Updated documentation. Cleaned up a bit.- [doc] Updated the markdown documents for the v1.1 release.- [doc] Removed references to classic GUI mode.,"['build_option_codes_en_US.csv,commit_log_v1.1.txt,commands.md,interface.md,realtime_cmds.md,settings.md,report.c']"
5d79103eb9b9a8c6c92058ffa4f1a7fd1bb4e3c2,Sonny Jeon,2016-12-11,Updated documentation.,"['commit_log_v1.1.txt,interface.md,jogging.md,laser_mode.md,interface_notes.md']"
af17f0071f1b964c32962d486f0351bdc6f7a6d9,Sonny Jeon,2016-12-12,Updating steam.py streaming script- Added push message capability to the stream.py streaming script. Itprints out as a `Debug:` string in the output.,['stream.py']
d5ed3bdb81b47e9c227f380f833782dd2af68865,Sonny Jeon,2016-12-18,Addressed optional PWM min value issue. Updated docs.- [fix] Spindle PWM minimum value had some typos. Fixed the macros tocompile correctly. Only effects users that enable SPINDLE_MINIMUM_PWM.The name changed to SPINDLE_PWM_MIN_VALUE for consistency sake.- Updated the laser documentation.,"['commit_log_v1.1.txt,laser_mode.md,config.h,cpu_map.h,grbl.h']"
864d1306b93285645599e33063c0805e6c8ff905,Sonny Jeon,2016-12-19,"Fixed homing fail alarm handling. Re-integrated software debouncing.- [bug] Fixed a homing fail issue, where the alarm was not being setright, not cleared correctly. It would report the wrong code and enteran infinite alarm loop. This was due to how alarm codes were altered awhile back. Now updated and fixed to show the right codes.- [feature] Re-installed optional software debouncing for hard limitswitches. By request.","['commit_log_v1.1.txt,config.h,grbl.h,limits.c,motion_control.c,planner.c,protocol.c,report.c,report.h,system.c,system.h']"
30c0f79afda7380a9c0c507ba84c5e05b6103684,Sonny Jeon,2017-01-03,"Spindle enable pin with variable spindle option fix.- [fix] When USE_SPINDLE_DIR_AS_ENABLE_PIN is enabled in config.h, theenable pin was not being set when spindle speed is zero. This behaviorshould now be fixed.","['commit_log_v1.1.txt,grbl.h,spindle_control.c']"
67ab9280d9e02fa7546fca96c8ba7a1893e01f8b,Sonny Jeon,2017-01-14,Tool number bug fix. Updated documentation.- [fix] Tool numbers were not being tracked and reported correctly. Nowshows tool number values in $G when programmed.- [fix] Added a max tool number value check to the g-code parser.- [doc] Added a new error code for invalid tool number. Updated CSV andinterface documents.- [doc] Added a implementation note for buffer state in status reports.Don’t rely on this data for streaming.,"['error_codes_en_US.csv,commit_log_v1.1.txt,interface.md,cpu_map.h,gcode.c,grbl.h,report.h']"
e455764079ccfa9ae277a8fa0078b0dbb36f3a51,chamnit,2017-01-28,"v1.1f. Parking override control. Spindle enable pin option.[ver] v1.1f update due to tweaks to interface from new parking overridecontrol.[new] Parking motion override control via new `M56 P0` and `M56 P1`command, which disables and enables the parking motion, respectively.Requires ENABLE_PARKING_OVERRIDE_CONTROL and PARKING_ENABLE enabled inconfig.h. Primarily for OEMs.[new] `M56` appears in the $G report when enabled.[new] Five new build info identification letters. Some were missing anda couple are new. Updated the CSV and documentation to reflect thesenew items.[new] Spindle enable pin configuration option to alter its behaviorbased on how certain lasers work. By default, Grbl treats the enablepin separately and leaves it on when S is 0. The new option turns theenable pin on and off with S>0 and S=0. This only is in effect when auser enables the USE_SPINDLE_DIR_AS_ENABLE_PIN option.[fix] M4 is now allowed to work when USE_SPINDLE_DIR_AS_ENABLE_PIN isenabled. Previously this was blocked and was problematic for laserfolks using M4.[fix] Properly declared system variables as extern. Not sure how thatwent unnoticed or why it worked up until now but it has.[fix] EXTREMELY RARE. When AMASS is intentionally disabled and sent amotion command that is _one step_ in length, Grbl would not actuate thestep due to numerical round-off. Applied a fix to prevent the round-offissue.[fix] Added a compile-time check for AMASS settings to make sure thatthe numerical round-off issue doesn’t effect it. This would only happenif someone set AMASS max levels to zero. It does not effect AMASS withits current defaults.[fix] Wrapped the mc_parking_motion() function in an ifdef for portingpurposes.[fix] Fixed an issue when in inverse time mode and G0’s would require aF word. This was not correct.[fix] Added a note in the defaults.h file that MAX_TRAVEL values mustbe positive. Some users were setting this negative and it was causingissues.","['build_option_codes_en_US.csv,commit_log_v1.1.txt,change_summary.md,commands.md,interface.md,laser_mode.md,config.h,defaults.h,gcode.c,gcode.h,grbl.h,main.c,motion_control.c,motion_control.h,protocol.c,report.c,spindle_control.c,stepper.c,system.h']"
beaa40583c241f42035e8cadd5fba4319e3d0618,Sonny Jeon,2017-01-29,"Tidying up parking override control implementation[new] Added a default configuration for the parking override controlupon a reset or power-up. By default, parking is enabled, but this maybe disabled via a config.h option.[fix] Parking override control should be checking if the command wordis passed, rather than the value.","['commit_log_v1.1.txt,config.h,gcode.c,gcode.h,grbl.h,protocol.c,report.c']"
f51268e8556354a4851a8bdac2b6be7b8d7d5a03,Sonny Jeon,2017-01-31,"Additional build info in the $I printout.- [new] Added total available planner buffer blocks (15 shown, butthere are 16. one is used by the ring buffer and to execute systemmotions) and serial RX buffer bytes. This information is useful forGUIs to setup and optimize their streaming protocols easily.[doc] Updated the interface document to reflect the change.","['commit_log_v1.1.txt,interface.md,grbl.h,report.c']"
bdc853e557de49fd1fe20c5857b1317662b34ec6,Sonny Jeon,2017-02-23,"Fixed issue with M3 laser state changes and coincident targets.[fix] When in M3 constant laser power mode, a change from G0 to G1would not set the laser on, if G1 was passed with a coincident target.Motion controller now checks for a coincident target situation and willforce a spindle sync when detected.","['commit_log_v1.1.txt,grbl.h,motion_control.c']"
e54444e948df641480a1444547fb1f4868df78ef,Sonny Jeon,2017-02-23,Restrict coincident target updates to M3 constant laser only.- Restrict M3 forced updates when there is a motion block with acoincident target. Force syncing of the spindle state can lead to somepauses during a job that has coincident targets. That’s notparticularly desirable. This ensures M4 dynamic mode is not effected bythis force-sync.,"['commit_log_v1.1.txt,motion_control.c']"
fd2a4ebaee16fc996ba82ff7a33c543be4bdbe8b,Sonny Jeon,2017-02-27,Fixed shared build info code.- The build info options of “two switches on an axis” and “homing initlock” shared the same letter ‘L’. The former is now ’T’.,"['build_option_codes_en_US.csv,commit_log_v1.1.txt,interface.md,grbl.h,report.c']"
849122559b647493f4deda59405f130589fcd1b6,Sonny Jeon,2017-03-02,"Fixed $G report issue with M7 and M8 both enabled.[fix] When M7 and M8 are both enabled, $G report would show `M78`,rather than `M7 M8`. This only effects systems that enable M7 mistcoolant in config.h. Not the default build.","['commit_log_v1.1.txt,grbl.h,report.c']"
b214accc6d2dcf3ead80714ede2860b5dbdd09b6,Sonny Jeon,2017-03-19,Update README.md,['README.md']
43561abaf7351c28320c48bfee5ef1e097337bbf,Sonny Jeon,2017-03-19,Housekeeping.- Moved Grbl logo files to a separate repo.- Added PocketNC FR4 defaults. Needs some additional work though to becompatible.- Updated README image links.,"['README.md,COPYING,Grbl Logo 150px.png,Grbl Logo 250px.png,Grbl Logo 320px.png,Grbl Logo 640px.png,Grbl Logo.pdf,Grbl Logo.svg,defaults.h']"
775acac601558a18633cac158449839738693bb9,Sonny Jeon,2017-03-24,"Added an error code for laser mode when VARIABLE_SPINDLE is disabled.- When trying to enable laser mode with $32=1 and VARIABLE_SPINDLE isdisabled, the error code shown was improperly stating it was a homingfailure. Added an new error code specifically for the laser mode beingdisabled without VARIABLE_SPINDLE.","['error_codes_en_US.csv,commit_log_v1.1.txt,interface.md,grbl.h,report.h,settings.c']"
790c666ecbe0775019ee9deef51c27db33409ab9,chamnit,2017-05-31,New nonlinear spindle speed PWM output model and solution. Updated scripts.[new] A nonlinear spindle speed/PWM output option via a piecewiselinear fit model. Enabled through config.h and solved by a Pythonscript in /doc/script[new] fit_nonlinear_spindle.py. A solver script that can be run onhttp://repl.it for free. No Python install necessary. All instructionsare available in the script file comments.[new] stream.py has been updated to include status reports feedback at1 second interval.[fix] stream.py bug fix with verbose mode disabled.,"['commit_log_v1.1.txt,fit_nonlinear_spindle.py,stream.py,config.h,grbl.h,spindle_control.c']"
921e5a9799691118ffe5d4ecf5ccce68efe8a3f8,Sonny Jeon,2017-07-17,"Clean up and new streaming script check-mode feature.[new] The stream.py streaming script now has a check-mode option, where it will place Grbl in $C check mode automatically and then stream the g-code program. It's a very fast way to check if the g-code program has any errors.[fix] The debug variable was not initialized if the debug option was enabled in config.h[fix] Updated error_codes CSV file to the same format as the others.","['error_codes_en_US.csv,commit_log_v1.1.txt,stream.py,grbl.h,main.c']"
477a94cd4965a3442e88cd0b69d95ced7452d2c8,Sonny Jeon,2017-07-31,"Hot fix for rare lowering feed override bug.[fix] Squashed a very rare bug when lowering the feedrate (or rapid) override. When in the very strict set of circumstances with acceleration settings, override step size, and current speed, an internal calculation would cause Grbl to crash. The fix was an overlooked equality statement that should have been a less than or equal, not a less than.","['commit_log_v1.1.txt,grbl.h,stepper.c']"
5967839ab38f8e984a384db1f64e781cffb9e739,Sonny Jeon,2017-08-01,"Improved fix for rare lowering feed/rapid override bug.[fix] In the previous hot fix, there was still (rarer) potential forvery small floating point errors incorrectly handle an overridedeceleration and crash Grbl. Re-factored the if-then statement in termsof speed changes, rather than distance, to completely eliminate theissue.","['commit_log_v1.1.txt,grbl.h,stepper.c']"
5c8dcefcbdc72e953fb07c5f8bb8ef4925ac6b5b,Sonny Jeon,2018-04-06,Updated instructions in fit_nonlinear_spindle.py- repl.it has changed since the last time fit_nonlinear_spindle.py was tested. Updated instructions.,['fit_nonlinear_spindle.py']
a84aa1800c1feef2bec2808ebe23ff06d14ad69f,Jon,2018-06-09,Fix apparent error in restore masking that causes the call to coolant_set_state to not re-enable the mist (M7) output if it was previously enabled. (#469),['protocol.c']
332acada8854538443d625c84b5346a34cabbf6a,Sonny Jeon,2018-06-14,"Spindle/coolant rare bug fixes. Free more flash.[new] Altered the way default settings are stored and restored. Saved about 300 bytes(!) of flashed size. Should free up enough for certain configurations of CoreXY machines.[fix] When the optional M7 mist coolant IO was enabled, coolant overrides was not disabling correctly.[fix] Coolant override states was not restored correctly after a parking motion in certain situations. It would restore programmed state, rather than current overridden state.[fix] Now allow coolant overrides to operate during jogging motion.[fix] Invert control pin mask typo.[new] Added a new build info feedback mechanism for enabling the safety door input pin.","['build_option_codes_en_US.csv,commit_log_v1.1.txt,interface.md,config.h,coolant_control.c,coolant_control.h,gcode.c,grbl.h,planner.h,protocol.c,report.c,settings.c,settings.h']"
0b5604bd7bcceb1f52a50b280a5e81d35a202d30,Sonny Jeon,2018-11-12,Update gcode.cIf statement bug fix related to jog motion modal group error checking.,['gcode.c']
addb1a981342e4dd666d547e06f058d325ad186e,Sonny Jeon,2018-11-12,Update system.cCorrect control pin state checking within pin change interrupt. Improper if-else statements could lead to missed signal.,['system.c']
bb25d2f97e0e6afc9cbec70f532632b8f6803cc0,Sonny Jeon,2018-11-12,Update grbl.h,['grbl.h']
b75e5571eeaeb22a88304716fb1e7411f9c28be0,Sonny Jeon,2019-07-30,"Dual motor support for self-squaring gantry homing.- New dual motor support feature for gantry CNC machines. An axis motor is  efficiently mirrored to a dedicated set of step and direction pins (D12/D13 or A3/A4) with no detectable loss of performance. Primarily used to independently home both sides of a dual-motor gantry with a pair of limit switches (second shared with Z-axis limit pin). When the limit switches are setup correctly, Grbl will self-square the gantry (and stay square if $1=255 is programmed). Beware use at your own risk! Grbl is not responsible for any damage to any machines.- Dual axis motors is only supported on the X-axis or Y-axis. And deletes the spindle direction(D13) and optional coolant mist (A4) features to make room for the dual motor step and direction pins.- Dual axis homing will automatically abort homing if one limit switch triggers and travels more than 5% (default) of the non-dual axis max travel setting. For example, if the X-axis has dual motors and one X-axis triggers during homing, Grbl will abort 5% of the Y-axis max travel and the other X-axis limit fails to trigger. This will help keep any misconfigurations or failed limit switches from damaging the machine, but not completely eliminate this risk. Please take all precautions and test thouroughly before using this.- Dual axis motors supports two configurations:- Support for Arduino CNC shield clones. For these, step/dir on pins D12/D13, and spindle enable is moved to A3 (old coolant enable), while coolant enable is moved to A4 (SDA pin). Variable spindle/laser mode option is NOT supported for this shield.- Support for Protoneer CNC Shield v3.51. Step/dir on pins A3/A4, and  coolant enable is moved to D13 (old spindle direction pin). Variable spindle/laser mode option IS supported for this shield.- Added Bob's CNC E3 and E4 CNC machine defaults.","['alarm_codes_en_US.csv,build_option_codes_en_US.csv,commit_log_v1.1.txt,config.h,cpu_map.h,defaults.h,grbl.h,limits.c,planner.c,report.c,spindle_control.c,stepper.c,system.h']"
cc4c0ffebc5a9ad079cbb583650a4182def28bdb,Sonny Jeon,2019-08-25,Update system.c,['system.c']
40eb439bf2afc4c6f3003836c396e183ba72c45b,Sonny Jeon,2019-08-25,Update grbl.h,['grbl.h']
bdc2da9b5972c5972cdd4a4f045a575f09ff74cc,Sonny Jeon,2019-08-30,Fixed typo bug effecting dual-axis build with Y.,"['grbl.h,report.c']"
eefe2bb95bb7b21ec2bb87e6ab6e20747e1626c4,Sonny Jeon,2019-08-30,Update log.,['commit_log_v1.1.txt']
